import { SpreadsheetModel, Spreadsheet, DialogBeforeOpenEventArgs, CellSaveEventArgs } from '../../../src/spreadsheet/index';
import { SpreadsheetHelper } from '../util/spreadsheethelper.spec';
import { defaultData, reportedBugData, EJ2_53702_SUBTOTALS, EJ2_53702_INDEX, EJ2_53702_UNIQUE, EJ2_53702_SLOPE_SHEET1, EJ2_53702_SLOPE_SHEET2 } from '../util/datasource.spec';
import { CellModel, getCell, getRangeAddress, DefineNameModel, RowModel, SheetModel, getFormatFromType, setCell } from '../../../src/index';
import { getComponent } from '@syncfusion/ej2-base';

/**
 *  Formula spec.
 */

describe('Spreadsheet formula module ->', () => {
    let helper: SpreadsheetHelper = new SpreadsheetHelper('spreadsheet');
    let model: SpreadsheetModel;

    describe('UI interaction checking ->', () => {
        beforeAll((done: Function) => {
            model = {
                sheets: [
                    {
                        ranges: [{ dataSource: defaultData }]
                    }
                ]
            };
            helper.initializeSpreadsheet(model, done);
        });

        afterAll(() => {
            helper.invoke('destroy');
        });

        // it('Formula edit testing', (done: Function) => {
        //     let td: HTMLTableCellElement = helper.invoke('getCell', [5, 4]);
        //     let coords: DOMRect = <DOMRect>td.getBoundingClientRect();
        //     //Selection update.
        //     helper.triggerMouseAction('mousedown', { x: coords.x, y: coords.y }, null, td);
        //     helper.triggerMouseAction('mouseup', { x: coords.x, y: coords.y }, null, td);
        //     //Start edit.
        //     helper.triggerMouseAction('dblclick', { x: coords.x, y: coords.y }, null, td);
        //     let editorElem: HTMLElement = helper.getElementFromSpreadsheet('.e-spreadsheet-edit');
        //     editorElem.textContent = '=S';
        //     //key up & down - S key for update internal properties.
        //     helper.triggerKeyEvent('keydown', 83, null, false, false, editorElem);
        //     helper.triggerKeyEvent('keyup', 83, null, false, false, editorElem);
        //     setTimeout(() => {
        //         let formulaPopupLi: HTMLElement = helper.getElement('#spreadsheet_ac_popup li');
        //         expect(formulaPopupLi).not.toBeNull();
        //         expect(formulaPopupLi.textContent).toBe('SUM');
        //         setTimeout(() => {
        //             helper.triggerKeyEvent('keydown', 9, null, false, false, editorElem); //Tab key
        //             setTimeout(() => {
        //                 expect(editorElem.textContent).toBe('=SUM(');
        //                 editorElem.textContent = editorElem.textContent + '10,20';
        //                 //key down - S key for update internal properties.
        //                 helper.triggerKeyEvent('keydown', 48, null, false, false, editorElem);
        //                 //Enter key
        //                 helper.triggerKeyEvent('keydown', 13, null, false, false, editorElem);
        //                 helper.invoke('getData', ['Sheet1!E6']).then((values: Map<string, CellModel>) => {
        //                     expect(values.get('E6').formula).toEqual('=SUM(10,20)');
        //                     expect(values.get('E6').value).toEqual('30');
        //                     done();
        //                 });
        //             }, 10);
        //         }, 10);
        //     }, 110);
        // });


        it('Int formula', (done: Function) => {
            helper.edit('D2', '11.5');
            helper.edit('J1', '=int(D2)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('11');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":11,"formula":"=int(D2)"}');
            done();
        });

        it('Today formula', (done: Function) => {
            helper.edit('J2', '=today()');
            const cell: CellModel = helper.getInstance().sheets[0].rows[1].cells[9];
            expect(cell.format).toBe('m/d/yyyy');
            expect(cell.formula).toBe('=today()');
            done();
        });

        it('Sum product formula', (done: Function) => {
            helper.edit('J3', '=sumproduct(D2:D5,E2:E5)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('1430');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":1430,"formula":"=sumproduct(D2:D5,E2:E5)"}');
            done();
        });

        it('Roundup formula', (done: Function) => {
            helper.edit('J4', '=roundup(D2, 0)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('12');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"12","formula":"=roundup(D2, 0)"}');
            done();
        });

        it('Sort formula', (done: Function) => {
            helper.edit('K1', '=sort(A1:A4)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('Formal Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"Casual Shoes","formula":"=sort(A1:A4)"}');
            expect(helper.getInstance().sheets[0].rows[2].cells[10].value).toBe('Item Name')
            expect(helper.getInstance().sheets[0].rows[3].cells[10].value).toBe('Sports Shoes')
            done();
        });

        it('Text formula', (done: Function) => {
            helper.edit('J5', '=Text(D2, "0%")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1150%');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].formula).toBe('=Text(D2, "0%")');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].value).toBe('11.5');
            done();
        });

        it('Lookup formula', (done: Function) => {
            helper.edit('J6', '=LOOKUP(20,D2:D5,E2:E5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[9].formula).toBe('=LOOKUP(20,D2:D5,E2:E5)');
            // expect(helper.invoke('getCell', [5, 9]).textContent).toBe('15'); // This case need to be fixed
            // expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":15,"formula":"=LOOKUP(20,D2:D5,E2:E5)"}');
            done();
        });

        it('Slope formula', (done: Function) => {
            helper.edit('J7', '=slope(D2:D5,E2:E5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.142105263');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"0.14210526315789473","formula":"=slope(D2:D5,E2:E5)"}');
            done();
        });

        it('Intercept formula', (done: Function) => {
            helper.edit('J8', '=INTERCEPT(D2:D5,E2:E5)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('13.60526316');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{"value":"13.605263157894736","formula":"=INTERCEPT(D2:D5,E2:E5)"}');
            done();
        });

        it('Ln formula', (done: Function) => {
            helper.edit('J9', '=ln(D2)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('2.442347035');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[9])).toBe('{"value":2.4423470353692043,"formula":"=ln(D2)"}');
            done();
        });

        it('IsNumber formula', (done: Function) => {
            helper.edit('J10', '=isnumber(D2)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[9])).toBe('{"value":true,"formula":"=isnumber(D2)"}');
            helper.edit('J10', '=isnumber(A1)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[9])).toBe('{"value":false,"formula":"=isnumber(A1)"}');
            done();
        });

        it('Round formula', (done: Function) => {
            helper.edit('J11', '=round(D2, 0)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('12');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[9])).toBe('{"value":"12","formula":"=round(D2, 0)"}');
            done();
        });

        it('Power formula', (done: Function) => {
            helper.edit('J12', '=power(G3,G4)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('78125');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[9])).toBe('{"value":"78125","formula":"=power(G3,G4)"}');
            done();
        });

        it('Log formula', (done: Function) => {
            helper.edit('J13', '=log(D3,E3)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('0.88078754');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[9])).toBe('{"value":"0.8807875396193516","formula":"=log(D3,E3)"}');
            done();
        });

        it('Trunc formula', (done: Function) => {
            helper.edit('J14', '=trunc(D2)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('11');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[9])).toBe('{"value":"11","formula":"=trunc(D2)"}');
            done();
        });

        it('Exp formula', (done: Function) => {
            helper.edit('J15', '=exp(D4)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('485165195.4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[9])).toBe('{"value":"485165195.4097903","formula":"=exp(D4)"}');
            done();
        });

        it('Geomean formula', (done: Function) => {
            helper.edit('J16', '=geomean(D2:D6)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('18.33133394');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[9])).toBe('{"value":"18.331333944571234","formula":"=geomean(D2:D6)"}');
            done();
        });

        it('Dependent cell update', (done: Function) => {
            helper.edit('D6', '40');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('19.41698595');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[9])).toBe('{"value":"19.41698595231722","formula":"=geomean(D2:D6)"}');
            done();
        });

        it('Compute expression', (done: Function) => {
            expect(helper.invoke('computeExpression', ['=SUM(E2,E5)'])).toBe(40);
            done();
        });
        it('Now formula', (done: Function) => {
            helper.edit('A13', '=NOW()');
            const cell: CellModel = helper.getInstance().sheets[0].rows[12].cells[0];
            expect(cell.value.indexOf('/') > -1).toBeFalsy();
            expect(cell.value.indexOf(':') > -1).toBeFalsy();
            expect(!!Number(cell.value)).toBeTruthy();
            expect(cell.format).toBe('m/d/yyyy h:mm');
            const cellContent: string = helper.invoke('getCell', [12, 0]).textContent;
            expect(cellContent.indexOf('/') > -1).toBeTruthy();
            expect(cellContent.indexOf(':') > -1).toBeTruthy();
            expect(cellContent.indexOf('AM') > -1).toBeFalsy();
            expect(cellContent.indexOf('PM') > -1).toBeFalsy();
            done();
        });
        it('Date formula', (done: Function) => {
            helper.edit('A14', '=DATE(2022, 8, 22)');
            const cell: CellModel = helper.getInstance().sheets[0].rows[13].cells[0];
            expect(cell.formula).toBe('=DATE(2022, 8, 22)');
            expect(cell.value).toBe('44795');
            const cellEle: HTMLElement = helper.invoke('getCell', [13, 0]);
            expect(cellEle.textContent).toBe('8/22/2022');
            expect(cellEle.classList.contains('e-right-align')).toBeTruthy();
            helper.invoke('updateCell', [{ formula: '=DATE(2022, 1, -1)' }, 'A14']);
            expect(cell.formula).toBe('=DATE(2022, 1, -1)');
            expect(cell.value).toBe('44560');
            expect(cellEle.textContent).toBe('12/30/2021');
            expect(cellEle.classList.contains('e-right-align')).toBeTruthy();
            helper.invoke('updateCell', [{ formula: '=DATE(2022, -1, 1)' }, 'A14']);
            expect(cell.formula).toBe('=DATE(2022, -1, 1)');
            expect(cell.value).toBe('44501');
            expect(cellEle.textContent).toBe('11/1/2021');
            expect(cellEle.classList.contains('e-right-align')).toBeTruthy();
            helper.invoke('updateCell', [{ formula: '=DATE(2022, -30, 1)' }, 'A14']);
            expect(cell.formula).toBe('=DATE(2022, -30, 1)');
            expect(cell.value).toBe('43617');
            expect(cellEle.textContent).toBe('6/1/2019');
            expect(cellEle.classList.contains('e-right-align')).toBeTruthy();
            done();
        });
    });

    describe('Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet(
                { sheets: [{ ranges: [{ dataSource: defaultData }], rows: [{ index: 1499, cells: [{ index: 2, formula: '=SUM(D2:D10)' }] }] },
                { rows: [{ index: 14, cells: [{ index: 3, formula: '=Sheet1!C1500' }] }], }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });

        it('INt formula no Inputs->', (done: Function) => { 
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=INT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=INT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I1', '=INT(100);');            
            done();
        });
        it('INt formula for #Value! Error->', (done: Function) => {
            helper.edit('D2', 'N/A');
            helper.edit('I2', '=INT("D2");');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toBe('=INT("D2");');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('INt formula with Range in ""->', (done: Function) => {
            helper.edit('D2', '11.5');
            helper.edit('I3', '=INT("D2");');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('INt formula with Direct Input Value->', (done: Function) => {
            helper.edit('I4', '=INT(12.5);');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('12');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":12,"formula":"=INT(12.5);"}');
            done();
        });
        it('TODAY formula with No Inputs', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=TODAY(C3)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=TODAY(C3)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I5', '=TODAY();');
            done();
        });
        it('WEEKDAY formula with No Inputs', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=WEEKDAY()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=WEEKDAY()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I6', '=WEEKDAY(B2);');            
            done();
        });
        it('WEEKDAY formula', (done: Function) => {
            helper.edit('I7', '=WEEKDAY(B2);');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":6,"formula":"=WEEKDAY(B2);"}');
            done();
        });
        it('PROPER formula with No Inputs', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I8');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=PROPER();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=PROPER();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I8', '=PROPER(A4);');
            done();
        });
        it('PROPER formula with #Name Error', (done: Function) => {
            helper.edit('I9', '=PROPER(sync fusion);');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":"#NAME?","formula":"=PROPER(sync fusion);"}');
            done();
        });
        it('PROPER formula', (done: Function) => {
            helper.edit('I10', '=PROPER(A4);');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('Formal Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":"Formal Shoes","formula":"=PROPER(A4);"}');
            done();
        });
        it('PROPER formula with input contains "-"', (done: Function) => {
            helper.edit('I11', '=PROPER(A6);');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('Flip- Flops & Slippers');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"Flip- Flops & Slippers","formula":"=PROPER(A6);"}');
            done();
        });
        it('PROPER formula with input contains ","', (done: Function) => {
            helper.edit('A7', 'S,neakers');
            helper.edit('I12', '=PROPER(A7);');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('S,Neakers');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":"S,Neakers","formula":"=PROPER(A7);"}');
            done();
        });
        it('ROUNDUP formula with more than 2 inputs', (done: Function) => {
            helper.edit('J5', '=ROUNDUP(C2,C3,C4);');
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I13');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ROUNDUP(C2,C3,C4);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ROUNDUP(C2,C3,C4);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J5', '=ROUNDUP(12.3445,2);');
            done();
        });
        it('ROUNDUP formula with negative input', (done: Function) => {
            helper.edit('J6', '=ROUNDUP("-0.5");');
            expect(helper.getInstance().sheets[0].rows[5].cells[9].formula).toBe('=ROUNDUP("-0.5");');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('-1');
            done();
        });
        it('ROUNDUP formula with 2 Positive inputs', (done: Function) => {
            helper.edit('J7', '=ROUNDUP("0.5","0.5");');
            expect(helper.getInstance().sheets[0].rows[6].cells[9].formula).toBe('=ROUNDUP("0.5","0.5");');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.5');
            done();
        });
        it('ROUNDUP formula with First Negative input and second Positive inputs', (done: Function) => {
            helper.edit('J8', '=ROUNDUP(-0.5,0.5);');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('-0.5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{"value":"-0.5","formula":"=ROUNDUP(-0.5,0.5);"}');
            done();
        });
        it('ROUNDUP formula with having only second Positive input', (done: Function) => {
            helper.edit('J9', '=ROUNDUP(N/A,0.5);');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[9])).toBe('{"value":"#NAME?","formula":"=ROUNDUP(N/A,0.5);"}');
            done();
        });
        it('ROUNDUP formula with having only second Positive input in "" ->', (done: Function) => {
            helper.edit('J10', '=ROUNDUP(N/A,"0.5");');
            expect(helper.getInstance().sheets[0].rows[9].cells[9].formula).toBe('=ROUNDUP(N/A,"0.5");');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('#NAME?');
            done();
        });
        it('ROUNDUP formula with 2 Negative inputs', (done: Function) => {
            helper.edit('J11', '=ROUNDUP(-0.5,-0.5);');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[9])).toBe('{"value":"-1","formula":"=ROUNDUP(-0.5,-0.5);"}');
            done();
        });
        it('ROUNDUP formula with having only second NEgative input', (done: Function) => {
            helper.edit('J12', '=ROUNDUP(N/A,-0.5);');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[9])).toBe('{"value":"#NAME?","formula":"=ROUNDUP(N/A,-0.5);"}');
            done();
        });
        it('ROUNDUP formula with having no first input', (done: Function) => {
            helper.edit('J13', '=ROUNDUP(,0.5);');
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ROUNDUP(,0.5);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ROUNDUP(,0.5);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J13', '=ROUNDUP(23.457,1);');
            done();
        });
        it ('Calculate sheet', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            expect(spreadsheet.sheets[0].rows[1499].cells[2].value).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!0!C1500')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!C1500')).toBeUndefined();
            helper.invoke('calculateNow');
            expect(spreadsheet.sheets[0].rows[1499].cells[2].value).toBe('228.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!0!C1500').size).toBe(9);
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!C1500').formulaValue).toBe('228.5');
            done();
        });
        it ('Calculate workbook', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            expect(spreadsheet.sheets[1].rows[14].cells[3].value).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!1!D15')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!1!D15')).toBeUndefined();
            helper.invoke('calculateNow', ['Workbook']);
            expect(spreadsheet.sheets[1].rows[14].cells[3].value).toBe('228.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!1!D15').size).toBe(1);
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!1!D15').formulaValue).toBe('228.5');
            done();
        });
        it ('Calculate the formulas in which the dependencies are not added and uncalculated', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            setCell(1, 10, spreadsheet.sheets[0], { formula: '=AVERAGE(E2:E11)', value: '#VALUE!' });
            expect(spreadsheet.sheets[0].rows[1].cells[10].value).toBe('#VALUE!');
            helper.invoke('updateCell', [{ value: '40' }, 'E2']);
            expect(spreadsheet.sheets[0].rows[1].cells[10].value).toBe('#VALUE!');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!0!K2')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K2')).toBeUndefined();
            helper.invoke('updateCell', [{ formula: '=K2' }, 'K3']);
            expect(spreadsheet.sheets[0].rows[2].cells[10].value).toBe('#VALUE!');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!0!K3').size).toBe(1);
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K3').formulaValue).toBe('#VALUE!');
            helper.invoke('calculateNow', ['Sheet', 'Sheet1']);
            expect(spreadsheet.sheets[0].rows[1].cells[10].value).toBe('19.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!0!K2').size).toBe(10);
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K2').formulaValue).toBe('19.5');
            expect(spreadsheet.sheets[0].rows[2].cells[10].value).toBe('19.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K3').formulaValue).toBe('19.5');
            helper.invoke('updateCell', [{ value: '20' }, 'E2']);
            expect(spreadsheet.sheets[0].rows[1].cells[10].value).toBe('17.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K2').formulaValue).toBe('17.5');
            expect(spreadsheet.sheets[0].rows[2].cells[10].value).toBe('17.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K3').formulaValue).toBe('17.5');
            setCell(1, 4, spreadsheet.sheets[0], { value: '500' }, true);
            setCell(3, 11, spreadsheet.sheets[0], { formula: '=K2' });
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!L4')).toBeUndefined();
            helper.invoke('calculateNow');
            expect(spreadsheet.sheets[0].rows[1].cells[10].value).toBe('65.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K2').formulaValue).toBe('65.5');
            expect(spreadsheet.sheets[0].rows[2].cells[10].value).toBe('65.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!K3').formulaValue).toBe('65.5');
            expect(spreadsheet.sheets[0].rows[3].cells[11].value).toBe('65.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!0!L4').formulaValue).toBe('65.5');
            helper.invoke('updateCell', [{ value: '20' }, 'E2']);
            done();
        });
        it ('Calculate non active sheet', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            setCell(3, 10, spreadsheet.sheets[1], { formula: '=AVERAGE(Sheet1!E2:E11)' });
            helper.invoke(
                'insertSheet', [[{ index: 2, rows: [{ index: 2, hidden: true, cells:
                    [{ index: 2, formula: '=Sheet2!D15+Sheet2!K4', value: null }, { formula: '=ROUND(C3, 0)', value: '200' }] }] }]]);
            expect(spreadsheet.sheets[2].rows[2].cells[2].value).toBeNull();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!2!C3')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!2!C3')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!1!K4')).toBeUndefined();
            expect(spreadsheet.sheets[2].rows[2].cells[3].value).toBe('200');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!2!D3')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!2!D3')).toBeUndefined();
            helper.invoke('calculateNow', ['Sheet', 2]);
            expect(spreadsheet.sheets[2].rows[2].cells[2].value).toBe('246');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!2!C3').size).toBe(2);
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!2!C3').formulaValue).toBe('246');
            expect(spreadsheet.sheets[1].rows[3].cells[10].value).toBe('17.5');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!1!K4').formulaValue).toBe('17.5');
            expect(spreadsheet.sheets[2].rows[2].cells[3].value).toBe('246');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!2!D3').size).toBe(1);
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!2!D3').formulaValue).toBe('246');
            done();
        });
        it ('Calculate formulas from sheets where the data source is not loaded', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            helper.invoke('insertSheet', [3]);
            spreadsheet.setSheetPropertyOnMute(spreadsheet.sheets[3], 'ranges', [{}, { dataSource: defaultData, startCell: 'A2', showFieldAsHeader: false }]);
            setCell(12, 3, spreadsheet.sheets[3], { formula: '=IF(F13, "Number", "Not a number")', value: 'Not a number' });
            setCell(12, 4, spreadsheet.sheets[3], { formula: '=SUM(Sheet5!E2:E11)' });
            setCell(12, 5, spreadsheet.sheets[3], { formula: '=ISNUMBER(D2)' });
            helper.invoke('insertSheet', [4]);
            setCell(12, 0, spreadsheet.sheets[4], { formula: '=CONCAT(A2:A3)' });
            helper.invoke('calculateNow', ['Sheet', 3]).then(() => {
                expect(spreadsheet.sheets[3].rows[12].cells[3].value).toBe('Number');
                expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!D13').formulaValue).toBe('Number');
                expect(spreadsheet.sheets[3].rows[12].cells[4].value).toBe(0);
                expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!3!E13').size).toBe(10);
                expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!E13').formulaValue).toBe(0);
                expect(spreadsheet.sheets[3].rows[12].cells[5].value).toBeTruthy();
                expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!F13').formulaValue).toBeTruthy();
                spreadsheet.setSheetPropertyOnMute(
                    spreadsheet.sheets[4], 'ranges', [{ dataSource: defaultData, startCell: 'A1', showFieldAsHeader: true, info: { loadedRange: [] } }]);
                helper.invoke('calculateNow', ['Workbook']).then(() => {
                    expect(spreadsheet.sheets[4].rows[12].cells[0].value).toBe('Casual ShoesSports Shoes');
                    expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!4!A13').formulaValue).toBe('Casual ShoesSports Shoes');
                    expect(spreadsheet.sheets[3].rows[12].cells[4].value).toBe(175);
                    expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!E13').formulaValue).toBe(175);
                    done();
                });
                expect(spreadsheet.sheets[4].rows[12].cells[0].value).toBeUndefined();
                expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!4!A13')).toBeUndefined();
            });
            expect(spreadsheet.sheets[3].rows[12].cells[3].value).toBe('Not a number');
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!D13')).toBeUndefined();
            expect(spreadsheet.sheets[3].rows[12].cells[4].value).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getDependentFormulaCells().get('!3!E13')).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!E13')).toBeUndefined();
            expect(spreadsheet.sheets[3].rows[12].cells[5].value).toBeUndefined();
            expect(spreadsheet.workbookFormulaModule.calculateInstance.getFormulaInfoTable().get('!3!F13')).toBeUndefined();
        });
    });

    describe('Formula - Checking II ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });

        it('Date formula->', (done: Function) => {
            helper.edit('O1', '1998');
            helper.edit('P1', '12');
            helper.edit('Q1', '26');
            helper.edit('I1', '=DATE(O1,P1,Q1);');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('12/26/1998');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"36155","formula":"=DATE(O1,P1,Q1);","format":"m/d/yyyy","formattedText":"12/26/1998"}');
            done();
        });
        it('Date formula with month having value more than 12->', (done: Function) => {
            helper.edit('P1', '22');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('10/26/1999');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"36459","formula":"=DATE(O1,P1,Q1);","format":"m/d/yyyy","formattedText":"10/26/1999"}');
            done();
        });
        it('Date formula with year having negative values->', (done: Function) => {
            helper.edit('P1', '12');
            helper.edit('O1', '-1998');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DATE(O1,P1,Q1);","format":"m/d/yyyy"}');
            done();
        });
        it('Date formula with having inputs as 0->', (done: Function) => {
            helper.edit('O1', '0');
            helper.edit('P1', '0');
            helper.edit('Q1', '0');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DATE(O1,P1,Q1);","format":"m/d/yyyy"}');
            done();
        });
        it('FLOOR formula with wrong inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=FLOOR(12.9,1,3);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=FLOOR(12.9,1,3);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I2', '=FLOOR(12.9,1);');
            done();
        });
        it('CEILING formula with wrong inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=CEILING(12.5, 3, 2);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=CEILING(12.5, 3, 2);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I3', '=CEILING(12.5,1);');
            done();
        });
        it('DAY formula with wrong inputs>', (done: Function) => {
            helper.edit('I4', '=DAY("B5");');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].formula).toBe('=DAY("B5");');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('DAYS formula with giving value True as input for error Checking->', (done: Function) => {
            helper.edit('I5', '=DAYS(True, October);');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#NAME?","formula":"=DAYS(True, October);"}');
            done();
        });
        it('DAYS formula with giving value False as input for error Checking>', (done: Function) => {
            helper.edit('I6', '=DAYS(False, October);');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#NAME?","formula":"=DAYS(False, October);"}');
            done();
        });
        it('DAYS formula with giving value True & False as input ->', (done: Function) => {
            helper.edit('I7', '=DAYS(True, False);');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":1,"formula":"=DAYS(True, False);"}');
            done();
        });
        it('DAYS formula with giving single value input->', (done: Function) => {
            helper.edit('I8', '=DAYS(2022,);');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('2022');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":2022,"formula":"=DAYS(2022,);"}');
            done();
        });
        it('DAYS formula with giving # as input for End Date->', (done: Function) => {
            helper.edit('I9', '=DAYS("#-October-2022", "26-December-2022");');
            expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=DAYS("#-October-2022", "26-December-2022");');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('-86');
            done();
        });
        it('DAYS formula with giving # as input for Start Date->', (done: Function) => {
            helper.edit('I10', '=DAYS("20-October-2022", "#-December-2022");');
            expect(helper.getInstance().sheets[0].rows[9].cells[8].formula).toBe('=DAYS("20-October-2022", "#-December-2022");');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('-42');
            done();
        });
        it('T formula->', (done: Function) => {
            helper.edit('I11', '=T(A3);');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('Sports Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"Sports Shoes","formula":"=T(A3);"}');
            done();
        });
        it('T formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I12');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=T();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=T();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I12', '=T("hello");');
            done();
        });
        it('T formula with Number value input->', (done: Function) => {
            helper.edit('I13', '=T(D5);');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":"","formula":"=T(D5);"}');
            done();
        });
        it('T formula with Date value input->', (done: Function) => {
            helper.edit('I14', '=T(B5);');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[8])).toBe('{"value":"","formula":"=T(B5);"}');
            done();
        });
        it('T formula with Time value input->', (done: Function) => {
            helper.edit('I15', '=T(C5);');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[8])).toBe('{"value":"","formula":"=T(C5);"}');
            done();
        });
        it('T formula with : ->', (done: Function) => {
            helper.edit('I16', '=T(A3:A4);');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('Sports Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":"Sports Shoes","formula":"=T(A3:A4);"}');
            done();
        });
    });

    describe('Formula - Checking III ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('MONTH formula->', (done: Function) => {
            helper.edit('K1', '=MONTH(B5)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('11');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"11","formula":"=MONTH(B5)"}');
            done();
        });
        it('MONTH formula with no Inputs->', (done: Function) => {
            helper.edit('K2', '=MONTH()');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{}');
            done();
        });
        it('MONTH formula with 2 Inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MONTH(B5,B6)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MONTH(B5,B6)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K3', '=MONTH(B5)');
            done();
        });
        it('MONTH formula with Date and Time->', (done: Function) => {
            helper.edit('K4', '=MONTH("7/11/2022 7:21:56 AM")');
            expect(helper.getInstance().sheets[0].rows[3].cells[10].formula).toBe('=MONTH("7/11/2022 7:21:56 AM")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('7');
            done();
        });
        it('MONTH formula without ""->', (done: Function) => {
            helper.edit('K5', '=MONTH(7/11/2022 7:21:56 AM)');
            expect(helper.getInstance().sheets[0].rows[4].cells[10].formula).toBe('=MONTH(7/11/2022 7:21:56 AM)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('MONTH formula with cell having alphabets->', (done: Function) => {
            helper.edit('K6', '=MONTH(A1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"#VALUE!","formula":"=MONTH(A1)"}');
            done();
        });
        it('MONTH formula with direct month value as Input->', (done: Function) => {
            helper.edit('K7', '=MONTH("11/12/2022")');
            expect(helper.getInstance().sheets[0].rows[6].cells[10].formula).toBe('=MONTH("11/12/2022")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('11');
            done();
        });
        it('Now formula with Invalid Arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('L1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=NOW(B5)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=NOW(B5)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L1', '=NOW()');
            done();
        });
    });

    describe('IFERROR Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '43925.21' }] }, { cells: [{ value: '#VALUE!' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '#NAME?' }] }, { cells: [{ value: '#NUM!' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '2' }] }, { cells: [{ value: '4' }] }, { cells: [{ value: '15' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('IFERROR formula with number type ', (done: Function) => { 
            helper.edit('I1', '=IFERROR(34,1);');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('34');
            helper.edit('I2', '=IFERROR(-456,2);');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('-456');
            helper.edit('I3', '=IFERROR(-34.54,3);');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('-34.54');
            helper.edit('I4', '=IFERROR("45",11);');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('45');
            helper.edit('I5', '=IFERROR(5.43,12);');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('5.43');
            helper.edit('I6', '=IFERROR(-0.45,13);');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('-0.45');
            helper.edit('I7', '=IFERROR(67.54,14);');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('67.54');
            helper.edit('I8', '=IFERROR(-3,15);');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('-3');
            helper.edit('I9', '=IFERROR(12.67,16);');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('12.67');
            helper.edit('I10', '=IFERROR(342,17);');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('342');
            done();
        });
        it('IFERROR formula with invalid type', (done: Function) => {
            helper.edit('I11', '=IFERROR(hello,4);');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('4');
            helper.edit('I12', '=IFERROR(hello,one);');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#NAME?');
            done();
        });
        it('IFERROR formula with string type', (done: Function) => {
            helper.edit('I13', '=IFERROR(hello,"3");');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('3');
            helper.edit('I14', '=IFERROR(one,"");');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('');
            helper.edit('I15', '=IFERROR("hello",45);');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('hello');
            done();
        });
        it('IFERROR formula with invalid first argument', (done: Function) => {
            helper.edit('J1', '=IFERROR("er",4);');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('er');
            helper.edit('J2', '=IFERROR("",1);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('');
            done();
        });
        it('IFERROR formula with cell reference', (done: Function) => {
            helper.edit('J3', '=IFERROR(B2,2);');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('41684');
            helper.edit('J4', '=IFERROR(A5,1);');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('Sandals & Floaters');
            helper.edit('J5', '=IFERROR(45,G8);');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('45');
            helper.edit('J6', '=IFERROR(F3,G5);');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('600');
            done();
        });
        it('IFERROR formula without first argument', (done: Function) => {
            helper.edit('J7', '=IFERROR(,2);');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            helper.edit('J9', '=IFERROR("",G8);');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('');
            helper.edit('J10', '=IFERROR(45,"");');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('45');
            done();
        });
        it('IFERROR formula with empty as argument', (done: Function) => {
            helper.edit('J11', '=IFERROR(,);');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0');
            done();
        });
        it('IFERROR formula without second argument', (done: Function) => {
            helper.edit('J12', '=IFERROR(4,);');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('4');
            helper.edit('J13', '=IFERROR(G8,K10);');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('3');
            done();
        });
        it('IFERROR formula with second argument as expression and range', (done: Function) => {
            helper.edit('J14', '=IFERROR(4,2+1);');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('4');
            helper.edit('J15', '=IFERROR(G8,5-3);');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('3');
            helper.edit('J16', '=IFERROR(3/0,22/2);');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('11');
            helper.edit('J17', '=IFERROR(67,7*2);');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('67');
            helper.edit('J18', '=IFERROR(hello,A2:A5);');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('Casual Shoes');
            helper.edit('J19', '=IFERROR(A6:A9,"hello");');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('Flip- Flops & Slippers');
            done();
        });
        it('IFERROR formula with logical values as arguments', (done: Function) => {
            helper.edit('K1', '=IFERROR(TRUE,2);');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('TRUE');
            helper.edit('K2', '=IFERROR(FALSE,3);');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('FALSE');
            helper.edit('K3', '=IFERROR(3/0,TRUE);');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('TRUE');
            helper.edit('K4', '=IFERROR(43/0,FALSE);');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('FALSE');
            helper.edit('K5', 'TRUE');
            helper.edit('K6', 'FALSE');
            helper.edit('K7', '=IFERROR(43254,K5);');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('43254');
            helper.edit('K8', '=IFERROR(K5,11);');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('TRUE');
            helper.edit('K9', '=IFERROR(43254,K6);');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('43254');
            helper.edit('K10', '=IFERROR(K6,11);');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('FALSE');
            helper.edit('K11', '"TRUE"');
            helper.edit('K12', '"FALSE"');
            helper.edit('K13', '=IFERROR(K11,12);');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('"TRUE"');
            helper.edit('K14', '=IFERROR(K12,1);');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('"FALSE"');
            done();
        });
        it('IFERROR formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('L1', '=IFERROR($B$8,1)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('41674');
            helper.edit('L2', '=IFERROR($C$7,3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('0.455474537');
            helper.edit('L3', '=IFERROR($D$5,4)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('15');
            helper.edit('L4', '=IFERROR($E$3,2)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('30');
            helper.edit('L5', '=IFERROR($F$6,5)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('300');
            helper.edit('L6', '=IFERROR(56/0,$A$5)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('Sandals & Floaters');
            done();
        });
        it('IFERROR formula with Sheet references as arguments->', (done: Function) => {
            helper.edit('L7', '=IFERROR(Sheet2!A1,1)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('43925.21');
            helper.edit('L8', '=IFERROR(Sheet1!E3,3)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('30');
            helper.edit('L9', '=IFERROR(Sheet2!A4,4)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('4');
            helper.edit('L10', '=IFERROR(Sheet1!C10,11)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('0.480717593');
            done();
        });
        it('IFERROR formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L11', '=IFERROR(Sheet2!$A$3,12)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('"31-Jan-2018"');
            helper.edit('L12', '=IFERROR(Sheet1!$E$3,15)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('30');
            helper.edit('L13', '=IFERROR(Sheet2!$A$2,1)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('1');
            helper.edit('L14', '=IFERROR(Sheet1!$C$4,3)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('0.147731481');
            helper.edit('L15', '=IFERROR(Sheet2!$A$5,2)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('2');
            helper.edit('L16', '=IFERROR(Sheet2!$A$6,3)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('3567.45');
            done();
        });
        it('IFERROR formula with nested formulas->', (done: Function) => {
            helper.edit('M1', '=IFERROR(DATE(2003,3,12),3)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('37692');
            helper.edit('M2', '=IFERROR(DAY(fdgfd),2)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('2');
            helper.edit('M3', '=IFERROR(HOUR(343455546),2)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('2');
            helper.edit('M4', '=IFERROR(MINUTE("rdg"),2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('2');
            helper.edit('M5', '=IFERROR(45323,1)-WEEKDAY(43211,1)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('45316');
            done();
        });
        it('IFERROR formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=IFERROR();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=IFERROR();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=IFERROR(45321,2);');
            done();
        });
    });

    describe('Reported MONTH Formulae - Checking III ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: reportedBugData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Added cell Reference - 1->', (done: Function) => {
            helper.edit('H26', 'Yes');
            helper.edit('H27', 'No');
            helper.edit('H28', 'No');
            helper.edit('H29', 'No');
            helper.edit('D34', '300.00%');
            helper.edit('D35', '10.00%');
            helper.edit('D36', '1200.00%');
            helper.edit('D37', '900.00%');
            helper.edit('B34', 'TRUE');
            helper.edit('B35', 'FALSE');
            helper.edit('I35', '6/25/2023');
            helper.edit('I36', '7/27/2014');
            helper.edit('I33', '4/7/2021');
            helper.edit('I32', '7/8/2023');
            done();
        });
        it('MONTH formula with cell Reference - 1->', (done: Function) => {
            helper.edit('K2', '=MONTH(44341)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"5","formula":"=MONTH(44341)"}');
            done();
        });
        it('MONTH formula with cell Reference - 2->', (done: Function) => {
            helper.edit('K2', '=MONTH(46.654)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"2","formula":"=MONTH(46.654)"}');
            done();
        });
        it('MONTH formula with cell Reference - 3->', (done: Function) => {
            helper.edit('K2', '=MONTH(-2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#NUM!","formula":"=MONTH(-2)"}');
            done();
        });
        it('MONTH formula with cell Reference - 4->', (done: Function) => {
            helper.edit('K2', '=MONTH(-3.56)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#NUM!","formula":"=MONTH(-3.56)"}');
            done();
        });
        it('MONTH formula with cell Reference - 5->', (done: Function) => {
            helper.edit('K2', '=MONTH(TRUE)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(TRUE)"}');
            done();
        });
        it('MONTH formula with cell Reference - 6->', (done: Function) => {
            helper.edit('K2', '=MONTH(FALSE)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(FALSE)"}');
            done();
        });
        it('MONTH formula with cell Reference - 7->', (done: Function) => {
            helper.edit('K2', '=MONTH(4+3)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(4+3)"}');
            done();
        });
        it('MONTH formula with cell Reference - 8->', (done: Function) => {
            helper.edit('K2', '=MONTH(23*2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"2","formula":"=MONTH(23*2)"}');
            done();
        });
        it('MONTH formula with cell Reference - 9->', (done: Function) => {
            helper.edit('K2', '=MONTH(6/3)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(6/3)"}');
            done();
        });
        it('MONTH formula with cell Reference - 10->', (done: Function) => {
            helper.edit('K2', '=MONTH(0)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(0)"}');
            done();
        });
        it('MONTH formula with cell Reference - 11->', (done: Function) => {
            helper.edit('K2', '=MONTH(D14)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=MONTH(D14)"}');
            done();
        });
        it('MONTH formula with cell Reference - 12->', (done: Function) => {
            helper.edit('K2', '=MONTH(D13)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=MONTH(D13)"}');
            done();
        });
        it('MONTH formula with cell Reference - 13->', (done: Function) => {
            helper.edit('K2', '=MONTH(D15)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=MONTH(D15)"}');
            done();
        });
        // it('MONTH formula with cell Reference - 14->', (done: Function) => {
        //     helper.edit('K2', '=MONTH(I21)');
        //     expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=MONTH(I21)"}');
        //     done();
        // });
        it('MONTH formula with cell Reference - 15->', (done: Function) => {
            helper.edit('K2', '=MONTH(I23)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(I23)"}');
            done();
        });
        it('MONTH formula with cell Reference - 16->', (done: Function) => {
            helper.edit('K2', '=MONTH(B34)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(B34)"}');
            done();
        });
        it('MONTH formula with cell Reference - 17->', (done: Function) => {
            helper.edit('K2', '=MONTH(B35)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(B35)"}');
            done();
        });
        it('MONTH formula with cell Reference - 18->', (done: Function) => {
            helper.edit('K2', '=MONTH(F21)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(F21)"}');
            done();
        });
        it('MONTH formula with cell Reference - 19->', (done: Function) => {
            helper.edit('K2', '=MONTH(A20)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(A20)"}');
            done();
        });
        it('MONTH formula with cell Reference - 20->', (done: Function) => {
            helper.edit('K2', '=MONTH(F5)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"10","formula":"=MONTH(F5)"}');
            done();
        });
        it('MONTH formula with cell Reference - 21->', (done: Function) => {
            helper.edit('K2', '=MONTH(Hi)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#NAME?","formula":"=MONTH(Hi)"}');
            done();
        });
        it('MONTH formula with cell Reference - 22->', (done: Function) => {
            helper.edit('K2', '=MONTH(E16)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#DIV/0!","formula":"=MONTH(E16)"}');
            done();
        });
        it('MONTH formula with cell Reference - 23->', (done: Function) => {
            helper.edit('K2', '=MONTH(E17)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#NUM!","formula":"=MONTH(E17)"}');
            done();
        });
        it('MONTH formula with cell Reference - 24->', (done: Function) => {
            helper.edit('K2', '=MONTH(E18)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#REF!","formula":"=MONTH(E18)"}');
            done();
        });
        it('MONTH formula with cell Reference - 25->', (done: Function) => {
            helper.edit('K2', '=MONTH(19999999999)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#NUM!","formula":"=MONTH(19999999999)"}');
            done();
        });
        it('MONTH formula with cell Reference - 26->', (done: Function) => {
            helper.edit('K2', '=MONTH(MONTH(48765))');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MONTH(MONTH(48765))"}');
            done();
        });
        // Due to n input. Reported to spreadsheet team.
        // it('MONTH formula with cell Reference - 27->', (done: Function) => {
        //     helper.edit('K2', '=MONTH(DATEVALUE("04/23/2023"))');
        //     expect(helper.invoke('getCell', [1, 10]).textContent).toBe('4');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":4,"formula":"=MONTH(DATEVALUE("04/23/2023"))"}');
        //     done();
        // });
        // it('MONTH formula with cell Reference - 28->', (done: Function) => { // value will change all months
        //     helper.edit('K2', '=MONTH(NOW())');
        //     expect(helper.invoke('getCell', [1, 10]).textContent).toBe('5');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"5","formula":"=MONTH(NOW())"}');
        //     done();
        // });
        // it('MONTH formula with cell Reference - 29->', (done: Function) => {
        //     helper.edit('K2', '=EDATE(TODAY(),MONTH(NOW()))');
        //     expect(helper.invoke('getCell', [1, 10]).textContent).toBe('45444');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"45444","formula":"=EDATE(TODAY(),MONTH(NOW()))"}');
        //     done();
        // });
        it('MONTH formula with cell Reference - 30->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!I15)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"4","formula":"=MONTH(Sheet1!I15)"}');
            done();
        });
        it('MONTH formula with cell Reference - 31->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!I17)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"4","formula":"=MONTH(Sheet1!I17)"}');
            done();
        });
        it('MONTH formula with cell Reference - 32->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!E16)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#DIV/0!","formula":"=MONTH(Sheet1!E16)"}');
            done();
        });
        it('MONTH formula with cell Reference - 33->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!C20)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=MONTH(Sheet1!C20)"}');
            done();
        });
        it('MONTH formula with cell Reference - 34->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!I33)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"4","formula":"=MONTH(Sheet1!I33)"}');
            done();
        });
        it('MONTH formula with cell Reference - 35->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!I32)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"7","formula":"=MONTH(Sheet1!I32)"}');
            done();
        });
        it('MONTH formula with cell Reference - 36->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!I35)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"6","formula":"=MONTH(Sheet1!I35)"}');
            done();
        });
        it('MONTH formula with cell Reference - 37->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!I36)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"7","formula":"=MONTH(Sheet1!I36)"}');
            done();
        });
        it('MONTH formula with cell Reference - 38->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!F11)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"5","formula":"=MONTH(Sheet1!F11)"}');
            done();
        });
        it('MONTH formula with cell Reference - 39->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!B10)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"7","formula":"=MONTH(Sheet1!B10)"}');
            done();
        });
        it('MONTH formula with cell Reference - 40->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!H8)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('11');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"11","formula":"=MONTH(Sheet1!H8)"}');
            done();
        });
        it('MONTH formula with cell Reference - 41->', (done: Function) => {
            helper.edit('K2', '=MONTH(Sheet1!D7)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"2","formula":"=MONTH(Sheet1!D7)"}');
            done();
        });
        it('MONTH formula with cell Reference - 42->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Hello', refersTo: 'I35'});
            helper.edit('K2', '=MONTH(Hello)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"6","formula":"=MONTH(Hello)"}');
            done();
        });
        it('MONTH formula with cell Reference - 43->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'One', refersTo: 'I20'});
            helper.edit('K2', '=MONTH(One)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"3","formula":"=MONTH(One)"}');
            done();
        });
    });

    describe('EOMONTH Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },]
                }, {
                    rows: [
                        { cells: [{ value: '4/4/2020' }] }, { cells: [{ value: '45321' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '45673' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('EOMONTH Formula with direct values->', (done: Function) => {
            helper.edit('J1', '=EOMONTH(0,0)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('31');
            helper.edit('J2', '=EOMONTH(" 43432",5)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('43585');
            helper.edit('J3', '=EOMONTH("1/1/2020",1)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('43890');
            helper.edit('J4', '=EOMONTH("TRUE",12)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#VALUE!');
            helper.edit('J5', '=EOMONTH(1," 1")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('59');
            helper.edit('J6', '=EOMONTH("23",25)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('790');
            done();
        });
        it('EOMONTH Formula having floating number as arguments ->', (done: Function) => {
            helper.edit('J7', '=EOMONTH(145.322,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('244');
            helper.edit('J8', '=EOMONTH(45632,3.56)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('45747');
            helper.edit('J9', '=EOMONTH(43421.657,2.78)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('43496');
            done();
        });
        it('EOMONTH Formula having whole number as arguments->', (done: Function) => {
            helper.edit('J10', '=EOMONTH(236,2)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('305');
            helper.edit('J11', '=EOMONTH(42314,12)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('42704');
            done();
        });
        it('EOMONTH Formula with negative value as inputs->', (done: Function) => {
            helper.edit('J12', '=EOMONTH(-43263,0)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#NUM!');
            helper.edit('J13', '=EOMONTH(45631,-3)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('45565');
            helper.edit('J14', '=EOMONTH(-44671,-2)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#NUM!');
            helper.edit('J15', '=EOMONTH("31-Jan-2019",-2)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('43434');
            done();
        });
        it('EOMONTH Formula with zero as arguments->', (done: Function) => {
            helper.edit('J16', '=EOMONTH(0,0)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('31');
            helper.edit('J17', '=EOMONTH(3,0)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('31');
            helper.edit('J18', '=EOMONTH(0,4)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('152');
            done();
        });
        it('EOMONTH Formula with first argument as different format of date->', (done: Function) => {
            helper.edit('K1', '=EOMONTH("31-Jan-2019",1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('43524');
            helper.edit('K2', '=EOMONTH("1/4/2022",5)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('44742');
            helper.edit('K3', '=EOMONTH(1/31/2023,4)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('152');
            helper.edit('K4', '=EOMONTH("29-Feb-2020",12)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('44255');
            helper.edit('K5', '=EOMONTH("31/1/2019",1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#VALUE!');
            helper.edit('K6', '=EOMONTH("Jan-31-2019",1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('43524');
            done();
        });
        it('EOMONTH Formula with second argument as different types->', (done: Function) => {
            helper.edit('K7', '=EOMONTH("31-Jan-2019","one")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#VALUE!');
            helper.edit('K8', '=EOMONTH("31-Jan-2019",one)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#NAME?');
            helper.edit('K9', '=EOMONTH("31-Jan-2019","2")');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('43555');
            helper.edit('K10', '=EOMONTH(46535,3)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('46630');
            helper.edit('K11', '=EOMONTH("29-Feb-2020",-12)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('43524');
            helper.edit('K12', '=EOMONTH("27-Feb-2019",-0.12)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('43524');
            done();
        });
        it('EOMONTH Formula with logical values as arguments->', (done: Function) => {
            helper.edit('K13', '=EOMONTH(True,2)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('#VALUE!');
            helper.edit('K14', '=EOMONTH(False,2)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#VALUE!');
            helper.edit('K15', '=EOMONTH(43543,True)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#VALUE!');
            helper.edit('K16', '=EOMONTH(43543,False)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#VALUE!');
            helper.edit('K17', '=EOMONTH(TRUE,TRUE)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('#VALUE!');
            helper.edit('K18', '=EOMONTH(FALSE,FALSE)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('#VALUE!');
            helper.edit('K19', '=EOMONTH(43543,"TRUE")');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('#VALUE!');
            helper.edit('K20', '=EOMONTH(43543,"FALSE")');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('#VALUE!');
            helper.edit('K21', '=EOMONTH(43543,I2)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('#VALUE!');
            helper.edit('K22', '=EOMONTH("31-Mar-2012",I4)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('#VALUE!');
            helper.edit('K23', '=EOMONTH(I3,I4)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('EOMONTH Formula with empty arguments->', (done: Function) => {
            helper.edit('L1', '=EOMONTH(,)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('#N/A');
            helper.edit('L2', '=EOMONTH(,3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('#N/A');
            helper.edit('L3', '=EOMONTH(43535,)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#N/A');
            helper.edit('L4', '=EOMONTH(43213,"")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#VALUE!');
            helper.edit('L5', '=EOMONTH("",3)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            helper.edit('L6', '=EOMONTH(A20,3)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('121');
            helper.edit('L7', '=EOMONTH(43564,A22)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('43585');
            helper.edit('L8', '=EOMONTH(A20,A22)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('31');
            done();
        });
        it('EOMONTH Formula with expression as arguments->', (done: Function) => {
            helper.edit('L9', '=EOMONTH(45682+20,1)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('45747');
            helper.edit('L10', '=EOMONTH(45209,2*3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('45412');
            helper.edit('L11', '=EOMONTH(45732-4,4/2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('45808');
            helper.edit('L12', '=EOMONTH(B7+1,H2-1)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('42124');
            helper.edit('L13', '=EOMONTH(B7+1,H2+H3)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('43677');
            done();
        });
        it('EOMONTH Formula with invalid arguments->', (done: Function) => {
            helper.edit('L14', '=EOMONTH(43212," ")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#VALUE!');
            helper.edit('L15', '=EOMONTH(43542,one)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#NAME?');
            helper.edit('L16', '=EOMONTH("31.01.2019",2)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#VALUE!');
            helper.edit('L17', '=EOMONTH(-3,1)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('#NUM!');
            helper.edit('L18', '=EOMONTH("22-Feb-2012",)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('#N/A');
            done();
        });
        it('EOMONTH Formula with cell reference as arguments->', (done: Function) => {
            helper.edit('M1', '31-Jan-2019');
            helper.edit('M2', '=EOMONTH(M1,1)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('43524');
            helper.edit('M3', '"31-Jan-2020"');
            helper.edit('M4', '=EOMONTH(M3,2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#VALUE!');
            helper.edit('M5', '"Jan-31-2019"');
            helper.edit('M6', '=EOMONTH(M5,3)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            helper.edit('M7', '3');
            helper.edit('M8', '=EOMONTH("31-Jan-2020",M7)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('43951');
            done();
        });
        it('EOMONTH Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M9', '=EOMONTH($B$8,$G$8)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('41790');
            helper.edit('M10', '=EOMONTH($C$6,$B$8)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('1268458');
            helper.edit('M11', '=EOMONTH($D$5,$E$4)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('486');
            helper.edit('M12', '=EOMONTH($E$3,$F$5)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('9163');
            helper.edit('M13', '=EOMONTH($F$6,$B$8)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('1268732');
            helper.edit('M14', '=EOMONTH($A$5,$E$4)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('EOMONTH Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=EOMONTH(Sheet2!A3,Sheet1!G2)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('#VALUE!');
            helper.edit('N2', '=EOMONTH(Sheet1!E3,Sheet2!A3)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('#VALUE!');
            helper.edit('N3', '=EOMONTH(Sheet2!A6,Sheet2!A4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('1393735');
            helper.edit('N4', '=EOMONTH(Sheet1!D6,Sheet1!I10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('31');
            done();
        });
        it('EOMONTH Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=EOMONTH(Sheet2!$A$3,Sheet1!$G$2)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#VALUE!');
            helper.edit('N6', '=EOMONTH(Sheet1!$E$3,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('#VALUE!');
            helper.edit('N7', '=EOMONTH(Sheet2!$A$4,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('45777');
            helper.edit('N8', '=EOMONTH(Sheet1!$D$6,Sheet1!$I$10)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('31');
            helper.edit('N9', '=EOMONTH(Sheet2!$A$4,$G$2)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('45716');
            helper.edit('N10', '=EOMONTH(E3,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('121');
            done();
        });
        it('EOMONTH Formula for no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N11');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=EOMONTH()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=EOMONTH()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N11', '=EOMONTH(4321,1)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('4352');
            done();
        });
    });

    describe('MINUTE Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '4/4/2020 5:45 AM' }] }, { cells: [{ value: '45321.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '4:08 PM' }] }, { cells: [{ value: '-5.4' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('MINUTE formula->', (done: Function) => {
            helper.edit('I1', '=MINUTE(C4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":32,"formula":"=MINUTE(C4)"}');
            done();
        });
        it('MINUTE formula with 2 Inputs->', (done: Function) => {
            helper.edit('I2', '=MINUTE(C4:C5)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":32,"formula":"=MINUTE(C4:C5)"}');
            done();
        });
        it('MINUTE formula with Date and Time Value->', (done: Function) => {
            helper.edit('I5', '=MINUTE("7/1/2022 7:23:34 AM")');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].formula).toBe('=MINUTE("7/1/2022 7:23:34 AM")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('23');
            done();
        });
        it('MINUTE formula with input having minute value as 90->', (done: Function) => {
            helper.edit('C4', '3:90:44 AM');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":30,"formula":"=MINUTE(C4)"}');
            done();
        });
        it('MINUTE formula with cell having no value->', (done: Function) => {
            helper.edit('I6', '=MINUTE(P10)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":0,"formula":"=MINUTE(P10)"}');
            done();
        });
        it('MINUTE formula with cell having alphabets->', (done: Function) => {
            helper.edit('I7', '=MINUTE(A1)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#VALUE!","formula":"=MINUTE(A1)"}');
            done();
        });
        it('MINUTE formula with Time Formula->', (done: Function) => {
            helper.edit('I8', '=TIME(7,MINUTE(C5),0)');
            expect(helper.getInstance().sheets[0].rows[7].cells[8].formula).toBe('=TIME(7,MINUTE(C5),0)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('7:23 AM');
            done();
        });
        it('MINUTE formula without ""->', (done: Function) => {
            helper.edit('I9', '=MINUTE(7/1/2022 7:23:34 AM)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":"#VALUE!","formula":"=MINUTE(7/1/2022 7:23:34 AM)"}');
            done();
        });
        it('MINUTE formula with 12 hours Time value as input->', (done: Function) => {
            helper.edit('I10', '=MINUTE("3:32:44 AM");');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('32');
            done();
        });
        it('MINUTE formula with 24 hours Time value as input->', (done: Function) => {
            helper.edit('I11', '=MINUTE("15:54:44");');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('54');
            done();
        });
        it('MINUTE formula without Seconds HH:MM AM/PM format Time value as input->', (done: Function) => {
            helper.edit('I12', '=MINUTE("09:12 AM");');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('12');
            done();
        });
        it('MINUTE formula without Seconds HH:MM format Time value as input->', (done: Function) => {
            helper.edit('I13', '=MINUTE("09:12");');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('12');
            done();
        });
        it('MINUTE formula with date as input->', (done: Function) => {
            helper.edit('I14', '=MINUTE("01/12/2023");');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('0');
            done();
        });
        it('MINUTE formula with nested TODAY formula as input->', (done: Function) => {
            helper.edit('I15', '=MINUTE(TODAY());');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('0');
            done();
        });
        it('MINUTE formula without Minutes and Seconds HH AM/PM format Time value as input->', (done: Function) => {
            helper.edit('I16', '=MINUTE("8 AM");');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('0');
            done();
        });
        it('MINUTE formula with logical value as input->', (done: Function) => {
            helper.edit('J1', 'TRUE');
            helper.edit('J2', 'FALSE');
            helper.edit('J3', '=MINUTE(J1)')
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=MINUTE(J2)')
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            helper.edit('J5', '=MINUTE(TRUE)')
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            helper.edit('J6', '=MINUTE(FALSE)')
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=MINUTE("TRUE")')
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            helper.edit('J8', '=MINUTE("FALSE")')
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('MINUTE formula with expression value as input->', (done: Function) => {
            helper.edit('K1', '=MINUTE(2+0.5)')
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            helper.edit('K2', '=MINUTE(5-3.62)')
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('7');
            helper.edit('K3', '=MINUTE(1/12)')
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0');
            helper.edit('K4', '=MINUTE(0.38*4)')
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('28');
            helper.edit('K5', '=MINUTE(0-0.5)')
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#NUM!');
            done();
        });
        it('MINUTE formula with nested formulas->', (done: Function) => {
            helper.edit('M1', '=MINUTE(MINUTE(466.4547))')
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('0');
            helper.edit('M2', '=MINUTE(SECOND(5545.46))')
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('0');
            helper.edit('M3', '=TIME(HOUR(0.34),MINUTE(45.567),32)')
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('8:36 AM');
            helper.edit('M4', '=MINUTE(WEEKDAY(45323,2)+0.56)')
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('26');
            helper.edit('M5', '=MINUTE(DATE(2020,3,18))')
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('0');
            helper.edit('M6', '=MINUTE(DAY(45324))')
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('0');
            done();
        });
        it('MINUTE formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M7', '=MINUTE($B$8)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('0');
            helper.edit('M8', '=MINUTE($C$7)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('55');
            helper.edit('M9', '=MINUTE($D$5)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('0');
            helper.edit('M10', '=MINUTE($E$3)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('0');
            helper.edit('M11', '=MINUTE($F$6)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('0');
            helper.edit('M12', '=MINUTE($A$5)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('MINUTE formula with Sheet references as arguments->', (done: Function) => {
            helper.edit('N1', '=MINUTE(Sheet2!A1)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('45');
            helper.edit('N2', '=MINUTE(Sheet1!E3)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('0');
            helper.edit('N3', '=MINUTE(Sheet2!A4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('8');
            helper.edit('N4', '=MINUTE(Sheet1!C10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('32');
            done();
        });
        it('MINUTE formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=MINUTE(Sheet2!$A$3)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#VALUE!');
            helper.edit('N6', '=MINUTE(Sheet1!$E$3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('0');
            helper.edit('N7', '=MINUTE(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('32');
            helper.edit('N8', '=MINUTE(Sheet1!$C$5)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('23');
            helper.edit('N9', '=MINUTE(Sheet2!$A$5)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('#NUM!');
            helper.edit('N10', '=MINUTE(Sheet2!$A$6)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('47');
            done();
        });
        it('MINUTE formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MINUTE();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MINUTE();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O2', '=MINUTE("0.45");');
            done();
        });
        it('MINUTE formula with more than 1 input for error checking->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MINUTE(C3,C4);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MINUTE(C3,C4);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O3', '=MINUTE("4/4/2022 3:32:44 AM");');
            done();
        });
    });

    describe('Reported RandBetween Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('RandBetween formula with normal value - 1->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN( , )');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#N/A');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#N/A","formula":"=RANDBETWEEN( , )"}');
            done();
        });
        it('RandBetween formula with normal value - 2->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN("1+2", 10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=RANDBETWEEN(\\"1+2\\", 10)"}');
            done();
        });
        it('RandBetween formula with normal value - 3->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN("100%", 1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=RANDBETWEEN(\\"100%\\", 1)"}');
            done();
        });
        it('RandBetween formula with normal value - 4->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN(0, 0)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=RANDBETWEEN(0, 0)"}');
            done();
        });
        it('RandBetween formula with normal value - 5->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN(10, 0)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=RANDBETWEEN(10, 0)"}');
            done();
        });
        it('RandBetween formula with normal value - 5->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN(0, FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=RANDBETWEEN(0, FALSE)"}');
            done();
        });
        it('RandBetween formula with normal value - 6->', (done: Function) => {
            helper.edit('I1', '=RANDBETWEEN(0, "#VALUE!")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=RANDBETWEEN(0, \\"#VALUE!\\")"}');
            done();
        });
        it('RandBetween formula with cell reference - 1->', (done: Function) => {
            helper.edit('J7', '=RANDBETWEEN(N1,N2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"0","formula":"=RANDBETWEEN(N1,N2)"}');
            done();
        });
        it('RandBetween formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=RANDBETWEEN(A1:A9,10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=RANDBETWEEN(A1:A9,10)"}');
            done();
        });
    });
    
    describe('SECOND Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '4/4/2020 5:45:54 AM' }] }, { cells: [{ value: '45321.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '4:08:23 PM' }] }, { cells: [{ value: '-5.4' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SECOND formula->', (done: Function) => {
            helper.edit('I1', '=SECOND(C4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('44');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":44,"formula":"=SECOND(C4)"}');
            done();
        });
        it('SECOND formula with 2 Inputs->', (done: Function) => {
            helper.edit('I2', '=SECOND(C4:C5)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('44');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":44,"formula":"=SECOND(C4:C5)"}');
            done();
        });
        it('SECOND formula with cell having no value->', (done: Function) => {
            helper.edit('I3', '=SECOND(P10)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":0,"formula":"=SECOND(P10)"}');
            done();
        });
        it('SECOND formula with cell having alphabets->', (done: Function) => {
            helper.edit('I4', '=SECOND(A1)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#VALUE!","formula":"=SECOND(A1)"}');
            done();
        });
        it('SECOND formula with Time Formula->', (done: Function) => {
            helper.edit('I5', '=TIME(9,30,45)');
            helper.edit('I6', '=SECOND(I5)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('45');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":45,"formula":"=SECOND(I5)"}');
            done();
        });
        it('SECOND formula with input having both Date and Time value->', (done: Function) => {
            helper.edit('I7', '=SECOND("7/1/2022 7:23:34 AM")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('34');
            done(); 
        });
        it('SECOND formula with Date as input->', (done: Function) => {
            helper.edit('I8', '=SECOND("01/12/2023")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('0');
            done(); 
        });
        it('SECOND formula with nested TODAY Formula as input->', (done: Function) => {
            helper.edit('I9', '=SECOND(TODAY())');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('0');
            done(); 
        });
        it('SECOND formula with 12 hours Time value as input->', (done: Function) => {
            helper.edit('I10', '=SECOND("3:32:44 AM");');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('44');
            done();
        });
        it('SECOND formula with 24 hours Time value as input->', (done: Function) => {
            helper.edit('I11', '=SECOND("15:54:54");');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('54');
            done();
        });
        it('SECOND formula without Seconds HH:MM AM/PM format Time value as input->', (done: Function) => {
            helper.edit('I12', '=SECOND("09:12 AM");');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('0');
            done();
        });
        it('SECOND formula without Seconds HH:MM format Time value as input->', (done: Function) => {
            helper.edit('I13', '=SECOND("09:12");');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('0');
            done();
        });
        it('SECOND formula without Minutes and Seconds h AM/PM format Time value as input->', (done: Function) => {
            helper.edit('I14', '=SECOND("8 PM");');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('0');
            done();
        });
        it('SECOND formula with logical value as input->', (done: Function) => {
            helper.edit('J1', 'TRUE');
            helper.edit('J2', 'FALSE');
            helper.edit('J3', '=SECOND(J1)')
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=SECOND(J2)')
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            helper.edit('J5', '=SECOND(TRUE)')
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            helper.edit('J6', '=SECOND(FALSE)')
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=SECOND("TRUE")')
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            helper.edit('J8', '=SECOND("FALSE")')
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('SECOND formula with expression value as input->', (done: Function) => {
            helper.edit('K1', '=SECOND(2+0.5)')
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            helper.edit('K2', '=SECOND(5-3.62)')
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('12');
            helper.edit('K3', '=SECOND(1/12)')
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0');
            helper.edit('K4', '=SECOND(0.38*4)')
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('48');
            helper.edit('K5', '=SECOND(0-0.5)')
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#NUM!');
            done();
        });
        it('SECOND formula with nested formulas->', (done: Function) => {
            helper.edit('M1', '=SECOND(SECOND(466.4547))')
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('0');
            helper.edit('M2', '=SECOND(SECOND(5545.46))')
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('0');
            helper.edit('M3', '=TIME(SECOND(0.34),SECOND(45.567),32)')
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('12:28 PM');
            helper.edit('M4', '=SECOND(WEEKDAY(45323,2)+0.56)')
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('24');
            helper.edit('M5', '=SECOND(DATE(2020,3,18))')
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('0');
            helper.edit('M6', '=SECOND(DAY(45324))')
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('0');
            helper.edit('M7', '=SECOND(TIME(12,34,54))');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('54');
            helper.edit('M8', '=IF(SECOND(TIME(3,45,54))=54,SECOND(34.567),3)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('28');
            done();
        });
        it('SECOND formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M9', '=SECOND($D$5)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('0');
            helper.edit('M10', '=SECOND($E$3)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('0');
            helper.edit('M11', '=SECOND($F$6)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('0');
            helper.edit('M12', '=SECOND($A$5)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#VALUE!');
            helper.edit('M13', '=SECOND($B$8)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('0');
            helper.edit('M14', '=SECOND($C$7)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('53');
            done();
        });
        it('SECOND formula with Sheet references as arguments->', (done: Function) => {
            helper.edit('N1', '=SECOND(Sheet2!A1)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('54');
            helper.edit('N2', '=SECOND(Sheet1!E3)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('0');
            helper.edit('N3', '=SECOND(Sheet2!A4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('23');
            helper.edit('N4', '=SECOND(Sheet1!C10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('14');
            done();
        });
        it('SECOND formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=SECOND(Sheet2!$A$3)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#VALUE!');
            helper.edit('N6', '=SECOND(Sheet1!$E$3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('0');
            helper.edit('N7', '=SECOND(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('9');
            helper.edit('N8', '=SECOND(Sheet1!$C$5)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('54');
            helper.edit('N9', '=SECOND(Sheet2!$A$5)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('#NUM!');
            helper.edit('N10', '=SECOND(Sheet2!$A$6)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('59');
            done();
        });
        it('SECOND formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SECOND();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SECOND();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O2', '=SECOND("0.45");');
            done();
        });
        it('SECOND formula with more than 1 input for error checking->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SECOND(C3,C4);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SECOND(C3,C4);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O3', '=SECOND("4/4/2022 3:32:44 AM");');
            done();
        });
    });

    describe('Reported CHOOSE Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CHOOSE formula with specific cases - 1->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(2, "true", "false")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"false","formula":"=CHOOSE(2, \\"true\\", \\"false\\")"}');
            done();
        });
        it('CHOOSE formula with specific cases - 2->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(TRUE, 1,2,)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"1","formula":"=CHOOSE(TRUE, 1,2,)"}');
            done();
        });
        it('CHOOSE formula with specific cases - 3->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(300%, TRUE, FALSE, TRUE,)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"TRUE","formula":"=CHOOSE(300%, TRUE, FALSE, TRUE,)"}');
            done();
        });
        it('CHOOSE formula with specific cases - 5->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(1, "#DIV/0!")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#DIV/0!","formula":"=CHOOSE(1, \\"#DIV/0!\\")"}');
            done();
        });
        it('CHOOSE formula with normal value - 1->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(TRUE, 1,2,3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"1","formula":"=CHOOSE(TRUE, 1,2,3)"}');
            done();
        });
        it('CHOOSE formula with normal value - 2->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(TRUE, TRUE, "true", FALSE)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"TRUE","formula":"=CHOOSE(TRUE, TRUE, \\"true\\", FALSE)"}');
            done();
        });
        it('CHOOSE formula with normal value - 3->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(TRUE, 1+TRUE,FALSE)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"2","formula":"=CHOOSE(TRUE, 1+TRUE,FALSE)"}');
            done();
        });
        it('CHOOSE formula with normal value - 4->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(200%,1,100%,"jag")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"1","formula":"=CHOOSE(200%,1,100%,\\"jag\\")"}');
            done();
        });
        it('CHOOSE formula with normal value - 5->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(3,"1",100%,"A""pp""le")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('A"pp"le');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"A\\"pp\\"le","formula":"=CHOOSE(3,\\"1\\",100%,\\"A\\"\\"pp\\"\\"le\\")"}');
            done();
        });
        it('CHOOSE formula with normal value - 6->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(1,"2*10")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('2*10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"2*10","formula":"=CHOOSE(1,\\"2*10\\")"}');
            done();
        });
        it('CHOOSE formula with cell reference - 1->', (done: Function) => {
            helper.edit('J1', '3+"4"');
            helper.edit('J2', 'TRUE');
            helper.edit('J3', '2');
            helper.edit('J4', '" "');
            helper.edit('J5', '""      ""');
            helper.edit('J6', '1');
            helper.edit('J8', '         "1"');

            helper.edit('J7', '=CHOOSE(1, J1, 2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('3+"4"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"3+\\"4\\"","formula":"=CHOOSE(1, J1, 2)"}');
            done();
        });
        it('CHOOSE formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=CHOOSE(J2, 1,2,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"1","formula":"=CHOOSE(J2, 1,2,3)"}');
            done();
        });
        it('CHOOSE formula with cell reference - 3->', (done: Function) => {
            helper.edit('J7', '=CHOOSE(J2, TRUE, "true", FALSE)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"TRUE","formula":"=CHOOSE(J2, TRUE, \\"true\\", FALSE)"}');
            done();
        });
        it('CHOOSE formula with cell reference - 4->', (done: Function) => {
            helper.edit('J7', '=CHOOSE(J2, 1+J2,FALSE)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"2","formula":"=CHOOSE(J2, 1+J2,FALSE)"}');
            done();
        });
        it('CHOOSE formula with cell reference - 5->', (done: Function) => {
            helper.edit('J7', '=CHOOSE(J3, J4, J5, "",,,, )');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('""      ""');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"\\"\\"      \\"\\"","formula":"=CHOOSE(J3, J4, J5, \\"\\",,,, )"}');
            done();
        });
        it('CHOOSE formula with cell reference - 6->', (done: Function) => {
            helper.edit('J7', '=CHOOSE(J6, J8, " ",,      )');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('         "1"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"         \\"1\\"","formula":"=CHOOSE(J6, J8, \\" \\",,      )"}');
            done();
        });
        it('CHOOSE formula with cell reference - 7->', (done: Function) => {
            helper.edit('J1', '1');
            helper.edit('J2', '"6+2.83"');
            helper.edit('J7', '=CHOOSE(J1, J2, 2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('"6+2.83"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"\\"6+2.83\\"","formula":"=CHOOSE(J1, J2, 2)"}');
            done();
        });
    });

    describe('Formula - Checking IV ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('EXACT formula with cell Reference - I->', (done: Function) => {
            helper.edit('I1', 'Word');
            helper.edit('J1', 'word');
            helper.edit('I2', '=EXACT(I1,J1)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":false,"formula":"=EXACT(I1,J1)"}');
            done();
        });
        it('EXACT formula cell Reference - II->', (done: Function) => {
            helper.edit('I1', 'word');
            helper.edit('I3', '=EXACT(I1,J1)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":true,"formula":"=EXACT(I1,J1)"}');
            done();
        });
        it('EXACT formula cell Reference - III->', (done: Function) => {
            helper.edit('I1', 'Word');
            helper.edit('J1', 'Word');
            helper.edit('I4', '=EXACT(I1,J1)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":true,"formula":"=EXACT(I1,J1)"}');
            done();
        });
        it('EXACT formula with space contained Text->', (done: Function) => {
            helper.edit('I1', 'W ord');
            helper.edit('I5', '=EXACT(I1,J1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":false,"formula":"=EXACT(I1,J1)"}');
            done();
        });
        it('EXACT formula with direct inputs->', (done: Function) => {
            helper.edit('I6', '=EXACT(word, word)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(word, word)"}');
            done();
        });
        it('EXACT formula with more than 2 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=EXACT(word,word,word)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=EXACT(word,word,word)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I7', '=EXACT(word,word)');
            done();
        });
        it('EXACT formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I8');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=EXACT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=EXACT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I8', '=EXACT(word,word)');
            done();
        });
        it('EXACT formula with alphabets and numbers->', (done: Function) => {
            helper.edit('I9', '=EXACT(word, 123)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(word, 123)"}');
            done();
        });
        it('EXACT formula for numbers->', (done: Function) => {
            helper.edit('I10', '=EXACT(123, 123)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":true,"formula":"=EXACT(123, 123)"}');
            done();
        });
        it('EXACT formula with ""->', (done: Function) => {
            helper.edit('I11', '=EXACT("apple","apple")');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].formula).toBe('=EXACT("apple","apple")');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('TRUE');
            done();
        });
        it('EXACT formula with "" for one text->', (done: Function) => {
            helper.edit('I12', '=EXACT("apple",apple)');
            expect(helper.getInstance().sheets[0].rows[11].cells[8].formula).toBe('=EXACT("apple",apple)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#NAME?');
            done();
        });
        it('EXACT formula with alphabets and number combined Text->', (done: Function) => {
            helper.edit('I13', '=EXACT(word123,word123)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(word123,word123)"}');
            done();
        });
        it('LEN Formula with cell Reference->', (done: Function) => {
            helper.edit('J2', '=LEN(A2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('12');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":12,"formula":"=LEN(A2)"}');
            done();
        });
        it('LEN Formula with Date Value->', (done: Function) => {
            helper.edit('J3', '=LEN(B6)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":5,"formula":"=LEN(B6)"}');
            done();
        });
        it('LEN Formula with cell having no Value->', (done: Function) => {
            helper.edit('J4', '=LEN(P10)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":0,"formula":"=LEN(P10)"}');
            done();
        });
        it('LEN Formula with text having spaces and comma->', (done: Function) => {
            helper.edit('A2', '   Casual Shoes ,   ');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('14');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":14,"formula":"=LEN(A2)"}');
            done();
        });
        it('LEN Formula with cell having Number Value->', (done: Function) => {
            helper.edit('J5', '=LEN(D5)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":2,"formula":"=LEN(D5)"}');
            done();
        });
        it('LEN Formula with cell having Formatted Number Value->', (done: Function) => {
            helper.invoke('selectRange', ['D5']);
            helper.getElement('#'+helper.id+'_number_format').click();
            helper.getElement('#'+helper.id+'_Accounting').click();
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":2,"formula":"=LEN(D5)"}');
            done();
        });
        it('LEN Formula with more than 1 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LEN(A5,A6)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LEN(A5,A6)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J6', '=LEN(A5)');
            done();
        });
        it('LEN Formula with more than 1 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LEN(A5,A6)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LEN(A5,A6)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J6', '=LEN(A5)');
            done();
        });
        it('LEN Formula without ""->', (done: Function) => {
            helper.edit('J7', '=LEN(ed)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NAME?","formula":"=LEN(ed)"}');
            done();
        });
        it('LEN Formula with no inputs->', (done: Function) => {
            helper.edit('J8', '=LEN()');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{}');
            done();
        });
        it('MOD Formula->', (done: Function) => {
            helper.edit('K1', '=MOD(10,20)');
            // expect(helper.invoke('getCell', [0, 10]).textContent).toBe('10');
            // expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":10,"formula":"=MOD(10,20)"}');
            done();
        });
        it('MOD Formula with Number contains negative sign->', (done: Function) => {
            helper.edit('K2', '=MOD(-3,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":1,"formula":"=MOD(-3,2)"}');
            done();
        });
        it('MOD Formula with divisor contains negative sign->', (done: Function) => {
            helper.edit('K3', '=MOD(3,-2)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":-1,"formula":"=MOD(3,-2)"}');
            done();
        });
        it('MOD Formula with both number and divisor contains negative sign->', (done: Function) => {
            helper.edit('K4', '=MOD(-3,-2)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":-1,"formula":"=MOD(-3,-2)"}');
            done();
        });
        it('MOD Formula with Deciaml values->', (done: Function) => {
            helper.edit('K5', '=MOD(0.75,0.1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('0.05');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":0.04999999999999996,"formula":"=MOD(0.75,0.1)"}');
            done();
        });
        it('MOD Formula with cell Reference->', (done: Function) => {
            helper.edit('K6', '=MOD(E2,F2)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":20,"formula":"=MOD(E2,F2)"}');
            done();
        });
        it('MOD Formula with cell Reference and Number->', (done: Function) => {
            helper.edit('K7', '=MOD(E2,6)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":2,"formula":"=MOD(E2,6)"}');
            done();
        });
        it('MOD Formula with Date values->', (done: Function) => {
            helper.edit('K8', '=MOD(B2,F2)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('3/24/1900');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[10])).toBe('{"value":84,"format":"m/d/yyyy","formula":"=MOD(B2,F2)","formattedText":"3/24/1900"}');
            done();
        });
        it('MOD Formula with Time values->', (done: Function) => {
            helper.edit('K9', '=MOD(C2,F2)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('11:34:32 AM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[10])).toBe('{"value":0.48231481481482774,"format":"h:mm:ss AM/PM","formula":"=MOD(C2,F2)","formattedText":"11:34:32 AM"}');
            done();
        });
        it('MOD Formula with Divisor as 0->', (done: Function) => {
            helper.edit('K10', '=MOD(20,0)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[10])).toBe('{"value":"#DIV/0!","formula":"=MOD(20,0)"}');
            done();
        });
        it('MOD Formula with number as 0->', (done: Function) => {
            helper.edit('K11', '=MOD(0,20)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[10])).toBe('{"value":0,"formula":"=MOD(0,20)"}');
            done();
        });
        it('MOD Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K12');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MOD()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MOD()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K12', '=MOD(10,2)');
            done();
        });
        it('MOD Formula with more than 2 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K13');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MOD(2,3,4)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MOD(2,3,4)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K13', '=MOD(2,3)');
            done();
        });
        it('MOD Formula with alphabets as inputs->', (done: Function) => {
            helper.edit('K14', '=MOD(A2,A3)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[10])).toBe('{"value":"#VALUE!","formula":"=MOD(A2,A3)"}');
            done();
        });
        it('MOD Formula with invalid inputs->', (done: Function) => {
            helper.edit('K15', '=MOD(ed,ed)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[10])).toBe('{"value":"#NAME?","formula":"=MOD(ed,ed)"}');
            done();
        });
        it('MOD Formula with empty cell references->', (done: Function) => {
            helper.edit('K16', '=MOD(M2,2)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('0');
            helper.edit('K17', '=MOD(M2,M3)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K18', '=MOD(2,M2)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('#DIV/0!');
            done();
        });
    });

    describe('Reported TRUNC Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('TRUNC formula with direct value - 1->', (done: Function) => {
            helper.edit('I1', '=TRUNC("Hi")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"Hi\\")"}');
            done();
        });
        it('TRUNC formula with direct value - 2->', (done: Function) => {
            helper.edit('I2', '=TRUNC("",2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"\\",2)"}');
            done();
        });
        it('TRUNC formula with direct value - 3->', (done: Function) => {
            helper.edit('I3', '=TRUNC("TRUE",2)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"TRUE\\",2)"}');
            done();
        });
        it('TRUNC formula with direct value - 4->', (done: Function) => {
            helper.edit('I4', '=TRUNC("")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"\\")"}');
            done();
        });
        it('TRUNC formula with direct value - 5->', (done: Function) => {
            helper.edit('I5', '=TRUNC(" ")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\" \\")"}');
            done();
        });
        it('TRUNC formula with direct value - 6->', (done: Function) => {
            helper.edit('I6', '=TRUNC("        ",2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"        \\",2)"}');
            done();
        });
        it('TRUNC formula with direct value - 7->', (done: Function) => {
            helper.edit('I6', '=TRUNC("07-JUN", 2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('37049');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"37049","formula":"=TRUNC(\\"07-JUN\\", 2)"}');
            done();
        });
        it('TRUNC formula with direct value - 8->', (done: Function) => {
            helper.edit('I6', '=TRUNC("1+2", 2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"1+2\\", 2)"}');
            done();
        });
        it('TRUNC formula with cell reference - 1->', (done: Function) => {
            helper.edit('J1', '"65.678"');
            helper.edit('J2', '"112"');
            helper.edit('J3', '"0"');
            helper.edit('J4', '""');
            helper.edit('J5', '"TRUE"');
            helper.edit('J6', '"-5"');
            helper.edit('J7', '=TRUNC(J1,2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J1,2)"}');
            done();
        });
        it('TRUNC formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J2,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J2,3)"}');
            done();
        });
        it('TRUNC formula with cell reference - 3->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J3)"}');
            done();
        });
        it('TRUNC formula with cell reference - 4->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J4)"}');
            done();
        });
        it('TRUNC formula with cell reference - 5->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J5)"}');
            done();
        });
        it('TRUNC formula with cell reference - 6->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J6,1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J6,1)"}');
            done();
        });
        it('TRUNC formula with cell reference - 7->', (done: Function) => {
            helper.edit('J1', '""');
            helper.edit('J2', '"0"');
            helper.edit('J3', '" "');
            helper.edit('J4', '"     "');
            helper.edit('J7', '=TRUNC(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J1)"}');
            done();
        });
        it('TRUNC formula with cell reference - 8->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J2,2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J2,2)"}');
            done();
        });
        it('TRUNC formula with cell reference - 9->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J3)"}');
            done();
        });
        it('TRUNC formula with cell reference - 10->', (done: Function) => {
            helper.edit('J7', '=TRUNC(J4,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J4,3)"}');
            done();
        });
        it('TRUNC formula with sheet reference - 1->', (done: Function) => {
            helper.edit('J1', '"65.678"');
            helper.edit('J2', '70.356829');
            helper.edit('J3', '"TRUE"');
            helper.edit('J4', '"33"');
            helper.edit('J7', '=TRUNC(Sheet1!J1,1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(Sheet1!J1,1)"}');
            done();
        });
        it('TRUNC formula with sheet reference - 2->', (done: Function) => {
            helper.edit('J7', '=TRUNC(Sheet1!J2,J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(Sheet1!J2,J3)"}');
            done();
        });
        it('TRUNC formula with sheet reference - 3->', (done: Function) => {
            helper.edit('J7', '=TRUNC(Sheet1!J2,"-3")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"0","formula":"=TRUNC(Sheet1!J2,\\"-3\\")"}');
            done();
        });
        it('TRUNC formula with sheet reference - 4->', (done: Function) => {
            helper.edit('J7', '=TRUNC($J$4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC($J$4)"}');
            done();
        });
        it('TRUNC formula with sheet reference - 5->', (done: Function) => {
            helper.edit('J1', '3/4/2023');
            helper.edit('J7', '=TRUNC(Sheet1!J1,"-3")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('44000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"44000","formula":"=TRUNC(Sheet1!J1,\\"-3\\")"}');
            done();
        });
        it('TRUNC formula with different datatype - 1->', (done: Function) => {
            helper.edit('J7', '=TRUNC(6.078%,4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.0607');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"0.0607","formula":"=TRUNC(6.078%,4)"}');
            done();
        });
        it('TRUNC formula with different datatype - 2->', (done: Function) => {
            helper.edit('J7', '=TRUNC("13:34",2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.56');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"0.56","formula":"=TRUNC(\\"13:34\\",2)"}');
            done();
        });
        it('TRUNC formula with different datatype - 3->', (done: Function) => {
            helper.edit('J1', '"-3.45"');
            helper.edit('J7', '=TRUNC(J1,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(J1,3)"}');
            done();
        });
        it('TRUNC formula with different datatype - 4->', (done: Function) => {
            helper.edit('J7', '=TRUNC("Flip",3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"Flip\\",3)"}');
            done();
        });
        it('TRUNC formula with different datatype - 5->', (done: Function) => {
            helper.edit('J7', '=TRUNC(44.2347891, {2.79})');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('44.23');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"44.23","formula":"=TRUNC(44.2347891, {2.79})"}');
            done();
        });
        it('TRUNC formula with different datatype - 6->', (done: Function) => {
            helper.edit('J7', '=TRUNC(44.2347891, {"3"})');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('44.234');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"44.234","formula":"=TRUNC(44.2347891, {\\"3\\"})"}');
            done();
        });
        it('TRUNC formula with different datatype - 7->', (done: Function) => {
            helper.edit('J1', '1.00E+01');
            helper.edit('J7', '=TRUNC(J1,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"10","formula":"=TRUNC(J1,3)"}');
            done();
        });
        it('TRUNC formula with different datatype - 8->', (done: Function) => {
            helper.edit('J1', '300');
            helper.edit('J7', '=TRUNC(J1,1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('300');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"300","formula":"=TRUNC(J1,1)"}');
            done();
        });
        it('TRUNC formula with different datatype - 9->', (done: Function) => {
            helper.edit('J1', '1000.00%');
            helper.edit('J7', '=TRUNC(J1,1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"10","formula":"=TRUNC(J1,1)"}');
            done();
        });
        it('TRUNC formula with different datatype - 10->', (done: Function) => {
            helper.edit('J4', '6/23/2014');
            helper.edit('J7', '=TRUNC(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('41813');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"41813","formula":"=TRUNC(J4)"}');
            done();
        });
        it('TRUNC formula with different datatype - 11->', (done: Function) => {
            helper.edit('J4', '12/5/2013 4:45:00 PM');
            helper.edit('J7', '=TRUNC(J4,10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('41613.69792');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"41613.6979166666","formula":"=TRUNC(J4,10)"}');
            done();
        });
        it('TRUNC formula with specific cases - 1->', (done: Function) => {
            helper.edit('J7', '=TRUNC(2+"3.45890", 2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(2+\\"3.45890\\", 2)"}');
            done();
        });
        it('TRUNC formula with specific cases - 2->', (done: Function) => {
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, 3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, 3)"}');
            done();
        });
        it('TRUNC formula with specific cases - 3->', (done: Function) => {
            helper.edit('J7', '=TRUNC("23.45 "* "1.0009", 4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.45 \\"* \\"1.0009\\", 4)"}');
            done();
        });
        it('TRUNC formula with specific cases - 4->', (done: Function) => {
            helper.edit('J7', '=TRUNC("34.7980"/2, 2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"34.7980\\"/2, 2)"}');
            done();
        });
        it('TRUNC formula with specific cases - 5->', (done: Function) => {
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, TRUE)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, TRUE)"}');
            done();
        });
        it('TRUNC formula with specific cases - 6->', (done: Function) => {
            helper.edit('J1', 'TRUE');
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, J1)"}');
            done();
        });
        it('TRUNC formula with specific cases - 7->', (done: Function) => {
            helper.edit('J1', 'FALSE');
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, J1)"}');
            done();
        });
        it('TRUNC formula with specific cases - 8->', (done: Function) => {
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, 2.65)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, 2.65)"}');
            done();
        });
        it('TRUNC formula with specific cases - 9->', (done: Function) => {
            helper.edit('J1', '6.67');
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, J1)"}');
            done();
        });
        it('TRUNC formula with specific cases - 10->', (done: Function) => {
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, 300%)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, 300%)"}');
            done();
        });
        it('TRUNC formula with specific cases - 11->', (done: Function) => {
            helper.edit('J1', '6/7/2024');
            helper.edit('J7', '=TRUNC("23.1034" + 4.67, J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=TRUNC(\\"23.1034\\" + 4.67, J1)"}');
            done();
        });
    });

    describe('Reported INT Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('INT formula with direct value - 1->', (done: Function) => {
            helper.edit('I1', '=INT("Hi")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=INT(\\"Hi\\")"}');
            done();
        });
        it('INT formula with direct value - 2->', (done: Function) => {
            helper.edit('I2', '=INT("")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=INT(\\"\\")"}');
            done();
        });
        it('INT formula with direct value - 3->', (done: Function) => {
            helper.edit('I3', '=INT("TRUE")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"#VALUE!","formula":"=INT(\\"TRUE\\")"}');
            done();
        });
        it('INT formula with direct value - 4->', (done: Function) => {
            helper.edit('I4', '=INT(3/4/2023)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":0,"formula":"=INT(3/4/2023)"}');
            done();
        });
        it('INT formula with direct value - 5->', (done: Function) => {
            helper.edit('I5', '=INT("3/4/2023")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('44989');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":44989,"formula":"=INT(\\"3/4/2023\\")"}');
            done();
        });
        it('INT formula with direct value - 6->', (done: Function) => {
            helper.edit('I6', '=INT("07-JUN")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('37049');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":37049,"formula":"=INT(\\"07-JUN\\")"}');
            done();
        });
        it('INT formula with direct value - 7->', (done: Function) => {
            helper.edit('I7', '=INT(" ")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#VALUE!","formula":"=INT(\\" \\")"}');
            done();
        });
        it('INT formula with direct value - 8->', (done: Function) => {
            helper.edit('I8', '=INT("    ")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":"#VALUE!","formula":"=INT(\\"    \\")"}');
            done();
        });
        it('INT formula with direct value - 9->', (done: Function) => {
            helper.edit('I2', '=INT("")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=INT(\\"\\")"}');
            done();
        });
        it('INT formula with cell reference - 1->', (done: Function) => {
            helper.edit('J1', '"65.678"');
            helper.edit('J2', '"112"');
            helper.edit('J3', 'hi');
            helper.edit('J4', '"0"');
            helper.edit('J5', '""');
            helper.edit('J6', '"TRUE"');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=INT(J2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J2)"}');
            done();
        });
        it('INT formula with cell reference - 3->', (done: Function) => {
            helper.edit('J7', '=INT(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J3)"}');
            done();
        });
        it('INT formula with cell reference - 4->', (done: Function) => {
            helper.edit('J7', '=INT(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J4)"}');
            done();
        });
        it('INT formula with cell reference - 5->', (done: Function) => {
            helper.edit('J7', '=INT(J5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J5)"}');
            done();
        });
        it('INT formula with cell reference - 6->', (done: Function) => {
            helper.edit('J7', '=INT(J6)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J6)"}');
            done();
        });
        it('INT formula with cell reference - 7->', (done: Function) => {
            helper.edit('J1', '"-5"');
            helper.edit('J2', '"Hi"');
            helper.edit('J3', '6+2.83');
            helper.edit('J4', '2*7');
            helper.edit('J5', '22/2');
            helper.edit('J6', '15-3');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with cell reference - 8->', (done: Function) => {
            helper.edit('J7', '=INT(J8)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(J8)"}');
            done();
        });
        it('INT formula with cell reference - 9->', (done: Function) => {
            helper.edit('J7', '=INT(J2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J2)"}');
            done();
        });
        it('INT formula with cell reference - 10->', (done: Function) => {
            helper.edit('J7', '=INT(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J3)"}');
            done();
        });
        it('INT formula with cell reference - 11->', (done: Function) => {
            helper.edit('J7', '=INT(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J4)"}');
            done();
        });
        it('INT formula with cell reference - 12->', (done: Function) => {
            helper.edit('J7', '=INT(J5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J5)"}');
            done();
        });
        it('INT formula with cell reference - 13->', (done: Function) => {
            helper.edit('J7', '=INT(J6)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J6)"}');
            done();
        });
        it('INT formula with cell reference - 14->', (done: Function) => {
            helper.edit('J1', '""');
            helper.edit('J2', '"0"');
            helper.edit('J3', '"03/04/2023"');
            helper.edit('J4', '"07-JUN"');
            helper.edit('J5', '" "');
            helper.edit('J6', '"     "');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with cell reference - 15->', (done: Function) => {
            helper.edit('J7', '=INT(J2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J2)"}');
            done();
        });
        it('INT formula with cell reference - 16->', (done: Function) => {
            helper.edit('J7', '=INT(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J3)"}');
            done();
        });
        it('INT formula with cell reference - 17->', (done: Function) => {
            helper.edit('J7', '=INT(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J4)"}');
            done();
        });
        it('INT formula with cell reference - 18->', (done: Function) => {
            helper.edit('J7', '=INT(J5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J5)"}');
            done();
        });
        it('INT formula with cell reference - 19->', (done: Function) => {
            helper.edit('J7', '=INT(J6)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J6)"}');
            done();
        });
        it('INT formula with cell reference - 20->', (done: Function) => {
            helper.edit('J1', '123Hello');
            helper.edit('J7', '=INT($J$1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT($J$1)"}');
            done();
        });
        it('INT formula with cell reference - 21->', (done: Function) => {
            helper.edit('J1', '"33"');
            helper.edit('J7', '=INT($J$1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT($J$1)"}');
            done();
        });
        it('INT formula with cell reference - 22->', (done: Function) => {
            helper.edit('J1', '3/4/2023');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('44989');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":44989,"formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with sheet reference - 1->', (done: Function) => {
            helper.edit('J1', '6+2.83');
            helper.edit('J2', '"65.678"');
            helper.edit('J3', 'o');
            helper.edit('J7', '=INT(Sheet1!J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(Sheet1!J1)"}');
            done();
        });
        it('INT formula with sheet reference - 2->', (done: Function) => {
            helper.edit('J7', '=INT(Sheet1!J2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(Sheet1!J2)"}');
            done();
        });
        it('INT formula with sheet reference - 3->', (done: Function) => {
            helper.edit('J7', '=INT(Sheet1!$J$2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(Sheet1!$J$2)"}');
            done();
        });
        it('INT formula with sheet reference - 4->', (done: Function) => {
            helper.edit('J7', '=INT(Sheet1!$J$10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(Sheet1!$J$10)"}');
            done();
        });
        it('INT formula with sheet reference - 5->', (done: Function) => {
            helper.edit('J7', '=INT(Sheet1!$J10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(Sheet1!$J10)"}');
            done();
        });
        it('INT formula with different datatype - 1->', (done: Function) => {
            helper.edit('J7', '=INT(6.078%)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(6.078%)"}');
            done();
        });
        it('INT formula with different datatype - 2->', (done: Function) => {
            helper.edit('J1', '"-3.45"');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with different datatype - 3->', (done: Function) => {
            helper.edit('J7', '=INT(J10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(J10)"}');
            done();
        });
        it('INT formula with different datatype - 4->', (done: Function) => {
            helper.edit('J7', '=INT("Flip")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(\\"Flip\\")"}');
            done();
        });
        it('INT formula with different datatype - 5->', (done: Function) => {
            helper.edit('J1', 'Flip- Flops & Slippers');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with different datatype - 6->', (done: Function) => {
            helper.edit('J7', '=INT(6/23/2014)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(6/23/2014)"}');
            done();
        });
        it('INT formula with different datatype - 7->', (done: Function) => {
            helper.edit('J7', '=INT(0.122)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(0.122)"}');
            done();
        });
        it('INT formula with different datatype - 8->', (done: Function) => {
            helper.edit('J7', '=INT(2/3/2000)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(2/3/2000)"}');
            done();
        });
        it('INT formula with different datatype - 9->', (done: Function) => {
            helper.edit('J1', '1:45:00 PM');
            helper.edit('J7', '=INT(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=INT(J1)"}');
            done();
        });
        it('INT formula with different datatype - 10->', (done: Function) => {
            helper.edit('J7', '=INT(MONTH(21))');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":1,"formula":"=INT(MONTH(21))"}');
            done();
        });
        it('INT formula with different datatype - 11->', (done: Function) => {
            helper.edit('J7', '=INT(EXP(MONTH(SMALL(A2:A9, 4))))');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NUM!","formula":"=INT(EXP(MONTH(SMALL(A2:A9, 4))))"}');
            done();
        });
    });

    describe('Reported LN Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('LN formula with specific cases - 1->', (done: Function) => {
            helper.edit('I1', '=LN("!")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"!\\")"}');
            done();
        });
        it('LN formula with specific cases - 2->', (done: Function) => {
            helper.edit('I2', '=LN("""")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"\\"\\"\\")"}');
            done();
        });
        it('LN formula with specific cases - 3->', (done: Function) => {
            helper.edit('I3', '=LN("""   ")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"\\"\\"   \\")"}');
            done();
        });
        it('LN formula with specific cases - 4->', (done: Function) => {
            helper.edit('I4', '=LN("  .67   """)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"  .67   \\"\\"\\")"}');
            done();
        });
        it('LN formula with direct value - 1->', (done: Function) => {
            helper.edit('I1', '=LN(Hi)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=LN(Hi)"}');
            done();
        });
        it('LN formula with direct value - 2->', (done: Function) => {
            helper.edit('I2', '=LN("")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"\\")"}');
            done();
        });
        it('LN formula with direct value - 3->', (done: Function) => {
            helper.edit('I3', '=LN(TRUE)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":0,"formula":"=LN(TRUE)"}');
            done();
        });
        it('LN formula with direct value - 4->', (done: Function) => {
            helper.edit('I4', '=LN(FALSE)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#NUM!","formula":"=LN(FALSE)"}');
            done();
        });
        it('LN formula with direct value - 5->', (done: Function) => {
            helper.edit('I5', '=LN("")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"\\")"}');
            done();
        });
        it('LN formula with direct value - 6->', (done: Function) => {
            helper.edit('I6', '=LN("3/4/2023")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('10.71417329');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":10.7141732944266,"formula":"=LN(\\"3/4/2023\\")"}');
            done();
        });
        it('LN formula with direct value - 7->', (done: Function) => {
            helper.edit('I7', '=LN(7-JUN)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#NAME?","formula":"=LN(7-JUN)"}');
            done();
        });
        it('LN formula with direct value - 8->', (done: Function) => {
            helper.edit('I8', '=LN("07-JUN")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('10.51999664');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":10.519996639806674,"formula":"=LN(\\"07-JUN\\")"}');
            done();
        });
        it('LN formula with direct value - 9->', (done: Function) => {
            helper.edit('I9', '=LN(" ")');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\" \\")"}');
            done();
        });
        it('LN formula with direct value - 10->', (done: Function) => {
            helper.edit('I10', '=LN("       ")');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":"#VALUE!","formula":"=LN(\\"       \\")"}');
            done();
        });
        it('LN formula with cell reference - 1->', (done: Function) => {
            helper.edit('J1', '#REF!');
            helper.edit('J2', 'TRUE');
            helper.edit('J3', 'FALSE');
            helper.edit('J7', '=LN(J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#REF!","formula":"=LN(J1)"}');
            done();
        });
        it('LN formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=LN(J2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=LN(J2)"}');
            done();
        });
        it('LN formula with cell reference - 3->', (done: Function) => {
            helper.edit('J7', '=LN(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NUM!","formula":"=LN(J3)"}');
            done();
        });
        it('LN formula with cell reference - 4->', (done: Function) => {
            helper.edit('J7', '=LN(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NUM!","formula":"=LN(J4)"}');
            done();
        });
        it('LN formula with sheet reference - 1->', (done: Function) => {
            helper.edit('J1', '#DIV/0!');
            helper.edit('J2', '#NUM!');
            helper.edit('J7', '=LN(Sheet1!J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#DIV/0!","formula":"=LN(Sheet1!J1)"}');
            done();
        });
        it('LN formula with sheet reference - 2->', (done: Function) => {
            helper.edit('J7', '=LN($J$2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NUM!","formula":"=LN($J$2)"}');
            done();
        });
        it('LN formula with invalid arguements - 1->', (done: Function) => {
            helper.edit('J7', '=LN(6.078%)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-2.800494491');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":-2.80049449149349,"formula":"=LN(6.078%)"}');
            done();
        });
        it('LN formula with invalid arguements - 2->', (done: Function) => {
            helper.edit('J7', '=LN(MONTH(21))');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":0,"formula":"=LN(MONTH(21))"}');
            done();
        });
        it('LN formula with invalid arguements - 3->', (done: Function) => {
            helper.edit('A2', '103.32');
            helper.edit('A3', '104.32');
            helper.edit('A4', '105.32');
            helper.edit('A5', '106.32');
            helper.edit('A6', '107.32');
            helper.edit('A7', '108.32');
            helper.edit('A8', '109.32');
            helper.edit('A9', '110.32');
            helper.edit('J7', '=LN(EXP(MONTH(SMALL(A2:A9, 4))))');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":4,"formula":"=LN(EXP(MONTH(SMALL(A2:A9, 4))))"}');
            done();
        });
    });

    describe('Formula - Checking IV ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ODD Formula with cell Reference - I->', (done: Function) => {
            helper.edit('I1', '=ODD(E4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('15');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":15,"formula":"=ODD(E4)"}');
            done();
        });
        it('ODD Formula with cell Reference - II->', (done: Function) => {
            helper.edit('I2', '=ODD(E2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('21');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":21,"formula":"=ODD(E2)"}');
            done();
        });
        it('ODD Formula with direct value->', (done: Function) => {
            helper.edit('I3', '=ODD(22)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('23');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":23,"formula":"=ODD(22)"}');
            done();
        });
        it('ODD Formula with negative odd value->', (done: Function) => {
            helper.edit('I4', '=ODD(-1)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":-1,"formula":"=ODD(-1)"}');
            done();
        });
        it('ODD Formula with negative even value->', (done: Function) => {
            helper.edit('I5', '=ODD(-2)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('-3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":-3,"formula":"=ODD(-2)"}');
            done();
        });
        it('ODD Formula with decimal value->', (done: Function) => {
            helper.edit('I6', '=ODD(1.5)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":3,"formula":"=ODD(1.5)"}');
            done();
        });
        it('ODD Formula with negative decimal value->', (done: Function) => {
            helper.edit('I7', '=ODD(-1.5)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('-3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":-3,"formula":"=ODD(-1.5)"}');
            done();
        });
        it('ODD Formula with no input->', (done: Function) => {
            helper.edit('I8', '=ODD()');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{}');
            done();
        });
        it('ODD Formula with more than 1 input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I9');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ODD(D2,D3)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ODD(D2,D3)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I9', '=ODD(D2)');
            done();
        });
        it('ODD Formula with invalid input->', (done: Function) => {
            helper.edit('I10', '=ODD(odd)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":"#NAME?","formula":"=ODD(odd)"}');
            done();
        });
        it('ODD Formula with with cell having no value->', (done: Function) => {
            helper.edit('I11', '=ODD(L3)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":1,"formula":"=ODD(L3)"}');
            done();
        });
        it('ODD Formula with with cell having alphabets->', (done: Function) => {
            helper.edit('I12', '=ODD(A3)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":"#VALUE!","formula":"=ODD(A3)"}');
            done();
        });
        it('ODD Formula with with cell boolean value->', (done: Function) => {
            helper.edit('I13', '=ODD(TRUE)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":1,"formula":"=ODD(TRUE)"}');
            done();
        });
        it('ODD Formula with with boolean value->', (done: Function) => {
            helper.edit('I14', '=ODD(FALSE)');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[8])).toBe('{"value":1,"formula":"=ODD(FALSE)"}');
            done();
        });
        it('ODD Formula with with boolean value as cell reference->', (done: Function) => {
            helper.edit('I15', 'TRUE');
            helper.edit('I16', '=ODD(I15)');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":1,"formula":"=ODD(I15)"}');
            done();
        });
        it('ODD Formula with with boolean value as cell reference->', (done: Function) => {
            helper.edit('I17', '=ODD("TRUE")');
            expect(helper.invoke('getCell', [16, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[8])).toBe('{"value":"#VALUE!","formula":"=ODD(\\"TRUE\\")"}');
            done();
        });
        it('ODD Formula percentage,decimal,date,time,currency formats ->', (done: Function) => {
            helper.edit('M1', '4000.00%');
            helper.edit('M2', '4045671234');
            helper.edit('M3', '11/7/2015');
            helper.edit('M4', '1/10/1900 3:10:00 AM');
            helper.edit('M5', '$123');
            helper.edit('M6', '=ODD(M1)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('41');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":41,"formula":"=ODD(M1)"}');
            helper.edit('M7', '=ODD(M2)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('4045671235');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":4045671235,"formula":"=ODD(M2)"}');
            helper.edit('M8', '=ODD(M3)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('42315');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":42315,"formula":"=ODD(M3)"}');
            helper.edit('M9', '=ODD(M4)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('11');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":11,"formula":"=ODD(M4)"}');
            helper.edit('M10', '=ODD(M5)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('123');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":123,"formula":"=ODD(M5)"}');
            done();
        });
        it('ODD formula with nested formula and extra string cases', (done: Function) => {
            helper.edit('N1', '=ODD(SUM(1,2))');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('3');
            helper.edit('N2', '=ODD(PRODUCT(1,2))');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('3');
            helper.edit('N3', '=ODD(MIN(G2:G8))');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('1');
            helper.edit('N4', '=ODD(MAX(G2:G8))');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('13');
            helper.edit('N5', '=ODD(IF(G1>G4,2,3))');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('3');
            helper.edit('N6', '=SUM(ODD(G5),3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('14');
            helper.edit('N7', '=PRODUCT(ODD(G7),ODD(3))');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('39');
            helper.edit('N8', '=MIN(ODD(24),ODD(28))');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('25');
            helper.edit('N9', '=MAX(ODD(24),ODD(28))');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('29');
            helper.edit('N10', '=ODD("")');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('#VALUE!');
            helper.edit('N11', '=ODD(" ")');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('#VALUE!');
            helper.edit('N12', '"hello"');
            helper.edit('N13', '=ODD(N12)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('#VALUE!');
            helper.edit('N14', '"TRUE"');
            helper.edit('N15', '=ODD(N14)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('#VALUE!');
            helper.edit('N16', '=ODD(O14)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('1');
            helper.edit('N17', '"123"');
            helper.edit('N18', '=ODD(N17)');
            expect(helper.invoke('getCell', [17, 13]).textContent).toBe('#VALUE!');
            done();
        });
        it('EVEN Formula with cell Reference - I->', (done: Function) => {
            helper.edit('J1', '=EVEN(E4)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('16');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":16,"formula":"=EVEN(E4)"}');
            done();
        });
        it('EVEN Formula with cell Reference - II->', (done: Function) => {
            helper.edit('J2', '=EVEN(E2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":20,"formula":"=EVEN(E2)"}');
            done();
        });
        it('EVEN Formula with direct value->', (done: Function) => {
            helper.edit('J3', '=EVEN(13)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('14');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":14,"formula":"=EVEN(13)"}');
            done();
        });
        it('EVEN Formula with negative odd value->', (done: Function) => {
            helper.edit('J4', '=EVEN(-13)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('-14');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":-14,"formula":"=EVEN(-13)"}');
            done();
        });
        it('EVEN Formula with negative even value->', (done: Function) => {
            helper.edit('J5', '=EVEN(-14)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('-14');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":-14,"formula":"=EVEN(-14)"}');
            done();
        });
        it('EVEN Formula with decimal value->', (done: Function) => {
            helper.edit('J6', '=EVEN(2.5)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":4,"formula":"=EVEN(2.5)"}');
            done();
        });
        it('EVEN Formula with negative decimal value->', (done: Function) => {
            helper.edit('J7', '=EVEN(-1.5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":-2,"formula":"=EVEN(-1.5)"}');
            done();
        });
        it('EVEN Formula with no input->', (done: Function) => {
            helper.edit('J8', '=EVEN()');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{}');
            done();
        });
        it('EVEN Formula with more than 1 input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J9');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=EVEN(D2,D3)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=EVEN(D2,D3)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J9', '=EVEN(D2)');
            done();
        });
        it('EVEN Formula with invalid input->', (done: Function) => {
            helper.edit('J10', '=EVEN(even)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[9])).toBe('{"value":"#NAME?","formula":"=EVEN(even)"}');
            done();
        });
        it('EVEN Formula with with cell having no value->', (done: Function) => {
            helper.edit('J11', '=EVEN(L3)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[9])).toBe('{"value":0,"formula":"=EVEN(L3)"}');
            done();
        });
        it('EVEN Formula with with cell having alphabets->', (done: Function) => {
            helper.edit('J12', '=EVEN(A3)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[9])).toBe('{"value":"#VALUE!","formula":"=EVEN(A3)"}');
            done();
        });
        it('EVEN Formula with boolean value TRUE->', (done: Function) => {
            helper.edit('J13', '=EVEN(TRUE)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[9])).toBe('{"value":2,"formula":"=EVEN(TRUE)"}');
            done();
        });
        it('EVEN Formula with boolean value FALSE->', (done: Function) => {
            helper.edit('J14', '=EVEN(FALSE)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[9])).toBe('{"value":0,"formula":"=EVEN(FALSE)"}');
            done();
        });
        it('EVEN Formula with boolean value as cell reference->', (done: Function) => {
            helper.edit('J15', 'TRUE');
            helper.edit('J16', '=EVEN(J15)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[9])).toBe('{"value":2,"formula":"=EVEN(J15)"}');
            done();
        });
        it('EVEN Formula with boolean value as cell reference->', (done: Function) => {
            helper.edit('J17', 'FALSE');
            helper.edit('J18', '=EVEN(J17)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[9])).toBe('{"value":0,"formula":"=EVEN(J17)"}');
            done();
        });
        it('EVEN Formula percentage,decimal,date,time,currency formats ->', (done: Function) => {
            helper.edit('L1', '4000.00%');
            helper.edit('L2', '4045671234');
            helper.edit('L3', '11/7/2015');
            helper.edit('L4', '1/10/1900 3:10:00 AM');
            helper.edit('L5', '$123');
            helper.edit('L6', '=EVEN(L1)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('40');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":40,"formula":"=EVEN(L1)"}');
            helper.edit('L7', '=EVEN(L2)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('4045671234');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":4045671234,"formula":"=EVEN(L2)"}');
            helper.edit('L8', '=EVEN(L3)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('42316');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":42316,"formula":"=EVEN(L3)"}');
            helper.edit('L9', '=EVEN(L4)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('12');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":12,"formula":"=EVEN(L4)"}');
            helper.edit('L10', '=EVEN(L5)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('124');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":124,"formula":"=EVEN(L5)"}');
            done();
        });
        it('EVEN formula with nested formula and extra string cases', (done: Function) => {
            helper.edit('O1', '=EVEN(SUM(1,2))');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('4');
            helper.edit('O2', '=EVEN(PRODUCT(1,2))');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('2');
            helper.edit('O3', '=EVEN(MIN(G2:G8))');
            expect(helper.invoke('getCell', [2, 14]).textContent).toBe('2');
            helper.edit('O4', '=EVEN(MAX(G2:G8))');
            expect(helper.invoke('getCell', [3, 14]).textContent).toBe('14');
            helper.edit('O5', '=EVEN(IF(G1>G4,2,3))');
            expect(helper.invoke('getCell', [4, 14]).textContent).toBe('2');
            helper.edit('O6', '=SUM(EVEN(G5),3)');
            expect(helper.invoke('getCell', [5, 14]).textContent).toBe('15');
            helper.edit('O7', '=PRODUCT(EVEN(G7),EVEN(3))');
            expect(helper.invoke('getCell', [6, 14]).textContent).toBe('56');
            helper.edit('O8', '=MIN(EVEN(24),EVEN(28))');
            expect(helper.invoke('getCell', [7, 14]).textContent).toBe('24');
            helper.edit('O9', '=MAX(EVEN(24),EVEN(28))');
            expect(helper.invoke('getCell', [8, 14]).textContent).toBe('28');
            helper.edit('O10', '=EVEN("")');
            expect(helper.invoke('getCell', [9, 14]).textContent).toBe('#VALUE!');
            helper.edit('O11', '=EVEN(" ")');
            expect(helper.invoke('getCell', [10, 14]).textContent).toBe('#VALUE!');
            helper.edit('O12', '"hello"');
            helper.edit('O13', '=EVEN(O12)');
            expect(helper.invoke('getCell', [12, 14]).textContent).toBe('#VALUE!');
            helper.edit('O14', '"TRUE"');
            helper.edit('O15', '=EVEN(O14)');
            expect(helper.invoke('getCell', [14, 14]).textContent).toBe('#VALUE!');
            helper.edit('O16', '=EVEN(P14)');
            expect(helper.invoke('getCell', [15, 14]).textContent).toBe('0');
            helper.edit('O17', '"123"');
            helper.edit('O18', '=EVEN(O17)');
            expect(helper.invoke('getCell', [17, 14]).textContent).toBe('#VALUE!');
            done();
        });
        it('PI Formula ->', (done: Function) => {
            helper.edit('K1', '=PI()');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('3.141592654');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":3.141592653589793,"formula":"=PI()"}');
            done();
        });
        it('PI Formula with other operator->', (done: Function) => {
            helper.edit('K2', '=PI()*2');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('6.283185307');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"6.283185307179586","formula":"=PI()*2"}');
            done();
        });
        it('PI Formula with invalid input ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=PI(2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=PI(2)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K3', '=PI()');
            done();
        });2
        it('PI Formula for area of circle formula->', (done: Function) => {
            helper.edit('K4', '=PI()*(D3^2)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('1256.637061');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"1256.6370614359173","formula":"=PI()*(D3^2)"}');
            done();
        });
        it('PI Formula with Degrees formula->', (done: Function) => {
            helper.edit('K5', '=DEGREES(pi())');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('180');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":180,"formula":"=DEGREES(pi())"}');
            done();
        });
        it('PI Formula with string value to the power of 2 as argument ->', (done: Function) => {
            helper.edit('K6', '=PI()*C1^2');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"#VALUE!","formula":"=PI()*C1^2"}');
            helper.edit('K7', '=PI()*2^C1');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"#VALUE!","formula":"=PI()*2^C1"}');
            done();
        });
    });

    describe('Reported LOG Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('LOG formula with specific cases - 1->', (done: Function) => {
            helper.edit('I1', '=LOG(Hi/2,1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=LOG(Hi/2,1)"}');
            done();
        });
        it('LOG formula with specific cases - 2->', (done: Function) => {
            helper.edit('I2', '=LOG(123.686,"3.189")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('4.154277317');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"4.154277316577911","formula":"=LOG(123.686,\\"3.189\\")"}');
            done();
        });
        it('LOG formula with specific cases - 3->', (done: Function) => {
            helper.edit('I2', '=LOG(2+"3.45890", 2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=LOG(2+\\"3.45890\\", 2)"}');
            done();
        });
        it('LOG formula with specific cases - 4->', (done: Function) => {
            helper.edit('I2', '=LOG("23.1034" + 4.67, 3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=LOG(\\"23.1034\\" + 4.67, 3)"}');
            done();
        });
        it('LOG formula with specific cases - 5->', (done: Function) => {
            helper.edit('I2', '=LOG("23.45 "* "1.0009", 4)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=LOG(\\"23.45 \\"* \\"1.0009\\", 4)"}');
            done();
        });
        it('LOG formula with specific cases - 6->', (done: Function) => {
            helper.edit('I2', '=LOG("34.7980"/2, 2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#VALUE!","formula":"=LOG(\\"34.7980\\"/2, 2)"}');
            done();
        });
        it('LOG formula with direct value - 1->', (done: Function) => {
            helper.edit('I1', '=LOG("6",2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('2.584962501');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"2.584962500721156","formula":"=LOG(\\"6\\",2)"}');
            done();
        });
        it('LOG formula with direct value - 2->', (done: Function) => {
            helper.edit('I2', '=LOG("102.673902", 3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('4.215825741');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"4.2158257409110895","formula":"=LOG(\\"102.673902\\", 3)"}');
            done();
        });
        it('LOG formula with direct value - 3->', (done: Function) => {
            helper.edit('I3', '=LOG(Hi, 1)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"#NAME?","formula":"=LOG(Hi, 1)"}');
            done();
        });
        it('LOG formula with direct value - 4->', (done: Function) => {
            helper.edit('I4', '=LOG("", 2)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#VALUE!","formula":"=LOG(\\"\\", 2)"}');
            done();
        });
        it('LOG formula with direct value - 5->', (done: Function) => {
            helper.edit('I5', '=LOG("TRUE", 2)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#VALUE!","formula":"=LOG(\\"TRUE\\", 2)"}');
            done();
        });
        it('LOG formula with direct value - 6->', (done: Function) => {
            helper.edit('I6', '=LOG("-5.4678", 2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#NUM!","formula":"=LOG(\\"-5.4678\\", 2)"}');
            done();
        });
        it('LOG formula with direct value - 7->', (done: Function) => {
            helper.edit('I7', '=LOG(-6.0000001,7)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#NUM!","formula":"=LOG(-6.0000001,7)"}');
            done();
        });
        it('LOG formula with direct value - 8->', (done: Function) => {
            helper.edit('I8', '=LOG("0")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":"#NUM!","formula":"=LOG(\\"0\\")"}');
            done();
        });
        it('LOG formula with direct value - 9->', (done: Function) => {
            helper.edit('I9', '=LOG(7-JUN)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":"#NAME?","formula":"=LOG(7-JUN)"}');
            done();
        });
        it('LOG formula with cell reference - 1->', (done: Function) => {
            helper.edit('J1', '24.0001');
            helper.edit('J2', '33.45');
            helper.edit('J3', '#REF!');
            helper.edit('J4', '"TRUE"');
            helper.edit('J5', '"-5"');
            helper.edit('J7', '=LOG(J1,"4")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('2.292484256');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"2.2924842559689855","formula":"=LOG(J1,\\"4\\")"}');
            done();
        });
        it('LOG formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=LOG(J2,"2")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('5.063934306');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"5.063934305754099","formula":"=LOG(J2,\\"2\\")"}');
            done();
        });
        it('LOG formula with cell reference - 3->', (done: Function) => {
            helper.edit('J7', '=LOG(J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#REF!","formula":"=LOG(J3)"}');
            done();
        });
        it('LOG formula with cell reference - 4->', (done: Function) => {
            helper.edit('J7', '=LOG(J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=LOG(J4)"}');
            done();
        });
        it('LOG formula with cell reference - 5->', (done: Function) => {
            helper.edit('J7', '=LOG(J5,1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=LOG(J5,1)"}');
            done();
        });
        it('LOG formula with sheet reference - 1->', (done: Function) => {
            helper.edit('J1', '#DIV/0!');
            helper.edit('J2', '"65.678"');
            helper.edit('J3', '#NUM!');
            helper.edit('J4', '"1"');
            helper.edit('J5', '#DIV/0!');
            helper.edit('J7', '=LOG(Sheet1!J1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#DIV/0!","formula":"=LOG(Sheet1!J1)"}');
            done();
        });
        it('LOG formula with sheet reference - 2->', (done: Function) => {
            helper.edit('J7', '=LOG(Sheet1!J2,1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=LOG(Sheet1!J2,1)"}');
            done();
        });
        it('LOG formula with sheet reference - 3->', (done: Function) => {
            helper.edit('J7', '=LOG($J$3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NUM!","formula":"=LOG($J$3)"}');
            done();
        });
        it('LOG formula with sheet reference - 4->', (done: Function) => {
            helper.edit('J7', '=LOG(Sheet1!$J12,J$4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=LOG(Sheet1!$J12,J$4)"}');
            done();
        });
        it('LOG formula with sheet reference - 5->', (done: Function) => {
            helper.edit('J7', '=LOG(Sheet1!J5,J4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#DIV/0!","formula":"=LOG(Sheet1!J5,J4)"}');
            done();
        });
        it('LOG formula with different datatype - 1->', (done: Function) => {
            helper.edit('J7', '=LOG(44.2347891,{"3"})');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('3.449362075');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"3.4493620745861904","formula":"=LOG(44.2347891,{\\"3\\"})"}');
            done();
        });
        it('LOG formula with different datatype - 2->', (done: Function) => {
            helper.edit('J7', '=LOG(6.078%,4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-2.020129757');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"-2.0201297574572585","formula":"=LOG(6.078%,4)"}');
            done();
        });
        it('LOG formula with different datatype - 3->', (done: Function) => {
            helper.edit('J7', '=LOG("13:34",2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-0.822968112');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"-0.8229681120634277","formula":"=LOG(\\"13:34\\",2)"}');
            done();
        });
        it('LOG formula with different datatype - 4->', (done: Function) => {
            helper.edit('J7', '=LOG(MONTH(21), 2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"0","formula":"=LOG(MONTH(21), 2)"}');
            done();
        });
        it('LOG formula with different datatype - 5->', (done: Function) => {
            helper.edit('A2', '103.32');
            helper.edit('A3', '104.32');
            helper.edit('A4', '105.32');
            helper.edit('A5', '106.32');
            helper.edit('A6', '107.32');
            helper.edit('A7', '108.32');
            helper.edit('A8', '109.32');
            helper.edit('A9', '110.32');
            helper.edit('J7', '=LOG(EXP(MONTH(SMALL(A2:A9, 4))), 5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('2.485339738');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"2.485339738238447","formula":"=LOG(EXP(MONTH(SMALL(A2:A9, 4))), 5)"}');
            done();
        });
    });

    describe('Reported EXP formula - Checking -> I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '"Hi"' }] }, { cells: [{ value: '98.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '-54' }] }, { cells: [{ value: '32' }] }, { cells: [{ value: 'one' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('EXP formula with cell Reference - 0->', (done: Function) => {
            helper.edit('H1', '"TRUE"');
            done();
        });
        it('EXP formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=EXP("6")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('403.4287935');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"403.4287934927351","formula":"=EXP(\\"6\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=EXP("102")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1.9862648361376543e+44');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1.9862648361376543e+44","formula":"=EXP(\\"102\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=EXP("Hi")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(\\"Hi\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=EXP("")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(\\"\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=EXP("TRUE")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(\\"TRUE\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=EXP("-5")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.006737947');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.006737946999085467","formula":"=EXP(\\"-5\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=EXP("-3.45")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.031745636');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.03174563637806794","formula":"=EXP(\\"-3.45\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=EXP("0")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=EXP(\\"0\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=EXP(" ")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(\\" \\")"}');
            done();
        });
        it('EXP formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=EXP("       ")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(\\"       \\")"}');
            done();
        });
        it('EXP formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=EXP(H1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(H1)"}');
            done();
        });
        it('EXP formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=EXP("Flip")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=EXP(\\"Flip\\")"}');
            done();
        });
        it('EXP formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=EXP(1:10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=EXP(1:10)"}');
            done();
        });
        it('EXP formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I1', '=EXP(6%)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1.061836547');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1.0618365465453596","formula":"=EXP(6%)"}');
            done();
        });
    });

    describe('Reported DEGREES formulae - Checking -> III ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DEGREES formula with cell Reference - 18->', (done: Function) => {
            helper.edit('H1', '#REF!');
            helper.edit('H2', '"65"');
            helper.edit('H3', '"212"');
            helper.edit('H4', '"0"');
            helper.edit('H5', '');
            helper.edit('H6', 'TRUE');
            helper.edit('H7', 'FALSE');
            helper.edit('H8', '"-76"');
            helper.edit('H9', '65+12');
            helper.edit('H10', '16*7');
            helper.edit('H11', '222/2');
            helper.edit('H12', '156-33');
            helper.edit('H12', '"0"');
            helper.edit('H14', '"03/04/2023"');
            helper.edit('H15', '#DIV/0!');
            helper.edit('H16', '#NUM!');
            helper.edit('H17', '"33"');
            done();
        });
        it('DEGREES formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=DEGREES(Hi)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=DEGREES(Hi)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=DEGREES(TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('57.29577951');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":57.29577951308232,"formula":"=DEGREES(TRUE)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=DEGREES(FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0,"formula":"=DEGREES(FALSE)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=DEGREES(7-JUN)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=DEGREES(7-JUN)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#REF!","formula":"=DEGREES(H1)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H2)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H3)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H4)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0,"formula":"=DEGREES(H5)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('57.29577951');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":57.29577951308232,"formula":"=DEGREES(H6)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H7)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0,"formula":"=DEGREES(H7)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H8)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H8)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H9)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H9)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H10)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 15->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H11)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 16->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H12)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H12)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 17->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H4)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 18->', (done: Function) => {
            helper.edit('I1', '=DEGREES(H14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(H14)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 19->', (done: Function) => {
            helper.edit('I1', '=DEGREES(6/23/2014)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.007421413');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0.007421412656588531,"formula":"=DEGREES(6/23/2014)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I1', '=DEGREES(1:10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0,"formula":"=DEGREES(1:10)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 21->', (done: Function) => {
            helper.edit('I1', '=DEGREES(2%)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1.14591559');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1.1459155902616465,"formula":"=DEGREES(2%)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 22->', (done: Function) => {
            helper.edit('I1', '=DEGREES(Sheet1!H15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#DIV/0!","formula":"=DEGREES(Sheet1!H15)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I1', '=DEGREES(Sheet1!H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES(Sheet1!H2)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 24->', (done: Function) => {
            helper.edit('I1', '=DEGREES($H$16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DEGREES($H$16)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 25->', (done: Function) => {
            helper.edit('I1', '=DEGREES($H$17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DEGREES($H$17)"}');
            done();
        });
        it('DEGREES formula with cell Reference - 26->', (done: Function) => {
            helper.edit('I1', '=DEGREES("07-JUN")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('2122751.335');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":2122751.335180187,"formula":"=DEGREES(\\"07-JUN\\")"}');
            done();
        });
    });

    describe('Formula - Checking V ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DATEVALUE Formula with dd-mm-yyyy format ->', (done: Function) => {
            helper.edit('J2', '=DATEVALUE("21/12/1998")');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toBe('=DATEVALUE("21/12/1998")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('DATEVALUE Formula with cell refernce having Date Value ->', (done: Function) => {
            helper.edit('J4', '=DATEVALUE(B5)');
            expect(helper.getInstance().sheets[0].rows[3].cells[9].formula).toBe('=DATEVALUE(B5)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('DATEVALUE Formula without "" ->', (done: Function) => {
            helper.edit('J5', '=DATEVALUE(11/20/1998)');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].formula).toBe('=DATEVALUE(11/20/1998)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('DATEVALUE Formula with cell having no value ->', (done: Function) => {
            helper.edit('J6', '=DATEVALUE(P10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('DATEVALUE Formula with invalid arguments ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=DATEVALUE("12/26/1998","10/20/1998")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=DATEVALUE("12/26/1998","10/20/1998")';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J7', '=DATEVALUE("12/26/1998")');
            done();
        });
        it('FACT Formula ->', (done: Function) => {
            helper.edit('L1', '=FACT(5)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('120');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":120,"formula":"=FACT(5)"}');
            done();
        });
        it('FACT Formula with Decimal Numbers->', (done: Function) => {
            helper.edit('L2', '=FACT(1.9)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":1,"formula":"=FACT(1.9)"}');
            done();
        });
        it('FACT Formula for 0->', (done: Function) => {
            helper.edit('L3', '=FACT(0)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":1,"formula":"=FACT(0)"}');
            done();
        });
        it('FACT Formula for negative numbers->', (done: Function) => {
            helper.edit('L4', '=FACT(-1)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"#NUM!","formula":"=FACT(-1)"}');
            done();
        });
        it('FACT Formula for cell referencing numbers->', (done: Function) => {
            helper.edit('L5', '=FACT(H2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('3628800');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":3628800,"formula":"=FACT(H2)"}');
            done();
        });
        it('FACT Formula for cell referencing string->', (done: Function) => {
            helper.edit('L6', '=FACT(A3)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":"#VALUE!","formula":"=FACT(A3)"}');
            done();
        });
        it('FACT Formula with no inputs ->', (done: Function) => {
            helper.edit('L7', '=FACT()');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{}');
            done();
        });
        it('FACT Formula with more than 1 inputs ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('L8');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=FACT(1,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=FACT(1,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L8', '=FACT(1)');
            done();
        });
        it('DEGREES Formula ->', (done: Function) => {
            helper.edit('N1', '=DEGREES(6.3)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('360.9634109');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":360.96341093241864,"formula":"=DEGREES(6.3)"}');
            done();
        });
        it('DEGREES Formula with no input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=DEGREES()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=DEGREES()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=DEGREES(PI())');
            done();
        });
        it('DEGREES Formula with cell having no value->', (done: Function) => {
            helper.edit('N3', '=DEGREES(P10)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":0,"formula":"=DEGREES(P10)"}');
            done();
        });
        it('DEGREES Formula with cell having string value->', (done: Function) => {
            helper.edit('N4', '=DEGREES(A3)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[13])).toBe('{"value":"#VALUE!","formula":"=DEGREES(A3)"}');
            done();
        });
    });

    describe('Reported ISNUMBER Formula - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Added cell Reference - 1->', (done: Function) => {
            helper.edit('C23', '1');
            helper.edit('D14', '"1"');
            helper.edit('D22', '"2"');
            helper.edit('C24', '2');
            helper.edit('D22', '"2"');
            helper.edit('C24', '2');
            helper.edit('B24', '"TRUE"');
            helper.edit('B15', 'TRUE');
            helper.edit('B25', '"FALSE"');
            helper.edit('F20', '""');
            helper.edit('G9', '600.00%');
            helper.edit('C20', 'Hello123');
            helper.edit('E17', '#NUM!');
            helper.edit('E15', '#NAME?');
            helper.edit('E16', '#DIV/0!');
            helper.edit('D22', '"2"');
            helper.edit('H20', '2');
            done();
        });
        it('IsNumber formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I21', '=ISNUMBER("45324")');
            expect(helper.invoke('getCell', [20, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[8])).toBe('{"value":false,"formula":"=ISNUMBER(\\"45324\\")"}');
            done();
        });
        it('IsNumber formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I22', '=ISNUMBER("45.433")');
            expect(helper.invoke('getCell', [21, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[21].cells[8])).toBe('{"value":false,"formula":"=ISNUMBER(\\"45.433\\")"}');
            done();
        });
        it('IsNumber formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I23', '=ISNUMBER("-453.43")');
            expect(helper.invoke('getCell', [22, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[22].cells[8])).toBe('{"value":false,"formula":"=ISNUMBER(\\"-453.43\\")"}');
            done();
        });
        it('IsNumber formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I24', '=ISNUMBER("0")');
            expect(helper.invoke('getCell', [23, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[8])).toBe('{"value":false,"formula":"=ISNUMBER(\\"0\\")"}');
            done();
        });
        it('IsNumber formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I24', '=ISNUMBER(TEXT(32,"@"))');
            expect(helper.invoke('getCell', [23, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[8])).toBe('{"value":true,"formula":"=ISNUMBER(TEXT(32,\\"@\\"))"}');
            done();
        });
    });

    describe('Reported FIND Formulae - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('FIND formula with specific cases - 1->', (done: Function) => {
            helper.edit('I1', '=FIND( , )');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=FIND( , )"}');
            done();
        });
        it('FIND formula with specific cases - 2->', (done: Function) => {
            helper.edit('I2', '=FIND(,)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"1","formula":"=FIND(,)"}');
            done();
        });
        it('FIND formula with difference cases - 1->', (done: Function) => {
            helper.edit('J1', '12:00:00 AM');
            helper.edit('J2', '"12/3/2001"');
            helper.edit('I3', '=FIND(J1,J2)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"8","formula":"=FIND(J1,J2)"}');
            done();
        });
        it('FIND formula with difference cases - 2->', (done: Function) => {
            helper.edit('J1', '2*7');
            helper.edit('I3', '=FIND("2*7", J1)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"1","formula":"=FIND(\\"2*7\\", J1)"}');
            done();
        });
        it('FIND formula with difference cases - 3->', (done: Function) => {
            helper.edit('J1', '"2*7"');
            helper.edit('I3', '=FIND("2*7", J1)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"2","formula":"=FIND(\\"2*7\\", J1)"}');
            done();
        });
        it('FIND formula with difference cases - 4->', (done: Function) => {
            helper.edit('J1', '98');
            helper.edit('J2', '15-12');
            helper.edit('I3', '=FIND(J1,"32039820",J2)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"#VALUE!","formula":"=FIND(J1,\\"32039820\\",J2)"}');
            done();
        });
        it('FIND formula with difference cases - 5->', (done: Function) => {
            helper.edit('J1', '"98"');
            helper.edit('J2', '15-12');
            helper.edit('I3', '=FIND(J1,"32039820",J2)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"#VALUE!","formula":"=FIND(J1,\\"32039820\\",J2)"}');
            done();
        });
        it('FIND formula with normal value - 1->', (done: Function) => {
            helper.edit('I1', '=FIND("ele","#NUM!")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FIND(\\"ele\\",\\"#NUM!\\")"}');
            done();
        });
        it('FIND formula with normal value - 2->', (done: Function) => {
            helper.edit('I2', '=FIND(,)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"1","formula":"=FIND(,)"}');
            done();
        });
        it('FIND formula with normal value - 3->', (done: Function) => {
            helper.edit('I2', '=FIND("2","10""1-2")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"6","formula":"=FIND(\\"2\\",\\"10\\"\\"1-2\\")"}');
            done();
        });
        it('FIND formula with cell reference - 1->', (done: Function) => {
            helper.edit('J1', '"FALSE"');
            helper.edit('J2', 'FALSE');
            helper.edit('J3', '"TRUE"');
            helper.edit('J4', '" "');
            helper.edit('J5', '"     "');
            helper.edit('J6', '""');
            helper.edit('J8', '""      ""');
            helper.edit('J7', '=FIND(J1,J2)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=FIND(J1,J2)"}');
            done();
        });
        it('FIND formula with cell reference - 2->', (done: Function) => {
            helper.edit('J7', '=FIND("""",J3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"1","formula":"=FIND(\\"\\"\\"\\",J3)"}');
            done();
        });
        it('FIND formula with cell reference - 3->', (done: Function) => {
            helper.edit('J7', '=FIND(J4,J5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=FIND(J4,J5)"}');
            done();
        });
        it('FIND formula with cell reference - 4->', (done: Function) => {
            helper.edit('J7', '=FIND(J6,J8,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('9');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"9","formula":"=FIND(J6,J8,3)"}');
            done();
        });
    });

    describe('Reported FACT formula - Checking -> I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '"Hi"' }] }, { cells: [{ value: '98.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '-54' }] }, { cells: [{ value: '32' }] }, { cells: [{ value: 'one' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('FACT formula with cell Reference - 0->', (done: Function) => {
            helper.edit('H1', '#REF!');
            helper.edit('H2', '"65"');
            helper.edit('H3', '"112"');
            helper.edit('H4', '"0"');
            helper.edit('H5', '""');
            helper.edit('H6', 'TRUE');
            helper.edit('H7', 'FALSE');
            helper.edit('H8', '"-5"');
            helper.edit('H9', '6+2');
            helper.edit('H10', '2*7');
            helper.edit('H11', '22/2');
            helper.edit('H12', '15-3');
            helper.edit('H13', '3/4/2023');
            helper.edit('H14', '"03/04/2023"');
            helper.edit('H15', '7-Jun');
            helper.edit('H16', '" "');
            helper.edit('H17', '"   "');
            helper.edit('H18', '6/23/2014');
            helper.edit('H19', '$300.00');
            helper.edit('H20', '#DIV/0!');
            helper.edit('H21', '"Hi"');
            helper.edit('H22', '#NUM!');
            helper.edit('H23', '"33"');
            helper.edit('H24', '');
            done();
        });
        it('FACT formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=FACT(Hi)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=FACT(Hi)"}');
            done();
        });
        it('FACT formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=FACT("")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(\\"\\")"}');
            done();
        });
        it('FACT formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=FACT(TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(TRUE)"}');
            done();
        });
        it('FACT formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=FACT(FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(FALSE)"}');
            done();
        });
        it('FACT formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=FACT("3/4/2023")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT(\\"3/4/2023\\")"}');
            done();
        });
        it('FACT formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=FACT(7-JUN)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=FACT(7-JUN)"}');
            done();
        });
        it('FACT formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=FACT("07-JUN")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT(\\"07-JUN\\")"}');
            done();
        });
        it('FACT formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=FACT(" ")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(\\" \\")"}');
            done();
        });
        it('FACT formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=FACT("       ")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(\\"       \\")"}');
            done();
        });
        it('FACT formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=FACT(H1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#REF!","formula":"=FACT(H1)"}');
            done();
        });
        it('FACT formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=FACT(H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H2)"}');
            done();
        });
        it('FACT formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=FACT(H3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H3)"}');
            done();
        });
        it('FACT formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=FACT(H4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H4)"}');
            done();
        });
        it('FACT formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I1', '=FACT(H5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H5)"}');
            done();
        });
        it('FACT formula with cell Reference - 15->', (done: Function) => {
            helper.edit('I1', '=FACT(H6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(H6)"}');
            done();
        });
        it('FACT formula with cell Reference - 16->', (done: Function) => {
            helper.edit('I1', '=FACT(H7)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(H7)"}');
            done();
        });
        it('FACT formula with cell Reference - 17->', (done: Function) => {
            helper.edit('I1', '=FACT(H8)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H8)"}');
            done();
        });
        it('FACT formula with cell Reference - 18->', (done: Function) => {
            helper.edit('I1', '=FACT(H9)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H9)"}');
            done();
        });
        it('FACT formula with cell Reference - 19->', (done: Function) => {
            helper.edit('I1', '=FACT(H10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H10)"}');
            done();
        });
        it('FACT formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I1', '=FACT(H11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H11)"}');
            done();
        });
        it('FACT formula with cell Reference - 21->', (done: Function) => {
            helper.edit('I1', '=FACT(H12)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H12)"}');
            done();
        });
        it('FACT formula with cell Reference - 22->', (done: Function) => {
            helper.edit('I1', '=FACT(H5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H5)"}');
            done();
        });
        it('FACT formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I1', '=FACT(H4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H4)"}');
            done();
        });
        it('FACT formula with cell Reference - 24->', (done: Function) => {
            helper.edit('I1', '=FACT(H13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT(H13)"}');
            done();
        });
        it('FACT formula with cell Reference - 25->', (done: Function) => {
            helper.edit('I1', '=FACT(H14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H14)"}');
            done();
        });
        it('FACT formula with cell Reference - 26->', (done: Function) => {
            helper.edit('I1', '=FACT(H15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT(H15)"}');
            done();
        });
        it('FACT formula with cell Reference - 27->', (done: Function) => {
            helper.edit('I1', '=FACT(H16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H16)"}');
            done();
        });
        it('FACT formula with cell Reference - 28->', (done: Function) => {
            helper.edit('I1', '=FACT(H17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(H17)"}');
            done();
        });
        it('FACT formula with cell Reference - 29->', (done: Function) => {
            helper.edit('I1', '=FACT(H18)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT(H18)"}');
            done();
        });
        it('FACT formula with cell Reference - 30->', (done: Function) => {
            helper.edit('I1', '=FACT(1:10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0,"formula":"=FACT(1:10)"}');
            done();
        });
        it('FACT formula with cell Reference - 31->', (done: Function) => {
            helper.edit('I1', '=FACT(6%)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(6%)"}');
            done();
        });
        it('FACT formula with cell Reference - 32->', (done: Function) => {
            helper.edit('I1', '=FACT(H19)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT(H19)"}');
            done();
        });
        it('FACT formula with cell Reference - 33->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet1!H9)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(Sheet1!H9)"}');
            done();
        });
        it('FACT formula with cell Reference - 34->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet1!H20)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#DIV/0!","formula":"=FACT(Sheet1!H20)"}');
            done();
        });
        it('FACT formula with cell Reference - 35->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet1!H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(Sheet1!H2)"}');
            done();
        });
        it('FACT formula with cell Reference - 36->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet1!$H9)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(Sheet1!$H9)"}');
            done();
        });
        it('FACT formula with cell Reference - 37->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet1!H$24)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(Sheet1!H$24)"}');
            done();
        });
        it('FACT formula with cell Reference - 38->', (done: Function) => {
            helper.edit('I1', '=FACT($H$22)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=FACT($H$22)"}');
            done();
        });
        it('FACT formula with cell Reference - 39->', (done: Function) => {
            helper.edit('I1', '=FACT($H$23)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT($H$23)"}');
            done();
        });
        it('FACT formula with cell Reference - 40->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet2!$M8)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(Sheet2!$M8)"}');
            done();
        });
        it('FACT formula with cell Reference - 41->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet2!F$10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(Sheet2!F$10)"}');
            done();
        });
        it('FACT formula with cell Reference - 42->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet2!A1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=FACT(Sheet2!A1)"}');
            done();
        });
        it('FACT formula with cell Reference - 43->', (done: Function) => {
            helper.edit('I1', '=FACT(Sheet2!M13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=FACT(Sheet2!M13)"}');
            done();
        });
    });

    describe('Reported LARGE-SMALL Formulae - Checking II ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: reportedBugData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('LARGE formula with cell Reference - 1->', (done: Function) => {
            helper.edit('L1', '=LARGE(B27:E27,B27)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('2.43');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":2.43,"formula":"=LARGE(B27:E27,B27)"}');
            done();
        });
        it('LARGE formula with cell Reference - 2->', (done: Function) => {
            helper.edit('L2', '=LARGE(F30:F36,3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":"#NUM!","formula":"=LARGE(F30:F36,3)"}');
            done();
        });
        it('LARGE formula with cell Reference - 3->', (done: Function) => {
            helper.edit('L3', '=LARGE(B29:B38,5)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":0,"formula":"=LARGE(B29:B38,5)"}');
            done();
        });
        it('LARGE formula with cell Reference - 4->', (done: Function) => {
            helper.edit('L4', '=LARGE(D12:D17,2)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"#NUM!","formula":"=LARGE(D12:D17,2)"}');
            done();
        });
        it('LARGE formula with cell Reference - 5->', (done: Function) => {
            helper.edit('L5', '=LARGE(C23:C27,D22)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(C23:C27,D22)"}');
            done();
        });
        it('LARGE formula with cell Reference - 6->', (done: Function) => {
            helper.edit('L6', '=LARGE(A28:F28,D22)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(A28:F28,D22)"}');
            done();
        });
        it('LARGE formula with cell Reference - 7->', (done: Function) => {
            helper.edit('L7', '=LARGE(D22:D23,2)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":"#NUM!","formula":"=LARGE(D22:D23,2)"}');
            done();
        });
        it('LARGE formula with cell Reference - 8->', (done: Function) => {
            helper.edit('L8', '=LARGE(D5:D11,"one")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(D5:D11,\\"one\\")"}');
            done();
        });
        it('LARGE formula with cell Reference - 9->', (done: Function) => {
            helper.edit('L9', '=LARGE(C23:C26,B16)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":4,"formula":"=LARGE(C23:C26,B16)"}');
            done();
        });
        it('LARGE formula with cell Reference - 10->', (done: Function) => {
            helper.edit('L10', '=LARGE(C25:C28,B24)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(C25:C28,B24)"}');
            done();
        });
        it('LARGE formula with cell Reference - 11->', (done: Function) => {
            helper.edit('L11', '=LARGE(D3:D11,TRUE)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('50');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[11])).toBe('{"value":50,"formula":"=LARGE(D3:D11,TRUE)"}');
            done();
        });
        it('LARGE formula with cell Reference - 12->', (done: Function) => {
            helper.edit('L12', '=LARGE(C24:C29,"TRUE")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(C24:C29,\\"TRUE\\")"}');
            done();
        });
        it('LARGE formula with cell Reference - 13->', (done: Function) => {
            helper.edit('L13', '=LARGE(H3:H11,"FALSE")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(H3:H11,\\"FALSE\\")"}');
            done();
        });
        it('LARGE formula with cell Reference - 14->', (done: Function) => {
            helper.edit('L14', '=LARGE(H5:H11," ")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(H5:H11,\\" \\")"}');
            done();
        });
        it('LARGE formula with cell Reference - 15->', (done: Function) => {
            helper.edit('L15', '=LARGE(E2:E6,B16)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[11])).toBe('{"value":30,"formula":"=LARGE(E2:E6,B16)"}');
            done();
        });
        it('LARGE formula with cell Reference - 16->', (done: Function) => {
            helper.edit('L16', '=LARGE(,)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[11])).toBe('{"value":"#NUM!","formula":"=LARGE(,)"}');
            done();
        });
        it('LARGE formula with cell Reference - 17->', (done: Function) => {
            helper.edit('L17', '=LARGE(E15:E18,2)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[11])).toBe('{"value":"#NAME?","formula":"=LARGE(E15:E18,2)"}');
            done();
        });
        it('LARGE formula with cell Reference - 18->', (done: Function) => {
            helper.edit('L18', '=LARGE(C14:C17,C18)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(C14:C17,C18)"}');
            done();
        });
        it('LARGE formula with cell Reference - 19->', (done: Function) => {
            helper.edit('L19', '=LARGE(C23:C28,C22)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(C23:C28,C22)"}');
            done();
        });
        it('LARGE formula with cell Reference - 20->', (done: Function) => {
            helper.edit('L20', '=LARGE(Hello,"hi")');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[11])).toBe('{"value":"#NAME?","formula":"=LARGE(Hello,\\"hi\\")"}');
            done();
        });
        it('LARGE formula with cell Reference - 21->', (done: Function) => {
            helper.edit('L21', '=LARGE("hello",hi)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[11])).toBe('{"value":"#VALUE!","formula":"=LARGE(\\"hello\\",hi)"}');
            done();
        });
        it('SMALL formula with cell Reference - 2->', (done: Function) => {
            helper.edit('M2', '=SMALL(F30:F36,3)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":"#NUM!","formula":"=SMALL(F30:F36,3)"}');
            done();
        });
        it('SMALL formula with cell Reference - 4->', (done: Function) => {
            helper.edit('M4', '=SMALL(D12:D17,2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":"#NUM!","formula":"=SMALL(D12:D17,2)"}');
            done();
        });
        it('SMALL formula with cell Reference - 5->', (done: Function) => {
            helper.edit('M5', '=SMALL(C23:C27,D22)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(C23:C27,D22)"}');
            done();
        });
        it('SMALL formula with cell Reference - 6->', (done: Function) => {
            helper.edit('M6', '=SMALL(A28:F28,D22)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(A28:F28,D22)"}');
            done();
        });
        it('SMALL formula with cell Reference - 7->', (done: Function) => {
            helper.edit('M7', '=SMALL(D22:D23,2)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":"#NUM!","formula":"=SMALL(D22:D23,2)"}');
            done();
        });
        it('SMALL formula with cell Reference - 8->', (done: Function) => {
            helper.edit('M8', '=SMALL(D5:D11,"one")');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(D5:D11,\\"one\\")"}');
            done();
        });
        it('SMALL formula with cell Reference - 9->', (done: Function) => {
            helper.edit('M9', '=SMALL(C23:C26,B16)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":1,"formula":"=SMALL(C23:C26,B16)"}');
            done();
        });
        it('SMALL formula with cell Reference - 10->', (done: Function) => {
            helper.edit('M10', '=SMALL(C25:C28,B24)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(C25:C28,B24)"}');
            done();
        });
        it('SMALL formula with cell Reference - 11->', (done: Function) => {
            helper.edit('M11', '=SMALL(D3:D11,TRUE)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('15');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[12])).toBe('{"value":15,"formula":"=SMALL(D3:D11,TRUE)"}');
            done();
        });
        it('SMALL formula with cell Reference - 12->', (done: Function) => {
            helper.edit('M12', '=SMALL(C24:C29,"TRUE")');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(C24:C29,\\"TRUE\\")"}');
            done();
        });
        it('SMALL formula with cell Reference - 13->', (done: Function) => {
            helper.edit('M13', '=SMALL(H3:H11,"FALSE")');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(H3:H11,\\"FALSE\\")"}');
            done();
        });
        it('SMALL formula with cell Reference - 14->', (done: Function) => {
            helper.edit('M14', '=SMALL(H5:H11," ")');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(H5:H11,\\" \\")"}');
            done();
        });
        it('SMALL formula with cell Reference - 15->', (done: Function) => {
            helper.edit('M15', '=SMALL(E2:E6,B16)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('6.5E-08');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[12])).toBe('{"value":"0.000000065","formula":"=SMALL(E2:E6,B16)"}');
            done();
        });
        it('SMALL formula with cell Reference - 16->', (done: Function) => {
            helper.edit('M16', '=SMALL(,)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[12])).toBe('{"value":"#NUM!","formula":"=SMALL(,)"}');
            done();
        });
        it('SMALL formula with cell Reference - 17->', (done: Function) => {
            helper.edit('M17', '=SMALL(E15:E18,2)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[12])).toBe('{"value":"#NAME?","formula":"=SMALL(E15:E18,2)"}');
            done();
        });
        it('SMALL formula with cell Reference - 18->', (done: Function) => {
            helper.edit('M18', '=SMALL(C14:C17,C18)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(C14:C17,C18)"}');
            done();
        });
        it('SMALL formula with cell Reference - 19->', (done: Function) => {
            helper.edit('M19', '=SMALL(C23:C28,C22)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(C23:C28,C22)"}');
            done();
        });
        it('SMALL formula with cell Reference - 20->', (done: Function) => {
            helper.edit('M20', '=SMALL(Hello,"hi")');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[12])).toBe('{"value":"#NAME?","formula":"=SMALL(Hello,\\"hi\\")"}');
            done();
        });
        it('SMALL formula with cell Reference - 21->', (done: Function) => {
            helper.edit('M21', '=SMALL("hello",hi)');
            expect(helper.invoke('getCell', [20, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[12])).toBe('{"value":"#VALUE!","formula":"=SMALL(\\"hello\\",hi)"}');
            done();
        });
    });

    describe('Reported CHAR formulae - Checking -> III ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CHAR formula with cell Reference - 18->', (done: Function) => {
            helper.edit('H1', '#REF!');
            helper.edit('H2', '"65"');
            helper.edit('H3', '"112"');
            helper.edit('H4', 'TRUE');
            helper.edit('H5', '103.32');
            helper.edit('H6', '104.32');
            helper.edit('H7', '105.32');
            helper.edit('H8', '106.32');
            helper.edit('H9', '107.32');
            helper.edit('H10', '108.32');
            helper.edit('H11', '109.32');
            helper.edit('H12', '110.32');
            helper.edit('H13', '#DIV/0!');
            helper.edit('H14', '#NUM!');
            helper.edit('H15', '"33"');
            helper.edit('H16', '4');
            done();
        });
        it('CHAR formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=CHAR(TRUE)');
            expect(1).toBe(1);
            done();
        });
        it('CHAR formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=CHAR(H1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#REF!","formula":"=CHAR(H1)"}');
            done();
        });
        it('CHAR formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=CHAR(H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR(H2)"}');
            done();
        });
        it('CHAR formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=CHAR(H3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR(H3)"}');
            done();
        });
        it('CHAR formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=CHAR(H4)');
            expect(1).toBe(1);
            done();
        });
        it('CHAR formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=CHAR(1:10)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR(1:10)"}');
            done();
        });
        it('CHAR formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=CHAR(98.8)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('b');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"b","formula":"=CHAR(98.8)"}');
            done();
        });
        it('CHAR formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=CHAR(105.3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('i');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"i","formula":"=CHAR(105.3)"}');
            done();
        });
        it('CHAR formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=CHAR(SMALL(H5:H12, H16))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('j');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"j","formula":"=CHAR(SMALL(H5:H12, H16))"}');
            done();
        });
        it('CHAR formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=CHAR(Sheet1!H13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#DIV/0!","formula":"=CHAR(Sheet1!H13)"}');
            done();
        });
        it('CHAR formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=CHAR(Sheet1!H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR(Sheet1!H2)"}');
            done();
        });
        it('CHAR formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=CHAR($H$14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=CHAR($H$14)"}');
            done();
        });
        it('CHAR formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=CHAR($H$15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR($H$15)"}');
            done();
        });
    });

    describe('HOUR Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '4/4/2020 5:00 AM' }] }, { cells: [{ value: '45321.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '4:00 PM' }] }, { cells: [{ value: '-5.4' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Hour formula->', (done: Function) => {
            helper.edit('J1', '=HOUR(C4);');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":3,"formula":"=HOUR(C4);"}');
            done();
        });
        it('Hour formula without ""->', (done: Function) => {
            helper.edit('J2', '=HOUR(02/03/2023 6:45 PM);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":"#VALUE!","formula":"=HOUR(02/03/2023 6:45 PM);"}');
            done();
        });
        it('Hour formula with input having only Date Value->', (done: Function) => {
            helper.edit('J3', '=HOUR("4/4/2022");');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toBe('=HOUR("4/4/2022");');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            done();
        });
        it('Hour formula with input having both Date and Time Value->', (done: Function) => {
            helper.edit('J4', '=HOUR("4/4/2022 3:32:44 AM");');
            expect(helper.getInstance().sheets[0].rows[3].cells[9].formula).toBe('=HOUR("4/4/2022 3:32:44 AM");');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('3');
            done();
        });
        it('Hour formula with input having both Date and Time Value->', (done: Function) => {
            helper.edit('J5', '=HOUR("01/12/2023 3:32:44 PM");');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('15');
            done();
        });
        it('Hour formula with input having both Date and Time Value without seconds->', (done: Function) => {
            helper.edit('J6', '=HOUR("01/12/2023 4:32 AM");');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('4');
            done();
        });
        it('Hour formula with input having both Date and Time Value without seconds->', (done: Function) => {
            helper.edit('J7', '=HOUR("01/12/2023 4:32 PM");');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('16');
            done();
        });
        it('Hour formula with input having both Date and Time Value as 24 hour format->', (done: Function) => {
            helper.edit('J8', '=HOUR("01/12/2023 21:23:44");');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('21');
            done();
        });
        it('Hour formula with nested Today formula as input->', (done: Function) => {
            helper.edit('J9', '=HOUR(TODAY());');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0');
            done();
        });
        it('Hour formula with 12 hours Time value as input->', (done: Function) => {
            helper.edit('J11', '=HOUR("7:32:44 AM");');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('7');
            done();
        });
        it('Hour formula with 12 hours Time value as input->', (done: Function) => {
            helper.edit('J12', '=HOUR("7:32:44 PM");');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('19');
            done();
        });
        it('Hour formula with 24 hours Time value as input->', (done: Function) => {
            helper.edit('J13', '=HOUR("05:30:44");');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('5');
            done();
        });
        it('Hour formula with 24 hours Time value as input->', (done: Function) => {
            helper.edit('J14', '=HOUR("15:32:44");');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('15');
            done();
        });
        it('Hour formula with HH:MM AM/PM Time value as input->', (done: Function) => {
            helper.edit('J15', '=HOUR("04:32 AM");');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('4');
            done();
        });
        it('Hour formula with HH:MM AM/PM Time value as input->', (done: Function) => {
            helper.edit('J16', '=HOUR("04:32 PM");');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('16');
            done();
        });
        it('Hour formula with HH:MM Time value as 24 hour format as input->', (done: Function) => {
            helper.edit('J17', '=HOUR("02:33");');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('2');
            done();
        });
        it('Hour formula with HH:MM Time value as 24 hour format as input->', (done: Function) => {
            helper.edit('J18', '=HOUR("21:33");');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('21');
            done();
        });
        it('Hour formula with h AM/PM Time format as input->', (done: Function) => {
            helper.edit('J19', '=HOUR("7 PM");');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('19');
            done();
        });
        it('Hour formula with logical value as input->', (done: Function) => {
            helper.edit('K1', 'TRUE');
            helper.edit('K2', 'FALSE');
            helper.edit('K3', '=HOUR(K1)')
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0');
            helper.edit('K4', '=HOUR(K2)')
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('0');
            helper.edit('K5', '=HOUR(TRUE)')
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('0');
            helper.edit('K6', '=HOUR(FALSE)')
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('0');
            helper.edit('K7', '=HOUR("TRUE")')
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#VALUE!');
            helper.edit('K8', '=HOUR("FALSE")')
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('Hour formula with expression value as input->', (done: Function) => {
            helper.edit('K9', '=HOUR(2+0.5)')
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('12');
            helper.edit('K10', '=HOUR(5-3.62)')
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('9');
            helper.edit('K11', '=HOUR(1/12)')
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('2');
            helper.edit('K12', '=HOUR(0.38*4)')
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('12');
            helper.edit('K13', '=HOUR(0-0.5)')
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('#NUM!');
            done();
        });
        it('Hour formula with nested formulas->', (done: Function) => {
            helper.edit('K14', '=HOUR(MINUTE(466.4547))')
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('0');
            helper.edit('K15', '=HOUR(SECOND(5545.46))')
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('0');
            helper.edit('K16', '=TIME(HOUR(0.34),45,32)')
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('8:45 AM');
            helper.edit('K17', '=HOUR(WEEKDAY(45323,2)+0.56)')
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('13');
            helper.edit('K18', '=HOUR(DATE(2020,3,18))')
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('0');
            helper.edit('K19', '=HOUR(DAY(45324))')
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('0');
            done();
        });
        it('Hour formula with cell reference as arguments->', (done: Function) => {
            helper.edit('M1', '31-Jan-2019');
            helper.edit('M2', '=HOUR(M1)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('0');
            helper.edit('M3', '"31-Jan-2020"');
            helper.edit('M4', '=HOUR(M3)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#VALUE!');
            helper.edit('M5', '31-Jan-2019 3:00 PM');
            helper.edit('M6', '=HOUR(M5)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('15');
            done();
        });
        it('Hour formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M9', '=HOUR($B$8)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('0');
            helper.edit('M10', '=HOUR($C$7)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('10');
            helper.edit('M11', '=HOUR($D$5)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('0');
            helper.edit('M12', '=HOUR($E$3)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('0');
            helper.edit('M13', '=HOUR($F$6)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('0');
            helper.edit('M14', '=HOUR($A$5)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('Hour formula with Sheet references as arguments->', (done: Function) => {
            helper.edit('N1', '=HOUR(Sheet2!A1)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('5');
            helper.edit('N2', '=HOUR(Sheet1!E3)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('0');
            helper.edit('N3', '=HOUR(Sheet2!A4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('16');
            helper.edit('N4', '=HOUR(Sheet1!C10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('11');
            done();
        });
        it('Hour formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=HOUR(Sheet2!$A$3)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#VALUE!');
            helper.edit('N6', '=HOUR(Sheet1!$E$3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('0');
            helper.edit('N7', '=HOUR(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('13');
            helper.edit('N8', '=HOUR(Sheet1!$C$4)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('3');
            helper.edit('N9', '=HOUR(Sheet2!$A$5)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('#NUM!');
            helper.edit('N10', '=HOUR(Sheet2!$A$6)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('10');
            done();
        });
        it('Hour formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=HOUR();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=HOUR();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O2', '=HOUR("0.45");');
            done();
        });
        it('Hour formula with more than 1 input for error checking->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=HOUR(C3,C4);';
            helper.getElement('.e-spreadsheet-edit').textContent = '=HOUR(C3,C4);';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O3', '=HOUR("4/4/2022 3:32:44 AM");');
            done();
        });
    });

    describe('Reported day formula - Checking -> III ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DAY formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=DAY(10000000)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAY(10000000)"}');
            done();
        });
        it('DAY formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I2', '=DAY(DATEVALUE("08/23/2023"))');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('23');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":23,"formula":"=DAY(DATEVALUE(\\"08/23/2023\\"))"}');
            done();
        });
        it('DAY formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I3', '=DAY("APR-07-2020")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":7,"formula":"=DAY(\\"APR-07-2020\\")"}');
            done();
        });
        it('DAY formula with cell Reference - 4->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'General', refersTo: 'I4'});
            helper.edit('I4', '4/7/2020');
            helper.edit('I5', '=DAY(I4)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":7,"formula":"=DAY(I4)"}');
            done();
        });
    });

    describe('Reported DATEVALUE formulae - Checking -> III ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DATEVALUE formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=DATEVALUE("04/23/2021")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('44309');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"44309","formula":"=DATEVALUE(\\"04/23/2021\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I2', '=DATEVALUE("8/22/2011")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('40777');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"40777","formula":"=DATEVALUE(\\"8/22/2011\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I3', '=DATEVALUE("07-APR-2021")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE(\\"07-APR-2021\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I4', '=DATEVALUE("2023/03/13")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('44998');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"44998","formula":"=DATEVALUE(\\"2023/03/13\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I5', '=DATEVALUE("03-14-2021")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('44269');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"44269","formula":"=DATEVALUE(\\"03-14-2021\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 6->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'J2']);
            helper.edit('J2', '04/23/2021');
            helper.edit('I6', '=DATEVALUE(J2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('44309');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"44309","formula":"=DATEVALUE(J2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 7->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'J3']);
            helper.edit('J3', '8/22/2011');
            helper.edit('I7', '=DATEVALUE(J3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('40777');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"40777","formula":"=DATEVALUE(J3)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 8->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'J4']);
            helper.edit('J4', '07-APR-2021');
            helper.edit('I8', '=DATEVALUE(J4)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE(J4)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 9->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'J5']);
            helper.edit('J5', '03-14-2021');
            helper.edit('I9', '=DATEVALUE(J5)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('44269');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":"44269","formula":"=DATEVALUE(J5)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 10->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N1']);
            helper.edit('N1', '04/23/2021');
            helper.edit('I10', '=DATEVALUE(N1)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('44309');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":"44309","formula":"=DATEVALUE(N1)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 11->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', '8/22/2011');
            helper.edit('I11', '=DATEVALUE(N2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('40777');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"40777","formula":"=DATEVALUE(N2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 12->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N3']);
            helper.edit('N3', '07-APR-2021');
            helper.edit('I12', '=DATEVALUE(N3)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE(N3)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 13->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N4']);
            helper.edit('N4', '03-14-2021');
            helper.edit('I13', '=DATEVALUE(N4)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('44269');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":"44269","formula":"=DATEVALUE(N4)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I14', '=DATEVALUE(Hi)');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[8])).toBe('{"value":"#NAME?","formula":"=DATEVALUE(Hi)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 15->', (done: Function) => {
            helper.edit('E16', '#DIV/0!');
            helper.edit('I15', '=DATEVALUE(E16)');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[8])).toBe('{"value":"#DIV/0!","formula":"=DATEVALUE(E16)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 16->', (done: Function) => {
            helper.edit('E17', '#NUM!');
            helper.edit('I16', '=DATEVALUE(E17)');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":"#NUM!","formula":"=DATEVALUE(E17)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 17->', (done: Function) => {
            helper.edit('E18', '#REF!');
            helper.edit('I17', '=DATEVALUE(E18)');
            expect(helper.invoke('getCell', [16, 8]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[8])).toBe('{"value":"#REF!","formula":"=DATEVALUE(E18)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 18->', (done: Function) => {
            helper.edit('I18', '"=DATEVALUE()');
            expect(helper.invoke('getCell', [17, 8]).textContent).toBe('"=DATEVALUE()');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[8])).toBe('{"value":"\\"=DATEVALUE()"}');
            done();
        });
        // it('DATEVALUE formula with cell Reference - 19->', (done: Function) => {
        //     helper.edit('I19', '=MONTH(DATEVALUE("03/23/2023"))');
        //     expect(helper.invoke('getCell', [18, 8]).textContent).toBe('3');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[8])).toBe('{"value":3,"formula":"=MONTH(DATEVALUE(\\"03/23/2023\\"))"}');
        //     done();
        // });
        it('DATEVALUE formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I20', '=DAY(DATEVALUE("05/30/2021"))');
            expect(helper.invoke('getCell', [19, 8]).textContent).toBe('30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[8])).toBe('{"value":30,"formula":"=DAY(DATEVALUE(\\"05/30/2021\\"))"}');
            done();
        });
        // it('DATEVALUE formula with cell Reference - 21->', (done: Function) => {
        //     helper.edit('I21', '=DATE(2023,MONTH(DATEVALUE("02/28/2020")),23)');
        //     expect(helper.invoke('getCell', [20, 8]).textContent).toBe('2/23/2023');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[8])).toBe('{"value":"2/23/2023","formula":"=DATE(2023,MONTH(DATEVALUE(\\"02/28/2020\\")),23)"}');
        //     done();
        // });
        it('DATEVALUE formula with cell Reference - 22->', (done: Function) => {
            helper.edit('I22', '=WEEKDAY(DATEVALUE("02/27/2023"),2)');
            expect(helper.invoke('getCell', [21, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[21].cells[8])).toBe('{"value":1,"formula":"=WEEKDAY(DATEVALUE(\\"02/27/2023\\"),2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I23', '=EDATE(DATEVALUE("01/01/2024"),1)');
            expect(helper.invoke('getCell', [22, 8]).textContent).toBe('45323');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[22].cells[8])).toBe('{"value":"45323","formula":"=EDATE(DATEVALUE(\\"01/01/2024\\"),1)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 24->', (done: Function) => {
            helper.edit('I24', '=EOMONTH(DATEVALUE("02/03/2023"),2)');
            expect(helper.invoke('getCell', [23, 8]).textContent).toBe('45046');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[8])).toBe('{"value":"45046","formula":"=EOMONTH(DATEVALUE(\\"02/03/2023\\"),2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 25->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N6']);
            helper.edit('N6', '04/23/2021');
            helper.edit('I25', '=DATEVALUE($N$6)');
            expect(helper.invoke('getCell', [24, 8]).textContent).toBe('44309');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[24].cells[8])).toBe('{"value":"44309","formula":"=DATEVALUE($N$6)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 26->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N7']);
            helper.edit('N7', '07-APR-2021');
            helper.edit('I26', '=DATEVALUE($N$7)');
            expect(helper.invoke('getCell', [25, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[25].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE($N$7)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 27->', (done: Function) => {
            helper.edit('I27', '=DATEVALUE(Sheet1!N7)');
            expect(helper.invoke('getCell', [26, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[26].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE(Sheet1!N7)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 28->', (done: Function) => {
            helper.edit('I28', '=DATEVALUE(Sheet1!E16)');
            expect(helper.invoke('getCell', [27, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[27].cells[8])).toBe('{"value":"#DIV/0!","formula":"=DATEVALUE(Sheet1!E16)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 29->', (done: Function) => {
            helper.edit('I29', '=DATEVALUE(Sheet1!N3)');
            expect(helper.invoke('getCell', [28, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[28].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE(Sheet1!N3)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 30->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N9']);
            helper.edit('N9', '8/22/2011');
            helper.edit('I30', '=DATEVALUE(Sheet1!$N$9)');
            expect(helper.invoke('getCell', [29, 8]).textContent).toBe('40777');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[29].cells[8])).toBe('{"value":"40777","formula":"=DATEVALUE(Sheet1!$N$9)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 31->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N10']);
            helper.edit('N10', '03-14-2021');
            helper.edit('I31', '=DATEVALUE(Sheet1!$N$10)');
            expect(helper.invoke('getCell', [30, 8]).textContent).toBe('44269');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[30].cells[8])).toBe('{"value":"44269","formula":"=DATEVALUE(Sheet1!$N$10)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 32->', (done: Function) => {
            helper.edit('I32', '=DATEVALUE(Sheet1!$N$7)');
            expect(helper.invoke('getCell', [31, 8]).textContent).toBe('44293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[31].cells[8])).toBe('{"value":"44293","formula":"=DATEVALUE(Sheet1!$N$7)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 33->', (done: Function) => {
            helper.edit('I33', '=DATEVALUE(Sheet1!$N$9)');
            expect(helper.invoke('getCell', [32, 8]).textContent).toBe('40777');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[32].cells[8])).toBe('{"value":"40777","formula":"=DATEVALUE(Sheet1!$N$9)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 34->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'One', refersTo: 'N10'});
            helper.edit('I34', '=DATEVALUE(One)');
            expect(helper.invoke('getCell', [33, 8]).textContent).toBe('44269');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"44269","formula":"=DATEVALUE(One)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 35->', (done: Function) => {
            helper.edit('I34', '=DATEVALUE("25-JUN")');
            expect(helper.invoke('getCell', [33, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE(\\"25-JUN\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 36->', (done: Function) => {
            helper.edit('I34', '=DATEVALUE("25-Jun")');
            expect(helper.invoke('getCell', [33, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE(\\"25-Jun\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 37->', (done: Function) => {
            helper.edit('I34', '=DATEVALUE("APR-07-2020")');
            expect(helper.invoke('getCell', [33, 8]).textContent).toBe('43928');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"43928","formula":"=DATEVALUE(\\"APR-07-2020\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 38->', (done: Function) => {
            helper.edit('I34', '=DATEVALUE("JUL-08")');
            expect(helper.invoke('getCell', [33, 8]).textContent).toBe('37080');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"37080","formula":"=DATEVALUE(\\"JUL-08\\")"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 39->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', '25-JUN');
            helper.edit('I11', '=DATEVALUE(N2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE(N2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 40->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', '25-Jun');
            helper.edit('I11', '=DATEVALUE(N2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE(N2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 41->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', 'JUL-08');
            helper.edit('I11', '=DATEVALUE(N2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37080');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37080","formula":"=DATEVALUE(N2)"}');
            done();
        });
        // it('DATEVALUE formula with cell Reference - 42->', (done: Function) => {
        //     helper.edit('I34', '=MONTH(DATEVALUE("03/23/2023"))');
        //     expect(helper.invoke('getCell', [33, 8]).textContent).toBe('3');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"3","formula":"=MONTH(DATEVALUE(\\"03/23/2023\\"))"}');
        //     done();
        // });
        // it('DATEVALUE formula with cell Reference - 43->', (done: Function) => {
        //     helper.edit('I34', '=DATE(2023,MONTH(DATEVALUE("02/28/2020")),23)');
        //     expect(helper.invoke('getCell', [33, 8]).textContent).toBe('2/23/2023');
        //     expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"2/23/2023","formula":"=DATE(2023,MONTH(DATEVALUE(\\"02/28/2020\\")),23)"}');
        //     done();
        // });
        it('DATEVALUE formula with cell Reference - 44->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', '25-JUN');
            helper.edit('I11', '=DATEVALUE($N$2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE($N$2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 45->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', '25-Jun');
            helper.edit('I11', '=DATEVALUE(Sheet1!N2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE(Sheet1!N2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 46->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', 'JUL-08');
            helper.edit('I11', '=DATEVALUE(Sheet1!N2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37080');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37080","formula":"=DATEVALUE(Sheet1!N2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 47->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'N2']);
            helper.edit('N2', 'JUL-08');
            helper.edit('I11', '=DATEVALUE(Sheet1!$N$2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('37080');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"37080","formula":"=DATEVALUE(Sheet1!$N$2)"}');
            done();
        });
        it('DATEVALUE formula with cell Reference - 48->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Hello', refersTo: 'N2'});
            helper.edit('N2', '25-JUN');
            helper.edit('I34', '=DATEVALUE(Hello)');
            expect(helper.invoke('getCell', [33, 8]).textContent).toBe('37067');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[33].cells[8])).toBe('{"value":"37067","formula":"=DATEVALUE(Hello)"}');
            done();
        });
    });

    describe('Reported MATCH Formulae - Checking II ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: reportedBugData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('MATCH formula with cell Reference - 1->', (done: Function) => {
            helper.edit('N1', '=MATCH(10,C23:C28,1)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":6,"formula":"=MATCH(10,C23:C28,1)"}');
            done();
        });
        it('MATCH formula with cell Reference - 2->', (done: Function) => {
            helper.edit('N2', '=MATCH(2,D2:D5,1)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('#N/A');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":"#N/A","formula":"=MATCH(2,D2:D5,1)"}');
            done();
        });
        it('MATCH formula with cell Reference - 3->', (done: Function) => {
            helper.edit('N3', '=MATCH("Formal",A5:A10,1)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":6,"formula":"=MATCH(\\"Formal\\",A5:A10,1)"}');
            done();
        });
        it('MATCH formula with cell Reference - 4->', (done: Function) => {
            helper.edit('H26', 'Yes');
            helper.edit('H27', 'No');
            helper.edit('H28', 'No');
            helper.edit('H29', 'No');
            helper.edit('N4', '=MATCH("Yes",H26:H29,1)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[13])).toBe('{"value":1,"formula":"=MATCH(\\"Yes\\",H26:H29,1)"}');
            done();
        });
        it('MATCH formula with cell Reference - 5->', (done: Function) => {
            helper.edit('N5', '=MATCH("30",D14:D18,1)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[13])).toBe('{"value":5,"formula":"=MATCH(\\"30\\",D14:D18,1)"}');
            done();
        });
        it('MATCH formula with cell Reference - 6->', (done: Function) => {
            helper.edit('N6', '=MATCH("TRUE",B24:B25,0)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[13])).toBe('{"value":1,"formula":"=MATCH(\\"TRUE\\",B24:B25,0)"}');
            done();
        });
        it('MATCH formula with cell Reference - 7->', (done: Function) => {
            helper.edit('D34', '300.00%');
            helper.edit('D35', '10.00%');
            helper.edit('D36', '1200.00%');
            helper.edit('D37', '900.00%');
            helper.edit('N7', '=MATCH(E16,D34:D37,1)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[13])).toBe('{"value":"#DIV/0!","formula":"=MATCH(E16,D34:D37,1)"}');
            done();
        });
        it('MATCH formula with cell Reference - 8->', (done: Function) => {
            helper.edit('N8', '=MATCH(D7,D4:D9,D10)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[13])).toBe('{"value":4,"formula":"=MATCH(D7,D4:D9,D10)"}');
            done();
        });
        it('MATCH formula with cell Reference - 0->', (done: Function) => {
            helper.edit('B34', 'TRUE');
            helper.edit('B35', 'FALSE');
            helper.edit('I35', '6/25/2023');
            helper.edit('I36', '7/27/2014');
            helper.edit('I33', '4/7/2021');
            helper.edit('I32', '7/8/2023');
            helper.edit('N9', '=MATCH(E16,D34:D37,1)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[13])).toBe('{"value":"#DIV/0!","formula":"=MATCH(E16,D34:D37,1)"}');
            done();
        });
    });

    describe('EDATE Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },]
                }, {
                    rows: [
                        { cells: [{ value: '4/4/2020' }] }, { cells: [{ value: '45321' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '45673' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('EDATE Formula with cell Reference->', (done: Function) => {
            helper.edit('J1', '=EDATE(B5,3)');
            const cellModel: CellModel = helper.getInstance().sheets[0].rows[0].cells[9];
            expect(cellModel.value).toBe('42056');
            expect(cellModel.formula).toBe('=EDATE(B5,3)');
            expect(cellModel.format).toBeUndefined();
            const cellEle: HTMLElement = helper.invoke('getCell', [0, 9]);
            expect(cellEle.textContent).toBe('42056');
            helper.invoke('numberFormat', [getFormatFromType('ShortDate'), 'J1']);
            expect(cellModel.format).toBe('m/d/yyyy');
            expect(cellEle.textContent).toBe('2/21/2015');
            helper.invoke('updateCell', [{ value: '10/28/2014' }, 'B5']);
            expect(cellModel.value).toBe('42032');
            expect(cellEle.textContent).toBe('1/28/2015');
            helper.edit('J1', '=EDATE("02/04/2014",1)');
            expect(cellModel.value).toBe('41702');
            expect(cellEle.textContent).toBe('3/4/2014');
            helper.invoke('numberFormat', [getFormatFromType('Number'), 'J1']);
            expect(cellModel.format).toBe('0.00');
            expect(cellEle.textContent).toBe('41702.00');
            helper.invoke('numberFormat', [getFormatFromType('General'), 'J1']);
            expect(cellModel.format).toBe('General');
            expect(cellEle.textContent).toBe('41702');
            helper.edit('J1', '=EDATE("8/27/1994",0)-5');
            expect(cellModel.value).toBe('34568');
            expect(cellEle.textContent).toBe('34568');
            helper.edit('J1', '=EDATE("2/21/1996",-5)');
            expect(cellModel.value).toBe('34963');
            expect(cellEle.textContent).toBe('34963');
            helper.edit('J1', '=EDATE(A13,0)');
            expect(cellModel.value).toBe('0');
            expect(cellEle.textContent).toBe('0');
            helper.edit('J1', '=EDATE(A13,3)');
            expect(cellModel.value).toBe('91');
            expect(cellEle.textContent).toBe('91');
            helper.edit('J1', '=EDATE(B10,B13)');
            expect(cellModel.value).toBe('41829');
            expect(cellEle.textContent).toBe('41829');
            helper.edit('J1', '=EDATE("2345",-2)');
            expect(cellModel.value).toBe('2284');
            expect(cellEle.textContent).toBe('2284');
            helper.edit('J1', '=EDATE(10,3)');
            expect(cellModel.value).toBe('101');
            expect(cellEle.textContent).toBe('101');
            helper.edit('J1', '=EDATE(DATE(2020,3,10),2)');
            expect(cellModel.value).toBe('43961');
            expect(cellEle.textContent).toBe('43961');
            done();
        });
        it('EDATE Formula error cases->', (done: Function) => {
            // With secnd argument (number) as string value
            helper.edit('J4', '=EDATE(B5,A6)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"#VALUE!","formula":"=EDATE(B5,A6)"}');
            // With first argument (date) as string value
            helper.edit('J5', '=EDATE(A6,1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"#VALUE!","formula":"=EDATE(A6,1)"}');
            // Without first argument (date)
            helper.edit('J6', '=EDATE(,1)');
            const cellEle: HTMLElement = helper.invoke('getCell', [5, 9]);
            expect(cellEle.textContent).toBe('#N/A');
            const cellModel: CellModel = helper.getInstance().sheets[0].rows[5].cells[9];
            expect(JSON.stringify(cellModel)).toBe('{"value":"#N/A","formula":"=EDATE(,1)"}');
            // With first argument (date) as empty value
            helper.edit('J6', '=EDATE("",2)');
            expect(cellEle.textContent).toBe('#VALUE!');
            expect(cellModel.value).toBe('#VALUE!');
            // Without second argument (number)
            helper.edit('J6', '=EDATE(B4,)');
            expect(cellEle.textContent).toBe('#N/A');
            expect(cellModel.value).toBe('#N/A');
            // With second argument (number) as empty value
            helper.edit('J6', '=EDATE(B7,"")');
            expect(cellEle.textContent).toBe('#VALUE!');
            expect(cellModel.value).toBe('#VALUE!');
            // Without both arguments
            helper.edit('J6', '=EDATE(,)');
            expect(cellEle.textContent).toBe('#N/A');
            expect(cellModel.value).toBe('#N/A');
            // First argument (date) as string value
            helper.edit('J6', '=EDATE("Test",1)');
            expect(cellEle.textContent).toBe('#VALUE!');
            expect(cellModel.value).toBe('#VALUE!');
            // Second argument (number) as string value
            helper.edit('J6', '=EDATE("3/18/1994","Test")');
            expect(cellEle.textContent).toBe('#VALUE!');
            expect(cellModel.value).toBe('#VALUE!');
            // Invalid date syntax
            helper.edit('J6', '=EDATE(2/2/2020,0)');
            expect(cellEle.textContent).toBe('0');
            expect(cellModel.value).toBe('0');
            done();
        });
        it('EDATE Formula having floating number as arguments ->', (done: Function) => {
            helper.edit('J7', '=EDATE(145.322,3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('237');
            helper.edit('J8', '=EDATE(45632,3.56)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('45722');
            helper.edit('J9', '=EDATE(43421.657,2.78)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('43482');
            done();
        });
        it('EDATE Formula having whole number as arguments->', (done: Function) => {
            helper.edit('J10', '=EDATE(236,2)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('297');
            helper.edit('J11', '=EDATE(42314,12)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('42680');
            done();
        });
        it('EDATE Formula with negative value as inputs->', (done: Function) => {
            helper.edit('J12', '=EDATE(-43263,0)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#NUM!');
            helper.edit('J13', '=EDATE(45631,-3)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('45540');
            helper.edit('J14', '=EDATE(-44671,-2)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#NUM!');
            helper.edit('J15', '=EDATE("31-Jan-2019",-2)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('43434');
            done();
        });
        it('EDATE Formula with zero as arguments->', (done: Function) => {
            helper.edit('J16', '=EDATE(0,0)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('0');
            helper.edit('J17', '=EDATE(3,0)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('3');
            helper.edit('J18', '=EDATE(0,4)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('121');
            done();
        });
        it('EDATE Formula with first argument as different format of date->', (done: Function) => {
            helper.edit('K1', '=EDATE("31-Jan-2019",1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('43524');
            helper.edit('K2', '=EDATE("1/4/2022",5)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('44716');
            helper.edit('K3', '=EDATE(1/31/2023,4)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('121');
            helper.edit('K4', '=EDATE("29-Feb-2020",12)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('44255');
            helper.edit('K5', '=EDATE("31/1/2019",1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#VALUE!');
            helper.edit('K6', '=EDATE("Jan-31-2019",1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('EDATE Formula with second argument as different types->', (done: Function) => {
            helper.edit('K7', '=EDATE("31-Jan-2019","one")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#VALUE!');
            helper.edit('K8', '=EDATE("31-Jan-2019",one)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#NAME?');
            helper.edit('K9', '=EDATE("31-Jan-2019","2")');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('43555');
            helper.edit('K10', '=EDATE(46535,3)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('46627');
            helper.edit('K11', '=EDATE("29-Feb-2020",-12)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('43524');
            helper.edit('K12', '=EDATE("27-Feb-2019",-0.12)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('43523');
            done();
        });
        it('EDATE Formula with logical values as arguments->', (done: Function) => {
            helper.edit('K13', '=EDATE(True,2)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('#VALUE!');
            helper.edit('K14', '=EDATE(False,2)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#VALUE!');
            helper.edit('K15', '=EDATE(43543,True)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#VALUE!');
            helper.edit('K16', '=EDATE(43543,False)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#VALUE!');
            helper.edit('K17', '=EDATE(TRUE,TRUE)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('#VALUE!');
            helper.edit('K18', '=EDATE(FALSE,FALSE)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('#VALUE!');
            helper.edit('K19', '=EDATE(43543,"TRUE")');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('#VALUE!');
            helper.edit('K20', '=EDATE(43543,"FALSE")');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('#VALUE!');
            helper.edit('K21', '=EDATE(43543,I2)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('#VALUE!');
            helper.edit('K22', '=EDATE("31-Mar-2012",I4)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('#VALUE!');
            helper.edit('K23', '=EDATE(I3,I4)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('EDATE Formula with empty arguments->', (done: Function) => {
            helper.edit('L1', '=EDATE(,)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('#N/A');
            helper.edit('L2', '=EDATE(,3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('#N/A');
            helper.edit('L3', '=EDATE(43535,)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#N/A');
            helper.edit('L4', '=EDATE(43213,"")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#VALUE!');
            helper.edit('L5', '=EDATE("",3)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            helper.edit('L6', '=EDATE(A20,3)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('91');
            helper.edit('L7', '=EDATE(43564,A22)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('43564');
            helper.edit('L8', '=EDATE(A20,A22)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('0');
            done();
        });
        it('EDATE Formula with expression as arguments->', (done: Function) => {
            helper.edit('L9', '=EDATE(45682+20,1)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('45730');
            helper.edit('L10', '=EDATE(45209,2*3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('45392');
            helper.edit('L11', '=EDATE(45732-4,4/2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('45789');
            helper.edit('L12', '=EDATE(B7+1,H2-1)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('42117');
            helper.edit('L13', '=EDATE(B7+1,H2+H3)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('43669');
            done();
        });
        it('EDATE Formula with invalid arguments->', (done: Function) => {
            helper.edit('L14', '=EDATE(43212," ")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#VALUE!');
            helper.edit('L15', '=EDATE(43542,one)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#NAME?');
            helper.edit('L16', '=EDATE("31.01.2019",2)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#VALUE!');
            helper.edit('L17', '=EDATE(-3,1)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('#NUM!');
            helper.edit('L18', '=EDATE("22-Feb-2012",)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('#N/A');
            done();
        });
        it('EDATE Formula with cell reference as arguments->', (done: Function) => {
            helper.edit('M1', '31-Jan-2019');
            helper.edit('M2', '=EDATE(M1,1)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('43524');
            helper.edit('M3', '"31-Jan-2020"');
            helper.edit('M4', '=EDATE(M3,2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#VALUE!');
            helper.edit('M5', '"Jan-31-2019"');
            helper.edit('M6', '=EDATE(M5,3)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            helper.edit('M7', '3');
            helper.edit('M8', '=EDATE("31-Jan-2020",M7)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('43951');
            done();
        });
        it('EDATE Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M9', '=EDATE($B$8,$G$8)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('41763');
            helper.edit('M10', '=EDATE($C$6,$B$8)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('1268428');
            helper.edit('M11', '=EDATE($D$5,$E$4)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('471');
            helper.edit('M12', '=EDATE($E$3,$F$5)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('9162');
            helper.edit('M13', '=EDATE($F$6,$B$8)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('1268727');
            helper.edit('M14', '=EDATE($A$5,$E$4)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('EDATE Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=EDATE(Sheet2!A3,Sheet1!G2)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('#VALUE!');
            helper.edit('N2', '=EDATE(Sheet1!E3,Sheet2!A3)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('#VALUE!');
            helper.edit('N3', '=EDATE(Sheet2!A6,Sheet2!A4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('1393711');
            helper.edit('N4', '=EDATE(Sheet1!D6,Sheet1!I10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('30');
            done();
        });
        it('EDATE Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=EDATE(Sheet2!$A$3,Sheet1!$G$2)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#VALUE!');
            helper.edit('N6', '=EDATE(Sheet1!$E$3,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('#VALUE!');
            helper.edit('N7', '=EDATE(Sheet2!$A$4,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('45763');
            helper.edit('N8', '=EDATE(Sheet1!$D$6,Sheet1!$I$10)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('30');
            helper.edit('N9', '=EDATE(Sheet2!$A$4,$G$2)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('45704');
            helper.edit('N10', '=EDATE(E3,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('121');
            done();
        });
        it('EDATE Formula for no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N11');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=EDATE()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=EDATE()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N11', '=EDATE(4321,1)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('4352');
            done();
        });
    });

    describe('WeekDay Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '43925.21' }] }, { cells: [{ value: '45321.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '44016' }] }, { cells: [{ value: '-5.4' }] }, { cells: [{ value: '3567.45' }] },
                        { cells: [{ value: '2' }] }, { cells: [{ value: '4' }] }, { cells: [{ value: '15' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('WEEKDAY formula with return type ', (done: Function) => { 
            helper.edit('I1', '=WEEKDAY(EDATE(F3,F4),1);');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            helper.edit('I2', '=WEEKDAY(EDATE(F3,F4),2);');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('7');
            helper.edit('I3', '=WEEKDAY(EDATE(F3,F4),3);');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('6');
            helper.edit('I4', '=WEEKDAY(EDATE(F3,F4),11);');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('7');
            helper.edit('I5', '=WEEKDAY(EDATE(F3,F4),12);');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('6');
            helper.edit('I6', '=WEEKDAY(EDATE(F3,F4),13);');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('5');
            helper.edit('I7', '=WEEKDAY(EDATE(F3,F4),14);');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('4');
            helper.edit('I8', '=WEEKDAY(EDATE(F3,F4),15);');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('3');
            helper.edit('I9', '=WEEKDAY(EDATE(F3,F4),16);');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('2');
            helper.edit('I10', '=WEEKDAY(EDATE(F3,F4),17);');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('1');
            done();
        });
        it('WEEKDAY formula with invalid return type', (done: Function) => {
            helper.edit('I11', '=WEEKDAY(EDATE(F3,F4),4);');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('#NUM!');
            helper.edit('I12', '=WEEKDAY(EDATE(F3,F4),18);');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#NUM!');
            done();
        });
        it('WEEKDAY formula with string return type', (done: Function) => {
            helper.edit('I13', '=WEEKDAY(EDATE(F3,F4),"3");');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('6');
            helper.edit('I14', '=WEEKDAY(EDATE(F3,F4),"");');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('#VALUE!');
            helper.edit('I15', '=WEEKDAY(EDATE(F3,F4),"hfh");');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('WEEKDAY formula with invalid first argument', (done: Function) => {
            helper.edit('J1', '=WEEKDAY("er",4);');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=WEEKDAY("",1);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('WEEKDAY formula with cell reference', (done: Function) => {
            helper.edit('J3', '=WEEKDAY(B2,2);');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('5');
            helper.edit('J4', '=WEEKDAY(A5,1);');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#VALUE!');
            helper.edit('J5', '=WEEKDAY(45,G8);');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1');
            helper.edit('J6', '=WEEKDAY(F3,G5);');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('4');
            done();
        });
        it('WEEKDAY formula without first argument', (done: Function) => {
            helper.edit('J7', '=WEEKDAY(,2);');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('6');
            helper.edit('J9', '=WEEKDAY("",G8);');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#VALUE!');
            helper.edit('J10', '=WEEKDAY(45,"");');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('WEEKDAY formula with date as argument', (done: Function) => {
            helper.edit('J11', '=WEEKDAY("6/20/2023");');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('3');
            helper.edit('J13', '=WEEKDAY(,);');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('#NUM!');
            done();
        });
        it('WEEKDAY formula without second argument', (done: Function) => {
            helper.edit('J14', '=WEEKDAY(4,);');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#NUM!');
            helper.edit('J15', '=WEEKDAY(G8,K10);');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#NUM!');
            done();
        });
        it('WEEKDAY formula with second argument as expression', (done: Function) => {
            helper.edit('J16', '=WEEKDAY(4,2+1);');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('2');
            helper.edit('J17', '=WEEKDAY(G8,5-3);');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('2');
            helper.edit('J18', '=WEEKDAY(56,22/2);');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('6');
            helper.edit('J19', '=WEEKDAY(67,7*2);');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('7');
            done();
        });
        it('WEEKDAY formula with logical values as arguments', (done: Function) => {
            helper.edit('K1', '=WEEKDAY(TRUE,2);');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('7');
            helper.edit('K2', '=WEEKDAY(FALSE,3);');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('5');
            helper.edit('K3', '=WEEKDAY(4354,TRUE);');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('7');
            helper.edit('K4', '=WEEKDAY(4567,FALSE);');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NUM!');
            helper.edit('K5', 'TRUE');
            helper.edit('K6', 'FALSE');
            helper.edit('K7', '=WEEKDAY(43254,K5);');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('1');
            helper.edit('K8', '=WEEKDAY(K5,11);');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('7');
            helper.edit('K9', '=WEEKDAY(43254,K6);');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#NUM!');
            helper.edit('K10', '=WEEKDAY(K6,11);');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('6');
            done();
        });
        it('WEEKDAY formula with negative and decimal values as arguments', (done: Function) => {
            helper.edit('K11', '=WEEKDAY(4.5,2);');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('3');
            helper.edit('K12', '=WEEKDAY(6.765,3);');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('4');
            helper.edit('K13', '=WEEKDAY(0.342,12);');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('5');
            helper.edit('K14', '=WEEKDAY(-45467,1);');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#NUM!');
            helper.edit('K15', '=WEEKDAY(-45467.56,3);');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#NUM!');
            helper.edit('K16', '=WEEKDAY(45467,-2);');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#NUM!');
            done();
        });
        it('WEEKDAY formula with invalid arguments', (done: Function) => {
            helper.edit('K17', '=WEEKDAY(43254456576786,1);');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('#NUM!');
            helper.edit('K18', '=WEEKDAY("4/4/10000",11);');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('#NUM!');
            helper.edit('K19', '=WEEKDAY(hello,2);');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('#NAME?');
            helper.edit('K20', '=WEEKDAY(3435," ");');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('WEEKDAY formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('L1', '=WEEKDAY($B$8,1)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('3');
            helper.edit('L2', '=WEEKDAY($C$7,3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('5');
            helper.edit('L3', '=WEEKDAY($D$5,4)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#NUM!');
            helper.edit('L4', '=WEEKDAY($E$3,2)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('1');
            helper.edit('L5', '=WEEKDAY($F$6,5)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#NUM!');
            helper.edit('L6', '=WEEKDAY($A$5,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('WEEKDAY formula with Sheet references as arguments->', (done: Function) => {
            helper.edit('L7', '=WEEKDAY(Sheet2!A1,1)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('7');
            helper.edit('L8', '=WEEKDAY(Sheet1!E3,3)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('0');
            helper.edit('L9', '=WEEKDAY(Sheet2!A4,4)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('#NUM!');
            helper.edit('L10', '=WEEKDAY(Sheet1!C10,11)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('6');
            done();
        });
        it('WEEKDAY formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L11', '=WEEKDAY(Sheet2!$A$3,12)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#VALUE!');
            helper.edit('L12', '=WEEKDAY(Sheet1!$E$3,15)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('4');
            helper.edit('L13', '=WEEKDAY(Sheet2!$A$2,1)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('3');
            helper.edit('L14', '=WEEKDAY(Sheet1!$C$4,3)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('5');
            helper.edit('L15', '=WEEKDAY(Sheet2!$A$5,2)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#NUM!');
            helper.edit('L16', '=WEEKDAY(Sheet2!$A$6,3)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('2');
            done();
        });
        it('WEEKDAY formula with nested formulas->', (done: Function) => {
            helper.edit('M1', '=WEEKDAY(DATE(2003,3,12),3)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('2');
            helper.edit('M2', '=WEEKDAY(DAY(54564),2)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('6');
            helper.edit('M3', '=WEEKDAY(DATE(2019,3,30),2)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('6');
            helper.edit('M4', '=WEEKDAY(SUM(B2:B6),2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('4');
            helper.edit('M5', '=WEEKDAY(45323,1)-WEEKDAY(43211,1)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('-2');
            done();
        });
        it('WEEKDAY formula with decimal value as second argument->', (done: Function) => {
            helper.edit('N1', '=WEEKDAY(45678,3.567)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('1');
            helper.edit('N2', '=WEEKDAY(DAY(54564),2.564)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('6');
            helper.edit('N3', '=WEEKDAY(43543,4.564)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('#NUM!');
            helper.edit('N4', '=WEEKDAY(45678.543,2.564)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('2');
            helper.edit('N5', '=WEEKDAY(45323,14.543)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('1');
            done();
        });
        it('WEEKDAY formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=WEEKDAY();';
            helper.getElement('.e-spreadsheet-edit').textContent = '=WEEKDAY();';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O2', '=WEEKDAY(45321,2);');
            done();
        });
    });

    describe('SUMPRODUCT Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Decimals' }] }, { cells: [{ index: 8, value: '102.32' }] },
                        { cells: [{ index: 8, value: '105.43' }] }, { cells: [{ index: 8, value: '103.23' }] },
                        { cells: [{ index: 8, value: '1002.2323' }] }, { cells: [{ index: 8, value: '1023.3219' }] },
                        { cells: [{ index: 8, value: '1022.4567' }] }, { cells: [{ index: 8, value: '320.12354' }] },
                        { cells: [{ index: 8, value: '102.45674' }] }, { cells: [{ index: 8, value: '103.32321' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: '-3221' }] }, { cells: [{ index: 8, value: '-1253' }] },
                        { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '119', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '321', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12.56', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '2', format: '0%' }] },
                        { cells: [{ index: 8, value: '115', format: '0%' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: '#NUM!' }] }, { cells: [{ index: 8, value: '#DIV/0!' }] },]
                }, {
                    rows: [
                        { cells: [{ value: '12' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '76' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '93' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'ABC' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUMPRODUCT formula with invalid Inputs', (done: Function) => {
            helper.edit('J2', '=SUMPRODUCT(D);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#NAME?');
            done();
        });
        it('SUMPRODUCT formula which return value as "0" for invalid inputs', (done: Function) => {
            helper.edit('J3', '=SUMPRODUCT("D");');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            done();
        });
        it('SUMPRODUCT formula which contains First as null', (done: Function) => {
            helper.edit('D1', '');
            helper.edit('J4', '=SUMPRODUCT(D1:D5);');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('65');
            done();
        });
        it('SUMPRODUCT formula with row and column range is entered in reverse order', (done: Function) => {
            const cellEle: HTMLElement = helper.invoke('getCell', [4, 9]);
            helper.invoke('updateCell', [{ value: '=SUMPRODUCT(D2:D5,E5:E2)' }, 'J5']);
            expect(cellEle.textContent).toBe('1400');
            helper.invoke('updateCell', [{ value: '=SUMPRODUCT(D5:D2,E2:E5)' }, 'J5']);
            expect(cellEle.textContent).toBe('1400');
            helper.invoke('updateCell', [{ value: '=SUMPRODUCT(D5:D2,E5:E2)' }, 'J5']);
            expect(cellEle.textContent).toBe('1400');
            helper.invoke('updateCell', [{ value: '=SUMPRODUCT(D2:F2,F3:D3)' }, 'J5']);
            expect(cellEle.textContent).toBe('120800');
            helper.invoke('updateCell', [{ value: '=SUMPRODUCT(F2:D2,D3:F3)' }, 'J5']);
            expect(cellEle.textContent).toBe('120800');
            helper.invoke('updateCell', [{ value: '=SUMPRODUCT(F2:D2,F3:D3)' }, 'J5']);
            expect(cellEle.textContent).toBe('120800');
            done();
        });
        it('SUMPRODUCT Formula with ranged cell references values as single arguments->', (done: Function) => {
            helper.edit('J6', '=SUMPRODUCT(A2:A10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=SUMPRODUCT(B3:B10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('334743');
            helper.edit('J8', '=SUMPRODUCT(C3:C8)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('1.303888889');
            helper.edit('J9', '=SUMPRODUCT(D2:D11)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('277');
            helper.edit('J10', '=SUMPRODUCT(I2:I6)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('2336.5342');
            helper.edit('J11', '=SUMPRODUCT(I6:I10)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('2571.68209');
            helper.edit('J12', '=SUMPRODUCT(I19:I21)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('-4474');
            helper.edit('J13', '=SUMPRODUCT(I24:I25)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('131.56');
            helper.edit('J14', '=SUMPRODUCT(I26:I27)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('29');
            helper.edit('J15', '=SUMPRODUCT(I28:I29)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('117');
            helper.edit('J16', '=SUMPRODUCT(I13:I16)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('0');
            helper.edit('J17', '=SUMPRODUCT(I13:I29)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('-3756.44');
            done();
        });
        it('SUMPRODUCT Formula with aplha numeric values as cell referenced arguments->', (done: Function) => {
            helper.edit('K1', '=SUMPRODUCT(I13:I14)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            helper.edit('K2', '=SUMPRODUCT(I13:I14,F2:F3)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0');  
            done();
        });
        it('SUMPRODUCT Formula with multiple range arguments with different formatted values->', (done: Function) => {
            helper.edit('K3', '=SUMPRODUCT(A2:A11,B2:B11)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0');
            helper.edit('K4', '=SUMPRODUCT(B2:B11,A2:A11)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('0');
            helper.edit('K5', '=SUMPRODUCT(B2:B11,C2:C11)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('100438.2413');  
            helper.edit('K6', '=SUMPRODUCT(C2:C11,B2:B11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('100438.2413');  
            helper.edit('K7', '=SUMPRODUCT(C2:C11,D2:D11)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('62.90446759');  
            helper.edit('K8', '=SUMPRODUCT(D2:D11,C2:C11)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('62.90446759');  
            helper.edit('K9', '=SUMPRODUCT(D2:D11,E2:E11)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('4740');  
            helper.edit('K10', '=SUMPRODUCT(E2:E11,D2:D11)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('4740');  
            helper.edit('K11', '=SUMPRODUCT(H2:H4,I2:I4)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('9081.91');  
            helper.edit('K12', '=SUMPRODUCT(I2:I4,H2:H4)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('9081.91');  
            helper.edit('K13', '=SUMPRODUCT(I2:I4,I5:I7)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('315985.442');  
            helper.edit('K14', '=SUMPRODUCT(I5:I7,I2:I4)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('315985.442');  
            helper.edit('K15', '=SUMPRODUCT(G8:G10,I19:I21)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('-17181');  
            helper.edit('K16', '=SUMPRODUCT(I19:I21,G8:G10)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('-17181');  
            helper.edit('K17', '=SUMPRODUCT(I22:I23,I24:I25)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('18192.76');  
            helper.edit('K18', '=SUMPRODUCT(I24:I25,I22:I23)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('18192.76');  
            helper.edit('K19', '=SUMPRODUCT(I24:I25,I26:I27)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('1641.52');
            helper.edit('K20', '=SUMPRODUCT(I26:I27,I24:I25)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('1641.52'); 
            helper.edit('K21', '=SUMPRODUCT(I26:I27,I28:I29)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('1979'); 
            helper.edit('K22', '=SUMPRODUCT(I28:I29,I26:I27)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('1979'); 
            helper.edit('K23', '=SUMPRODUCT(I15:I18,G8:G11)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('0'); 
            done();
        });
        it('SUMPRODUCT Formula with column and row wise arguments as input->', (done: Function) => {
            helper.edit('L1', '=SUMPRODUCT(D2:H2,D11:H11)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('101259');
            helper.edit('L2', '=SUMPRODUCT(D2:G3,E7:H8)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('26936');
            helper.edit('L3', '=SUMPRODUCT(D2:D11,G2:G11)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('2423');
            helper.edit('L4', '=SUMPRODUCT(D2:E10,G3:H11)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('10686');
            done();
        });
        it('SUMPRODUCT Formula with multiple range arguments as input->', (done: Function) => {
            helper.edit('L5', '=SUMPRODUCT(B4:B9,C4:C9,D4:D9,E4:E9,F4:F9,G4:G9,H4:H9)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('1.14977E+13');
            helper.edit('L6', '=SUMPRODUCT(D2:H11)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('5803');
            helper.edit('L7', '=SUMPRODUCT(D2:E10,F2:G10,H2:I10)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('13065759.55');
            done();
        });
        it('SUMPRODUCT Formula with improper range arguments as input->', (done: Function) => {
            helper.edit('L8', '=SUMPRODUCT(D2:D10,E2:E11)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            helper.edit('L9', '=SUMPRODUCT(D2:D11,E3:E11)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('#VALUE!');
            helper.edit('L10', '=SUMPRODUCT(D3:D6,F3:G8)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('#VALUE!');
            helper.edit('L11', '=SUMPRODUCT(D3:G3,D5:H5)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#VALUE!');
            helper.edit('L12', '=SUMPRODUCT(D2:H2,D6:F6)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            helper.edit('L13', '=SUMPRODUCT(D3:G4,D7:G9)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('SUMPRODUCT Formula with worst case value as  arguments->', (done: Function) => {
            helper.edit('L14', '=SUMPRODUCT(,)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#VALUE!');
            helper.edit('L15', '=SUMPRODUCT(,,,,)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#VALUE!');
            helper.edit('L16', '=SUMPRODUCT(D2:D11,)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#VALUE!');
            helper.edit('L17', '=SUMPRODUCT(,D2:D11)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('#VALUE!');
            helper.edit('L18', '=SUMPRODUCT(I3:I11,"")');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('#VALUE!');
            helper.edit('L19', '=SUMPRODUCT(D)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('#NAME?');
            done();
        });
        it('SUMPRODUCT Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=SUMPRODUCT($D$2:$H$11)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('5803');
            helper.edit('M2', '=SUMPRODUCT($D$2:$D$11,$H$2:$H$11)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('18120');
            helper.edit('M3', '=SUMPRODUCT($H$2:$H$6,I6:I10)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('84096.61586');
            done();
        });
        it('SUMPRODUCT Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M4', '=SUMPRODUCT(Sheet2!A1:A10)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('356');
            helper.edit('M5', '=SUMPRODUCT(Sheet2!A2:B5,Sheet1!G3:G10)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('1884');
            helper.edit('M6', '=SUMPRODUCT(Sheet1!B2:B9,Sheet2!A2:A9)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('14404403');
            helper.edit('M7', '=SUMPRODUCT(Sheet1!D2:D10,Sheet1!H2:H10)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('15370');
            helper.edit('M8', '=SUMPRODUCT(Sheet2!A5:A10)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('218');
            done();
        });
        it('SUMPRODUCT Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M9', '=SUMPRODUCT(Sheet2!$A$2:$A$7,Sheet1!$C$2:$C$7,Sheet1!$F$2:$F$7)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('36883.02431');
            helper.edit('M10', '=SUMPRODUCT(Sheet1!$B$2:$B$8,Sheet2!$A$2:$A$8)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('12305753');
            helper.edit('M11', '=SUMPRODUCT(Sheet2!$A$3:$A$5,Sheet1!$G$3:$G$5)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('1613');
            helper.edit('M12', '=SUMPRODUCT(Sheet1!$D$2:$E$10,Sheet2!$A$2:$B$10)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('7915');
            helper.edit('M13', '=SUMPRODUCT(Sheet2!$A$2:$A$10)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('344');
            helper.edit('M14', '=SUMPRODUCT(Sheet1!$D$2:$E$10)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('392');
            helper.edit('M15', '=SUMPRODUCT(Sheet1!$D$2:$D$10,Sheet1!$E$2:$E$10,Sheet1!$F$2:$F$10,Sheet1!$H$2:$H$10)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('325804700');
            done();
        });
        it('SUMPRODUCT formula with No Inputs', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMPRODUCT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMPRODUCT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J1', '=SUMPRODUCT(A2:A6)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0');
            done();
        });
    });

    describe('Address Formula - Checking->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ADDRESS Formula ->', (done: Function) => {
            helper.edit('I1', '=ADDRESS(2,2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('$B$2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"$B$2","formula":"=ADDRESS(2,2)"}');
            done();
        });
        it('ADDRESS Formula with abs value as 2->', (done: Function) => {
            helper.edit('I2', '=ADDRESS(2,2,2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('B$2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"B$2","formula":"=ADDRESS(2,2,2)"}');
            done();
        });
        it('ADDRESS Formula with abs value as 3->', (done: Function) => {
            helper.edit('I3', '=ADDRESS(2,2,3)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('$B2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"$B2","formula":"=ADDRESS(2,2,3)"}');
            done();
        });
        it('ADDRESS Formula with abs value as 4->', (done: Function) => {
            helper.edit('I4', '=ADDRESS(2,2,4)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('B2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"B2","formula":"=ADDRESS(2,2,4)"}');
            done();
        });
        it('ADDRESS Formula with Reference style as false and abs value as 1->', (done: Function) => {
            helper.edit('I5', '=ADDRESS(2,2,1,FALSE)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('R2C2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"R2C2","formula":"=ADDRESS(2,2,1,FALSE)"}');
            done();
        });
        it('ADDRESS Formula with Reference style as false and abs value as 2->', (done: Function) => {
            helper.edit('I6', '=ADDRESS(2,2,2,FALSE)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('R2C[2]');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"R2C[2]","formula":"=ADDRESS(2,2,2,FALSE)"}');
            done();
        });
        it('ADDRESS Formula with Reference style as false and abs value as 3->', (done: Function) => {
            helper.edit('I7', '=ADDRESS(2,2,3,FALSE)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('R[2]C2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"R[2]C2","formula":"=ADDRESS(2,2,3,FALSE)"}');
            done();
        });
        it('ADDRESS Formula with Reference style as false and abs value as 4->', (done: Function) => {
            helper.edit('I8', '=ADDRESS(2,2,4,FALSE)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('R[2]C[2]');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":"R[2]C[2]","formula":"=ADDRESS(2,2,4,FALSE)"}');
            done();
        });
        it('ADDRESS Formula with Sheet name and Reference style as false->', (done: Function) => {
            helper.edit('I9', '=ADDRESS(2,2,1,FALSE,"Price Details")');
            expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=ADDRESS(2,2,1,FALSE,"Price Details")');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('Price Details!R2C2');
            done();
        });
        it('ADDRESS Formula with Sheet name and Reference style as TRUE->', (done: Function) => {
            helper.edit('I10', '=ADDRESS(2,2,1,TRUE,"Price Details")');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('Price Details!$B$2');
            done();
        });
        it('ADDRESS Formula for workbook->', (done: Function) => {
            helper.edit('I11', '=ADDRESS(2,3,1,FALSE,"[Book1]Sheet1")');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].formula).toBe('=ADDRESS(2,3,1,FALSE,"[Book1]Sheet1")');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('[Book1]Sheet1!R2C3');
            done();
        });
        it('ADDRESS Formula with invalid Reference style->', (done: Function) => {
            helper.edit('I12', '=ADDRESS(2,2,1,3)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('$B$2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":"$B$2","formula":"=ADDRESS(2,2,1,3)"}');
            done();
        });
        it('ADDRESS Formula with invalid sheet name->', (done: Function) => {
            helper.edit('I13', '=ADDRESS(2,2,1,FALSE,aa)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":"#NAME?","formula":"=ADDRESS(2,2,1,FALSE,aa)"}');
            done();
        });
        it('ADDRESS Formula with no input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I14');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ADDRESS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ADDRESS()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I14', '=ADDRESS(1,1)');
            done();
        });
        it('ADDRESS Formula with invalid input->', (done: Function) => {
            helper.edit('I15', '=ADDRESS(A,B)');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[8])).toBe('{"value":"#NAME?","formula":"=ADDRESS(A,B)"}');
            done();
        });
        it('ADDRESS Formula with negative values for Row and Column->', (done: Function) => {
            helper.edit('I16', '=ADDRESS(-1,-2)');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":"#VALUE!","formula":"=ADDRESS(-1,-2)"}');
            done();
        });
        it('ADDRESS Formula with no values for Row and Column->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I17');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ADDRESS(,,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ADDRESS(,,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I17', '=ADDRESS(1,2)');
            done();
        });
    });

    describe('Formula - Checking VI ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SMALL Formula ->', (done: Function) => {
            helper.edit('J1', '=SMALL(D2:D11,2)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('15');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":15,"formula":"=SMALL(D2:D11,2)"}');
            done();
        });
        it('SMALL Formula II ->', (done: Function) => {
            helper.edit('J2', '=SMALL(D2:H11,25)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":20,"formula":"=SMALL(D2:H11,25)"}');
            done();
        });
        it('SMALL Formula with no inputs ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SMALL()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SMALL()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J3', '=SMALL(A2,1)');
            done();
        });
        it('SMALL Formula with cell having string ->', (done: Function) => {
            helper.edit('J4', '=SMALL(A2,1)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"#NUM!","formula":"=SMALL(A2,1)"}');
            done();
        });
        it('SMALL Formula with number as 0 ->', (done: Function) => {
            helper.edit('J5', '=SMALL(D2:H11,0)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"#NUM!","formula":"=SMALL(D2:H11,0)"}');
            done();
        });
        it('SMALL Formula with number as alphabet ->', (done: Function) => {
            helper.edit('J6', '=SMALL(D2:D11,a)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":"#NAME?","formula":"=SMALL(D2:D11,a)"}');
            done();
        });
        it('SMALL Formula with number greater than array value ->', (done: Function) => {
            helper.edit('J7', '=SMALL(D2:H11,52)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#NUM!","formula":"=SMALL(D2:H11,52)"}');
            done();
        });
        it('LARGE Formula ->', (done: Function) => {
            helper.edit('K1', '=LARGE(D2:D11,2)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('41');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":41,"formula":"=LARGE(D2:D11,2)"}');
            done();
        });
        it('LARGE Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LARGE()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LARGE()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K2', '=SMALL(A2,1)');
            done();
        });
        it('LARGE Formula with cell having string->', (done: Function) => {
            helper.edit('K3', '=LARGE(A2,1)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"#NUM!","formula":"=LARGE(A2,1)"}');
            done();
        });
        it('LARGE Formula with cell having number value as string->', (done: Function) => {
            helper.edit('K4', '=LARGE(D2:D11,a)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#NAME?","formula":"=LARGE(D2:D11,a)"}');
            done();
        });
        it('CHOOSE Formula with as cell Referenced value->', (done: Function) => {
            helper.edit('K5', '=CHOOSE(D2:D2,"10","20")');
            expect(helper.getInstance().sheets[0].rows[4].cells[10].formula).toBe('=CHOOSE(D2:D2,"10","20")');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#VALUE!');
            done();
        });
    });

    describe('Formula - Checking VII ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CHAR Formula for Numbers->', (done: Function) => {
            helper.edit('I1', '=CHAR(56)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"8","formula":"=CHAR(56)"}');
            done();
        });
        it('CHAR Formula for alphabets->', (done: Function) => {
            helper.edit('I2', '=CHAR(78)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('N');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"N","formula":"=CHAR(78)"}');
            done();
        });
        it('CHAR Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=CHAR()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=CHAR()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I3', '=CHAR(65)');
            done();
        });
        it('CHAR Formula with invalid inputs->', (done: Function) => {
            helper.edit('I4', '=CHAR(a)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#NAME?","formula":"=CHAR(a)"}');
            done();
        });
        it('CHAR Formula with value > 256->', (done: Function) => {
            helper.edit('I5', '=CHAR(256)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR(256)"}');
            done();
        });
        it('CHAR Formula with value as 0->', (done: Function) => {
            helper.edit('I6', '=CHAR(0)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHAR(0)"}');
            done();
        });
        it('CODE Formula for Numbers->', (done: Function) => {
            helper.edit('J1', '=CODE(1)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('49');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":49,"formula":"=CODE(1)"}');
            done();
        });
        it('CODE Formula for alphabets->', (done: Function) => {
            helper.edit('J2', '=CODE("A")');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toBe('=CODE("A")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('65');
            done();
        });
        it('CODE Formula for invalid inputs->', (done: Function) => {
            helper.edit('J3', '=CODE(a)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":"#NAME?","formula":"=CODE(a)"}');
            done();
        });
        it('CODE Formula for no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J4');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=CODE()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=CODE()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J4', '=CODE("a")');
            done();
        });
        it('CODE Formula for with only ""->', (done: Function) => {
            helper.edit('J5', '=CODE("")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('CODE Formula for 0->', (done: Function) => {
            helper.edit('J6', '=CODE(0)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('48');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":48,"formula":"=CODE(0)"}');
            done();
        });
        it('SUMIF Formula->', (done: Function) => {
            helper.edit('J7', '=SUMIF(A2:A5,"Casual Shoes",D2:D4)');
            expect(helper.getInstance().sheets[0].rows[6].cells[9].formula).toBe('=SUMIF(A2:A5,"Casual Shoes",D2:D4)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('10');
            done();
        });
        it('ABS Formula->', (done: Function) => {
            helper.edit('K1', '=ABS(D2)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":10,"formula":"=ABS(D2)"}');
            done();
        });
        it('ABS Formula with cell having no values->', (done: Function) => {
            helper.edit('K2', '=ABS(P10)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":0,"formula":"=ABS(P10)"}');
            done();
        });
        it('FIND Formula with Name Error->', (done: Function) => {
            helper.edit('K4', '=FIND(S,"A2")');
            expect(helper.getInstance().sheets[0].rows[3].cells[10].formula).toBe('=FIND(S,"A2")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NAME?');
            done();
        });
    });

    describe('Reported EXACT Formula - Checking I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('EXACT formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=EXACT(Hi,"Hi")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(Hi,\\"Hi\\")"}');
            done();
        });
        it('EXACT formula with cell Reference - 5->', (done: Function) => {
            helper.edit('C23', '1');
            helper.edit('D14', '"1"');
            helper.edit('I2', '=EXACT(C23,D14)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":false,"formula":"=EXACT(C23,D14)"}');
            done();
        });
        it('EXACT formula with cell Reference - 6->', (done: Function) => {
            helper.edit('D22', '"2"');
            helper.edit('C24', '2');
            helper.edit('I3', '=EXACT(D22,C24)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":false,"formula":"=EXACT(D22,C24)"}');
            done();
        });
        it('EXACT formula with cell Reference - 7->', (done: Function) => {
            helper.edit('D22', '"2"');
            helper.edit('C24', '2');
            helper.edit('I4', '=EXACT(C24,D22)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":false,"formula":"=EXACT(C24,D22)"}');
            done();
        });
        it('EXACT formula with cell Reference - 8->', (done: Function) => {
            helper.edit('B24', '"TRUE"');
            helper.edit('B15', 'TRUE');
            helper.edit('I5', '=EXACT(B24,B15)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":false,"formula":"=EXACT(B24,B15)"}');
            done();
        });
        it('EXACT formula with cell Reference - 9->', (done: Function) => {
            helper.edit('B25', '"FALSE"');
            helper.edit('I6', '=EXACT(FALSE,B25)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":false,"formula":"=EXACT(FALSE,B25)"}');
            done();
        });
        it('EXACT formula with cell Reference - 10->', (done: Function) => {
            helper.edit('F20', '""');
            helper.edit('I7', '=EXACT(F20,)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":false,"formula":"=EXACT(F20,)"}');
            done();
        });
        it('EXACT formula with cell Reference - 11->', (done: Function) => {
            helper.edit('G9', '600.00%');
            helper.edit('I8', '=EXACT(G9,600%)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":true,"formula":"=EXACT(G9,600%)"}');
            done();
        });
        it('EXACT formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I9', '=EXACT(500%,5)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":true,"formula":"=EXACT(500%,5)"}');
            done();
        });
        it('EXACT formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I10', '=EXACT(jelly,jelly)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(jelly,jelly)"}');
            done();
        });
        it('EXACT formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I11', '=EXACT("exam",exam)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(\\"exam\\",exam)"}');
            done();
        });
        it('EXACT formula with cell Reference - 15->', (done: Function) => {
            helper.edit('C20', 'Hello123');
            helper.edit('I12', '=EXACT(C20,Hello123)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(C20,Hello123)"}');
            done();
        });
        it('EXACT formula with cell Reference - 16->', (done: Function) => {
            helper.edit('E17', '#NUM!');
            helper.edit('I13', '=EXACT(E17,3)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":"#NUM!","formula":"=EXACT(E17,3)"}');
            done();
        });
        it('EXACT formula with cell Reference - 17->', (done: Function) => {
            helper.edit('E15', '#NAME?');
            helper.edit('I14', '=EXACT(E15,"exam")');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(E15,\\"exam\\")"}');
            done();
        });
        it('EXACT formula with cell Reference - 18->', (done: Function) => {
            helper.edit('E16', '#DIV/0!');
            helper.edit('I15', '=EXACT(E16,E15)');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[8])).toBe('{"value":"#DIV/0!","formula":"=EXACT(E16,E15)"}');
            done();
        });
        it('EXACT formula with cell Reference - 19->', (done: Function) => {
            helper.edit('I16', '=EXACT(kert,"kel")');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(kert,\\"kel\\")"}');
            done();
        });
        it('EXACT formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I17', '=EXACT("kel",kert)');
            expect(helper.invoke('getCell', [16, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(\\"kel\\",kert)"}');
            done();
        });
        it('EXACT formula with cell Reference - 21->', (done: Function) => {
            helper.edit('I18', '=EXACT(MAX(string),E15)');
            expect(helper.invoke('getCell', [17, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[8])).toBe('{"value":"#NAME?","formula":"=EXACT(MAX(string),E15)"}');
            done();
        });
        it('EXACT formula with cell Reference - 22->', (done: Function) => {
            helper.edit('D22', '"2"');
            helper.edit('H20', '2');
            helper.edit('I19', '=EXACT($D$22,$H$20)');
            expect(helper.invoke('getCell', [18, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[8])).toBe('{"value":false,"formula":"=EXACT($D$22,$H$20)"}');
            done();
        });
        it('EXACT formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I20', '=EXACT($E$16,$H$20)');
            expect(helper.invoke('getCell', [19, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[8])).toBe('{"value":"#DIV/0!","formula":"=EXACT($E$16,$H$20)"}');
            done();
        });
        it('EXACT formula with cell Reference - 24->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Time', refersTo: 'C3'});
            helper.edit('C3', '5:56:32 AM');
            helper.edit('I24', '=EXACT(C3,0.247592592592593)');
            expect(helper.invoke('getCell', [23, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[8])).toBe('{"value":false,"formula":"=EXACT(C3,0.247592592592593)"}');
            done();
        });
        it('EXACT formula with cell Reference - 25->', (done: Function) => {
            helper.edit('I24', '=EXACT("07/27/2014",41847)');
            expect(helper.invoke('getCell', [23, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[8])).toBe('{"value":true,"formula":"=EXACT(\\"07/27/2014\\",41847)"}');
            done();
        });
    });

    describe('Reported CONCAT formula - Checking -> I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: 'School Office "YG"' }] }, { cells: [{ value: '/"Hi"/' }] }, { cells: [{ value: '@' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CONCAT formula with cell Reference - 0->', (done: Function) => {
            helper.edit('H14', '"07-JUN"');
            helper.edit('J20', '6728');
            helper.invoke('numberFormat', [getFormatFromType('Accounting'), 'J20']);
            helper.edit('L17', '.10,23, 100');
            helper.edit('C11', '6/23/2014');
            helper.edit('C12', '92');
            helper.edit('F14', '6/7/2024');
            helper.edit('G15', '');
            helper.edit('H15', '"     "');
            helper.edit('K14', '12:00:00 AM');
            helper.edit('F4', '#DIV/0!');
            helper.edit('H13', '"03/04/2023"');
            helper.edit('F13', '3/4/2023');
            helper.edit('I3', '"TRUE"');
            helper.edit('I2', 'TRUE');
            helper.edit('I5', 'FALSE');
            helper.edit('C2', 'p');
            helper.edit('D3', '"65"');
            helper.edit('C19', 'All');
            helper.edit('B11', 'Flip- Flops & Slippers');
            helper.edit('H21', 'San deigo, CA');
            helper.edit('B12', '70');
            helper.edit('E3', '"98"');
            helper.edit('E7', '$4');
            helper.edit('C6', '-6');
            helper.edit('C7', '-7');
            helper.edit('I6', '"FALSE"');
            helper.edit('I7', 'True');
            helper.edit('E22', '');
            helper.edit('C15', '$hello');
            helper.edit('H16', '""      ""');
            helper.edit('L19', '{"Hel", "Lo", 1, 2}');
            helper.edit('B15', 'School Office "YG"');
            helper.edit('M10', '/"Hi"/');
            helper.edit('J6', '@');
            helper.edit('J15', '1:45:00 PM');
            done();
        });
        it('CONCAT formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=CONCAT(TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"TRUE","formula":"=CONCAT(TRUE)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=CONCAT(FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"FALSE","formula":"=CONCAT(FALSE)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=CONCAT(5.567+9.45)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('15.017');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"15.017","formula":"=CONCAT(5.567+9.45)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H14, J20)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"07-JUN"6728');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"07-JUN\\"6728","formula":"=CONCAT(H14, J20)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=CONCAT(12.45, "{1,2,3}")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('12.45{1,2,3}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"12.45{1,2,3}","formula":"=CONCAT(12.45, \\"{1,2,3}\\")"}');
            done();
        });
        it('CONCAT formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=CONCAT(AL123, "34")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"34","formula":"=CONCAT(AL123, \\"34\\")"}');
            done();
        });
        it('CONCAT formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=CONCAT(TRUE + FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=CONCAT(TRUE + FALSE)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=CONCAT(FALSE + FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=CONCAT(FALSE + FALSE)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=CONCAT(TRUE + TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"2","formula":"=CONCAT(TRUE + TRUE)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=CONCAT(L17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('.10,23, 100');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":".10,23, 100","formula":"=CONCAT(L17)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=CONCAT(C11+H14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(C11+H14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=CONCAT(C12+F14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('45542');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"45542","formula":"=CONCAT(C12+F14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=CONCAT(G15, H15, K14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"     "0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"     \\"0","formula":"=CONCAT(G15, H15, K14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I1', '=CONCAT(F4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#DIV/0!","formula":"=CONCAT(F4)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 15->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H13, F14, F13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"03/04/2023"4545044989');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"03/04/2023\\"4545044989","formula":"=CONCAT(H13, F14, F13)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 16->', (done: Function) => {
            helper.edit('I1', '=CONCAT(I3, I2+I5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"TRUE"1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"TRUE\\"1","formula":"=CONCAT(I3, I2+I5)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 17->', (done: Function) => {
            helper.edit('I1', '=CONCAT(C2, D3, C19)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('p"65"All');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"p\\"65\\"All","formula":"=CONCAT(C2, D3, C19)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 18->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H14, F14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"07-JUN"45450');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"07-JUN\\"45450","formula":"=CONCAT(H14, F14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 19->', (done: Function) => {
            helper.edit('I1', '=CONCAT(B11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('Flip- Flops & Slippers');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"Flip- Flops & Slippers","formula":"=CONCAT(B11)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H21, B12, E3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('San deigo, CA70"98"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"San deigo, CA70\\"98\\"","formula":"=CONCAT(H21, B12, E3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 21->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H21, B12+E7, E3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('San deigo, CA74"98"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"San deigo, CA74\\"98\\"","formula":"=CONCAT(H21, B12+E7, E3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 22->', (done: Function) => {
            helper.edit('I1', '=CONCAT(E3+D3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(E3+D3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I1', '=CONCAT(C6-C7)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=CONCAT(C6-C7)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 24->', (done: Function) => {
            helper.edit('I1', '=CONCAT(I2+I2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"2","formula":"=CONCAT(I2+I2)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 25->', (done: Function) => {
            helper.edit('I1', '=CONCAT(I3+I6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(I3+I6)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 26->', (done: Function) => {
            helper.edit('I1', '=CONCAT(I2+I6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(I2+I6)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 27->', (done: Function) => {
            helper.edit('I1', '=CONCAT(I7, I2, I3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('TrueTRUE"TRUE"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"TrueTRUE\\"TRUE\\"","formula":"=CONCAT(I7, I2, I3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 28->', (done: Function) => {
            helper.edit('I1', '=CONCAT(E22)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"","formula":"=CONCAT(E22)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 29->', (done: Function) => {
            helper.edit('I1', '=CONCAT(E22+E22+I2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=CONCAT(E22+E22+I2)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 30->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H13, H14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"03/04/2023""07-JUN"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"03/04/2023\\"\\"07-JUN\\"","formula":"=CONCAT(H13, H14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 31->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H13+F13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(H13+F13)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 32->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H14, F14+F13, H13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"07-JUN"90439"03/04/2023"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"07-JUN\\"90439\\"03/04/2023\\"","formula":"=CONCAT(H14, F14+F13, H13)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 33->', (done: Function) => {
            helper.edit('I1', '=CONCAT(C15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('$hello');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"$hello","formula":"=CONCAT(C15)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 34->', (done: Function) => {
            helper.edit('I1', '=CONCAT(H16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('""      ""');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"\\"      \\"\\"","formula":"=CONCAT(H16)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 35->', (done: Function) => {
            helper.edit('I1', '=CONCAT(12, "Al", L19)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('12Al{"Hel", "Lo", 1, 2}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"12Al{\\"Hel\\", \\"Lo\\", 1, 2}","formula":"=CONCAT(12, \\"Al\\", L19)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 36->', (done: Function) => {
            helper.edit('I1', '=CONCAT(DEGREES(360))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('20626.48062');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"20626.480624709635","formula":"=CONCAT(DEGREES(360))"}');
            done();
        });
        it('CONCAT formula with cell Reference - 37->', (done: Function) => {
            helper.edit('I1', '=CONCAT(Sheet1!$B$15, Sheet1!$M$10, Sheet1!$J$6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('School Office "YG"/"Hi"/@');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"School Office \\"YG\\"/\\"Hi\\"/@","formula":"=CONCAT(Sheet1!$B$15, Sheet1!$M$10, Sheet1!$J$6)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 38->', (done: Function) => {
            helper.edit('I1', '=CONCAT(Sheet2!$A$1, Sheet1!$M$10, Sheet2!$A$3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('School Office "YG"/"Hi"/@');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"School Office \\"YG\\"/\\"Hi\\"/@","formula":"=CONCAT(Sheet2!$A$1, Sheet1!$M$10, Sheet2!$A$3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 39->', (done: Function) => {
            helper.edit('I1', '=CONCAT($D$3, " ", $E$3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"65" "98"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"65\\" \\"98\\"","formula":"=CONCAT($D$3, \\" \\", $E$3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 40->', (done: Function) => {
            helper.edit('I1', '=CONCAT($D$3, " ", $I$3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"65" "TRUE"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"65\\" \\"TRUE\\"","formula":"=CONCAT($D$3, \\" \\", $I$3)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 41->', (done: Function) => {
            helper.edit('I1', '=CONCAT(J15+K14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.572916667');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.5729166666666666","formula":"=CONCAT(J15+K14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 42->', (done: Function) => {
            helper.edit('I1', '=CONCAT(K14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=CONCAT(K14)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 43->', (done: Function) => {
            helper.edit('I1', '=CONCAT(J15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.572916667');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.5729166666666666","formula":"=CONCAT(J15)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 44->', (done: Function) => {
            helper.edit('I1', '=CONCAT("True", "!00")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('True!00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"True!00","formula":"=CONCAT(\\"True\\", \\"!00\\")"}');
            done();
        });
        it('CONCAT formula with cell Reference - 45->', (done: Function) => {
            helper.edit('I1', '=CONCAT(0, 0)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"00","formula":"=CONCAT(0, 0)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 46->', (done: Function) => {
            helper.edit('I1', '=CONCAT("23"+"34")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(\\"23\\"+\\"34\\")"}');
            done();
        });
        it('CONCAT formula with cell Reference - 47->', (done: Function) => {
            helper.edit('I1', '=CONCAT("3"+"4", "Lp")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(\\"3\\"+\\"4\\", \\"Lp\\")"}');
            done();
        });
        it('CONCAT formula with cell Reference - 48->', (done: Function) => {
            helper.edit('I1', '=CONCAT(T33+T34)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=CONCAT(T33+T34)"}');
            done();
        });
        it('CONCAT formula with cell Reference - 49->', (done: Function) => {
            helper.edit('I1', '=CONCAT(EXP(MONTH(SMALL({1,2,3,4}, 2))), CODE(E3))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCAT(EXP(MONTH(SMALL({1,2,3,4}, 2))), CODE(E3))"}');
            done();
        });
        it('CONCAT formula with cell Reference - 50->', (done: Function) => {
            helper.edit('D9', '');
            helper.edit('F3', '#NAME?');
            helper.edit('I1', '=CONCAT(D9, LN(TRUE), F3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=CONCAT(D9, LN(TRUE), F3)"}');
            done();
        });
    });

    describe('Reported CONCATENATE formula - Checking -> I ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: 'School Office "YG"' }] }, { cells: [{ value: '/"Hi"/' }] }, { cells: [{ value: '@' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CONCATENATE formula with cell Reference - 0->', (done: Function) => {
            helper.edit('H14', '"07-JUN"');
            helper.edit('J20', '6728');
            helper.invoke('numberFormat', [getFormatFromType('Accounting'), 'J20']);
            helper.edit('L17', '.10,23, 100');
            helper.edit('C11', '6/23/2014');
            helper.edit('C12', '92');
            helper.edit('F14', '6/7/2024');
            helper.edit('G15', '');
            helper.edit('H15', '"     "');
            helper.edit('K14', '12:00:00 AM');
            helper.edit('F4', '#DIV/0!');
            helper.edit('H13', '"03/04/2023"');
            helper.edit('F13', '3/4/2023');
            helper.edit('I3', '"TRUE"');
            helper.edit('I2', 'TRUE');
            helper.edit('I5', 'FALSE');
            helper.edit('C2', 'p');
            helper.edit('D3', '"65"');
            helper.edit('C19', 'All');
            helper.edit('B11', 'Flip- Flops & Slippers');
            helper.edit('H21', 'San deigo, CA');
            helper.edit('B12', '70');
            helper.edit('E3', '"98"');
            helper.edit('E7', '$4');
            helper.edit('C6', '-6');
            helper.edit('C7', '-7');
            helper.edit('I6', '"FALSE"');
            helper.edit('I7', 'True');
            helper.edit('E22', '');
            helper.edit('C15', '$hello');
            helper.edit('H16', '""      ""');
            helper.edit('L19', '{"Hel", "Lo", 1, 2}');
            helper.edit('B15', 'School Office "YG"');
            helper.edit('M10', '/"Hi"/');
            helper.edit('J6', '@');
            helper.edit('J15', '1:45:00 PM');
            done();
        });
        it('CONCATENATE formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"TRUE","formula":"=CONCATENATE(TRUE)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"FALSE","formula":"=CONCATENATE(FALSE)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(5.567+9.45)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('15.017');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"15.017","formula":"=CONCATENATE(5.567+9.45)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H14, J20)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"07-JUN"6728');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"07-JUN\\"6728","formula":"=CONCATENATE(H14, J20)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(12.45, "{1,2,3}")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('12.45{1,2,3}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"12.45{1,2,3}","formula":"=CONCATENATE(12.45, \\"{1,2,3}\\")"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(AL123, "34")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"34","formula":"=CONCATENATE(AL123, \\"34\\")"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(TRUE + FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=CONCATENATE(TRUE + FALSE)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(FALSE + FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=CONCATENATE(FALSE + FALSE)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(TRUE + TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"2","formula":"=CONCATENATE(TRUE + TRUE)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(L17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('.10,23, 100');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":".10,23, 100","formula":"=CONCATENATE(L17)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(C11+H14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(C11+H14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(C12+F14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('45542');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"45542","formula":"=CONCATENATE(C12+F14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(G15, H15, K14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"     "0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"     \\"0","formula":"=CONCATENATE(G15, H15, K14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(F4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#DIV/0!","formula":"=CONCATENATE(F4)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 15->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H13, F14, F13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"03/04/2023"4545044989');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"03/04/2023\\"4545044989","formula":"=CONCATENATE(H13, F14, F13)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 16->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(I3, I2+I5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"TRUE"1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"TRUE\\"1","formula":"=CONCATENATE(I3, I2+I5)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 17->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(C2, D3, C19)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('p"65"All');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"p\\"65\\"All","formula":"=CONCATENATE(C2, D3, C19)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 18->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H14, F14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"07-JUN"45450');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"07-JUN\\"45450","formula":"=CONCATENATE(H14, F14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 19->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(B11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('Flip- Flops & Slippers');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"Flip- Flops & Slippers","formula":"=CONCATENATE(B11)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H21, B12, E3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('San deigo, CA70"98"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"San deigo, CA70\\"98\\"","formula":"=CONCATENATE(H21, B12, E3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 21->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H21, B12+E7, E3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('San deigo, CA74"98"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"San deigo, CA74\\"98\\"","formula":"=CONCATENATE(H21, B12+E7, E3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 22->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(E3+D3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(E3+D3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(C6-C7)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=CONCATENATE(C6-C7)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 24->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(I2+I2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"2","formula":"=CONCATENATE(I2+I2)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 25->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(I3+I6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(I3+I6)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 26->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(I2+I6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(I2+I6)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 27->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(I7, I2, I3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('TrueTRUE"TRUE"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"TrueTRUE\\"TRUE\\"","formula":"=CONCATENATE(I7, I2, I3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 28->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(E22)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"","formula":"=CONCATENATE(E22)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 29->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(E22+E22+I2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"1","formula":"=CONCATENATE(E22+E22+I2)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 30->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H13, H14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"03/04/2023""07-JUN"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"03/04/2023\\"\\"07-JUN\\"","formula":"=CONCATENATE(H13, H14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 31->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H13+F13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(H13+F13)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 32->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H14, F14+F13, H13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"07-JUN"90439"03/04/2023"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"07-JUN\\"90439\\"03/04/2023\\"","formula":"=CONCATENATE(H14, F14+F13, H13)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 33->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(C15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('$hello');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"$hello","formula":"=CONCATENATE(C15)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 34->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(H16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('""      ""');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"\\"      \\"\\"","formula":"=CONCATENATE(H16)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 35->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(12, "Al", L19)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('12Al{"Hel", "Lo", 1, 2}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"12Al{\\"Hel\\", \\"Lo\\", 1, 2}","formula":"=CONCATENATE(12, \\"Al\\", L19)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 36->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(DEGREES(360))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('20626.48062');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"20626.480624709635","formula":"=CONCATENATE(DEGREES(360))"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 37->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(Sheet1!$B$15, Sheet1!$M$10, Sheet1!$J$6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('School Office "YG"/"Hi"/@');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"School Office \\"YG\\"/\\"Hi\\"/@","formula":"=CONCATENATE(Sheet1!$B$15, Sheet1!$M$10, Sheet1!$J$6)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 38->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(Sheet2!$A$1, Sheet1!$M$10, Sheet2!$A$3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('School Office "YG"/"Hi"/@');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"School Office \\"YG\\"/\\"Hi\\"/@","formula":"=CONCATENATE(Sheet2!$A$1, Sheet1!$M$10, Sheet2!$A$3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 39->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE($D$3, " ", $E$3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"65" "98"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"65\\" \\"98\\"","formula":"=CONCATENATE($D$3, \\" \\", $E$3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 40->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE($D$3, " ", $I$3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('"65" "TRUE"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"\\"65\\" \\"TRUE\\"","formula":"=CONCATENATE($D$3, \\" \\", $I$3)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 41->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(J15+K14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.572916667');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.5729166666666666","formula":"=CONCATENATE(J15+K14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 42->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(K14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=CONCATENATE(K14)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 43->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(J15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.572916667');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.5729166666666666","formula":"=CONCATENATE(J15)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 44->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE("True", "!00")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('True!00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"True!00","formula":"=CONCATENATE(\\"True\\", \\"!00\\")"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 45->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(0, 0)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"00","formula":"=CONCATENATE(0, 0)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 46->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE("23"+"34")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(\\"23\\"+\\"34\\")"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 47->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE("3"+"4", "Lp")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(\\"3\\"+\\"4\\", \\"Lp\\")"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 48->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(T33+T34)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=CONCATENATE(T33+T34)"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 49->', (done: Function) => {
            helper.edit('I1', '=CONCATENATE(EXP(MONTH(SMALL({1,2,3,4}, 2))), CODE(E3))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CONCATENATE(EXP(MONTH(SMALL({1,2,3,4}, 2))), CODE(E3))"}');
            done();
        });
        it('CONCATENATE formula with cell Reference - 50->', (done: Function) => {
            helper.edit('D9', '');
            helper.edit('F3', '#NAME?');
            helper.edit('I1', '=CONCATENATE(D9, LN(TRUE), F3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=CONCATENATE(D9, LN(TRUE), F3)"}');
            done();
        });
    });

    describe('ABS Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ABS formula with negative value ', (done: Function) => { 
            helper.edit('I1', '=ABS(-10);');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('10');
            helper.edit('I2', '=ABS(-4.5);');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('4.5');
            helper.edit('I3', '=ABS(6-12);');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('6');
            done();
        });

        it('ABS formula with negative value as cell reference', (done: Function) => {
            helper.edit('I4', '-6');
            helper.edit('I5', '=ABS(I4);');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('6');
            helper.edit('I6', '12');
            helper.edit('I7', '30');
            helper.edit('I8', '=ABS(I6-I7);');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('18');
            done();
        });

        it('ABS formula with boolean value', (done: Function) => {
            helper.edit('I9', '=ABS(TRUE);');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('1');
            helper.edit('I10', '=ABS(FALSE);');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('0');
            helper.edit('I11', '=ABS("TRUE");');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('#VALUE!');
            helper.edit('I12', '=ABS("FALSE");');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#VALUE!');
            done();
        });

        it('ABS formula with string argument', (done: Function) => {
            helper.edit('I13', '=ABS("");');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('#VALUE!');
            helper.edit('I14', '=ABS("32");');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('32');
            helper.edit('I15', '"32");');
            helper.edit('J1', '=ABS(I15);');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=ABS(J3);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            done();
        });
    });

    describe('ABS Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                rows: [{ cells: [{ value: '-23.456' }] },
                { cells: [{ value: '234.45556' }] }, { cells: [{ value: '-567.547' }] }, { cells: [{ value: '-89,789' }] },
                { cells: [{ value: '-345' }] }, { cells: [{ value: '-34.54' }] },{ cells: [{ value: '13972' }] }]
            }], activeSheetIndex: 0 }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ABS formula with negative value ', (done: Function) => { 
            helper.edit('I1', '=ABS(-10);');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('10');
            helper.edit('I2', '=ABS(-4.5);');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('4.5');
            helper.edit('I3', '=ABS(6-12);');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('6');
            done();
        });

        it('ABS formula with negative value as cell reference', (done: Function) => {
            helper.edit('I4', '-6');
            helper.edit('I5', '=ABS(I4);');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('6');
            helper.edit('I6', '12');
            helper.edit('I7', '30');
            helper.edit('I8', '=ABS(I6-I7);');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('18');
            done();
        });

        it('ABS formula with boolean value', (done: Function) => {
            helper.edit('I9', '=ABS(TRUE);');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('1');
            helper.edit('I10', '=ABS(FALSE);');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('0');
            helper.edit('I11', '=ABS("TRUE");');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('#VALUE!');
            helper.edit('I12', '=ABS("FALSE");');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#VALUE!');
            done();
        });

        it('ABS formula with string argument', (done: Function) => {
            helper.edit('I13', '=ABS("");');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('#VALUE!');
            helper.edit('I14', '=ABS("32");');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('32');
            helper.edit('I15', '"32");');
            helper.edit('J1', '=ABS(I15);');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=ABS(J3);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            done();
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('I2', '=ABS($G$3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('5');
            helper.edit('I3', '=ABS($G$4)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('7');
            helper.edit('I4', '=ABS($G$5)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('11');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('I5', '=ABS(Sheet2!A1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('23.456');
            helper.edit('I6', '=ABS(Sheet2!A2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('234.45556');
            helper.edit('I7', '=ABS(Sheet2!A3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('567.547');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('I5', '=ABS(Sheet2!$A$1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('23.456');
            helper.edit('I6', '=ABS(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('234.45556');
            helper.edit('I7', '=ABS(Sheet2!$A$3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('567.547');
            done();
        });
        it('ABS formula with nested formula and extra cases', (done: Function) => {
            helper.edit('N1', '=ABS(SUM(1,2))');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('3');
            helper.edit('N2', '=ABS(PRODUCT(1,2))');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('2');
            helper.edit('N3', '=ABS(MIN(G2:G8))');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('1');
            helper.edit('N4', '=ABS(MAX(G2:G8))');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('13');
            helper.edit('N5', '=ABS(IF(G1>G4,2,3))');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('2');
            helper.edit('N6', '=SUM(ABS(G5),3)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('14');
            helper.edit('N7', '=PRODUCT(ABS(G7),ABS(3))');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('39');
            helper.edit('N8', '=MIN(ABS(24),ABS(28))');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('24');
            helper.edit('N9', '=MAX(ABS(24),ABS(28))');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('28');
            helper.edit('N10', '=ABS("")');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('#VALUE!');
            helper.edit('N11', '=ABS(" ")');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('#VALUE!');
            helper.edit('N12', '"hello"');
            helper.edit('N13', '=ABS(N12)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('#VALUE!');
            helper.edit('N14', '"TRUE"');
            helper.edit('N15', '=ODD(N14)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('#VALUE!');
            helper.edit('N16', '=ABS(O14)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('0');
            helper.edit('N17', '"123"');
            helper.edit('N18', '=ABS(N17)');
            expect(helper.invoke('getCell', [17, 13]).textContent).toBe('#VALUE!');
            done();
        });
        it('ABS Formula with more than 1 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N19');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ABS(-1,-2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ABS(-1,-2)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N19', '=ABS(-1)');
            done();
        });
    });

    describe('Sort Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, { rows: [{ cells: [{ value:'10' }] },{ cells: [{ value:'21' }] }, { cells: [{ value:'5' }] }, { cells: [{ value:'42' }] } ] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SORT Formula with Reverse Row Selection->', (done: Function) => {
            helper.edit('I1', '=SORT(D11:D2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('10');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('50');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"10","formula":"=SORT(D11:D2)"}');
            done();
        });
        it('SORT Formula with Reverse Column Selection->', (done: Function) => {
            helper.edit('J1', '=SORT(H5:D5)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('15');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('67');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"15","formula":"=SORT(H5:D5)"}');
            done();
        });
        it('SORT Formula with By Column as True->', (done: Function) => {
            helper.edit('J2', '=SORT(D2:D11,1,-1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":"10","formula":"=SORT(D2:D11,1,-1,TRUE)"}');
            done();
        });
        it('SORT Formula with invalid number sort order->', (done: Function) => {
            helper.edit('K2', '=SORT(D2:D11,1,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=SORT(D2:D11,1,2)"}');
            done();
        });
        it('SORT Formula with value 0 as Sort index->', (done: Function) => {
            helper.edit('K3', '=SORT(D2:D11,0)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"#VALUE!","formula":"=SORT(D2:D11,0)"}');
            done();
        });
        it('SORT Formula with invalid value for by Column->', (done: Function) => {
            helper.edit('K4', '=SORT(D2:D11,1,-1,ed)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#NAME?","formula":"=SORT(D2:D11,1,-1,ed)"}');
            done();
        });
        it('SORT Formula with value refered form another sheet->', (done: Function) => {
            helper.edit('K5', '=SORT(Sheet2!A1:A4)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('5');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('42');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"5","formula":"=SORT(Sheet2!A1:A4)"}');
            done();
        });
        it('SORT Formula with no inputs ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('L2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SORT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SORT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L2', '=SORT(G2:G5)');
            done();
        });
    });

    describe('Formula - Checking VIII ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNTIF Formula ->', (done: Function) => {
            helper.edit('I1', '=COUNTIF(D2:D11,"20")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('3');
            done();
        });
        it('COUNTIF Formula with greater than equal to operator ->', (done: Function) => {
            helper.edit('I2', '=COUNTIF(D2:D11,">=30")');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toBe('=COUNTIF(D2:D11,">=30")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('5');
            done();
        });
        it('COUNTIF Formula with not equal to operator ->', (done: Function) => {
            helper.edit('I3', '=COUNTIF(D2:D11,"<>30")');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].formula).toBe('=COUNTIF(D2:D11,"<>30")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('9');
            done();
        });
        it('COUNTIF Formula with Greater than operator ->', (done: Function) => {
            helper.edit('I4', '=COUNTIF(D2:D11,">30")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('4');
            done();
        });
        it('COUNTIF Formula with Less than operator ->', (done: Function) => {
            helper.edit('I5', '=COUNTIF(D2:D11,"<30")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('5');
            done();
        });
        it('MATCH Formula for without input->', (done: Function) => {
            helper.edit('I6', '=MATCH("",A2:A11)');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].formula).toBe('=MATCH("",A2:A11)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#N/A');
            done();
        });
        it('SUBTOTAL Formula Case I->', (done: Function) => {
            helper.edit('J1', '=SUBTOTAL(1,d2:d11)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('27.7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"27.7","formula":"=SUBTOTAL(1,d2:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case II->', (done: Function) => {
            helper.edit('J2', '=SUBTOTAL(2,d1:d11)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":10,"formula":"=SUBTOTAL(2,d1:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case III->', (done: Function) => {
            helper.edit('J3', '=SUBTOTAL(3,d1:d11)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('11');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":11,"formula":"=SUBTOTAL(3,d1:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case IV->', (done: Function) => {
            helper.edit('J4', '=SUBTOTAL(4,d2:d11)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('50');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"50","formula":"=SUBTOTAL(4,d2:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case V->', (done: Function) => {
            helper.edit('J5', '=SUBTOTAL(5,d2:d11)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"10","formula":"=SUBTOTAL(5,d2:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case VI->', (done: Function) => {
            helper.edit('J6', '=SUBTOTAL(6,d2:d5)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('60000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":"60000","formula":"=SUBTOTAL(6,d2:d5)"}');
            done();
        });
        it('SUBTOTAL Formula Case VIII->', (done: Function) => {
            helper.edit('J7', '=SUBTOTAL(8,A2:A3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('Casual ShoesSports Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"Casual ShoesSports Shoes","formula":"=SUBTOTAL(8,A2:A3)"}');
            done();
        });
        it('SUBTOTAL Formula Case XI->', (done: Function) => {
            helper.edit('J8', '=SUBTOTAL(9,d2:d11)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('277');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{"value":277,"formula":"=SUBTOTAL(9,d2:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case X->', (done: Function) => {
            helper.edit('J9', '=SUBTOTAL(10,d1:d11)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('25.18181818');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[9])).toBe('{"value":25.181818181818183,"formula":"=SUBTOTAL(10,d1:d11)"}');
            done();
        });
        it('SUBTOTAL Formula Case XI->', (done: Function) => {
            helper.edit('E2', '-20');
            helper.edit('J10', '=SUBTOTAL(11,e2)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[9])).toBe('{"value":20,"formula":"=SUBTOTAL(11,e2)"}');
            done();
        });
        it('LN Formula->', (done: Function) => {
            helper.edit('K1', '=LN(1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":0,"formula":"=LN(1)"}');
            done();
        });
        it('LN Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LN()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LN()';
            helper.triggerKeyNativeEvent(13);
            setTimeout(() => {
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
                expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
                helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
                helper.edit('K3', '=LN(10);');
                done();
            });
        });
        it('LN Formula with String inputs->', (done: Function) => {
            helper.edit('K4', '=LN(sa)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#NAME?","formula":"=LN(sa)"}');
            done();
        });
        it('LN Formula with more than 1 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LN(3,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LN(3,2)';
            helper.triggerKeyNativeEvent(13);
            setTimeout(() => {
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
                expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
                helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
                helper.edit('K5', '=LN(3)');
                done();
            });
        });
        it('SUMIF Formula with more than 3 inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF(A2:A5,"Casual Shoes",D2:D4,E2:E4)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF(A2:A5,"Casual Shoes",D2:D4,E2:E4)';
            helper.triggerKeyNativeEvent(13);
            setTimeout(() => {
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
                expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
                helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
                helper.edit('K6', '=SUMIF(A2:A5,"Casual Shoes",D2:D4)');
                done();
            });
        });
    });

    describe('TIME Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }]
                }, {
                    rows: [
                        { cells: [{ value: '54' }] }, { cells: [{ value: '98.564' }] }, { cells: [{ value: '"31-Jan-2018"' }] },
                        { cells: [{ value: '-54' }] }, { cells: [{ value: '32' }] }, { cells: [{ value: 'one' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '"TRUE"' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('TIME Formula ->', (done: Function) => {
            helper.edit('I1', '=TIME(6,6,6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('6:06 AM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0.2542361111111111","formula":"=TIME(6,6,6)","format":"h:mm AM/PM","formattedText":"6:06 AM"}');
            done();
        });
        it('TIME Formula with Hour value as > 12 ->', (done: Function) => {
            helper.edit('I2', '=TIME(14,30,30)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('2:30 PM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"0.6045138888888889","formula":"=TIME(14,30,30)","format":"h:mm AM/PM","formattedText":"2:30 PM"}');
            done();
        });
        it('TIME Formula with Hour value = 0 ->', (done: Function) => {
            helper.edit('I3', '=TIME(0,5,30)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('12:05 AM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"0.0038194444444444443","formula":"=TIME(0,5,30)","format":"h:mm AM/PM","formattedText":"12:05 AM"}');
            done();
        });
        it('TIME Formula with cell Reference values->', (done: Function) => {
            helper.edit('I4', '=TIME(D2,D3,D4)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('10:20 AM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"0.430787037037037","formula":"=TIME(D2,D3,D4)","format":"h:mm AM/PM","formattedText":"10:20 AM"}');
            done();
        });
        it('TIME Formula with cell having string inputs->', (done: Function) => {
            helper.edit('I5', '=TIME(A5,A8,A10)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#VALUE!","formula":"=TIME(A5,A8,A10)","format":"h:mm AM/PM"}');
            done();
        });
        it('TIME Formula with string inputs->', (done: Function) => {
            helper.edit('I6', '=TIME(a,b,c)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"#NAME?","formula":"=TIME(a,b,c)","format":"h:mm AM/PM"}');
            done();
        });
        it('TIME Formula with hour value > 32767->', (done: Function) => {
            helper.edit('I7', '=TIME(32768,3,4)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#NUM!","formula":"=TIME(32768,3,4)","format":"h:mm AM/PM"}');
            done();
        });
        it('TIME formula with empty arguments', (done: Function) => {
            helper.edit('I8', '=TIME(,,);');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('12:00 AM');
            helper.edit('I9', '=TIME(,45,43);');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('12:45 AM');
            helper.edit('I10', '=TIME(15,34,);');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('3:34 PM');
            done();
        });
        it('TIME formula with negative numbers as arguments', (done: Function) => {
            helper.edit('I11', '=TIME(-1,34,43);');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('#NUM!');
            helper.edit('I12', '=TIME(0,-45,43);');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('#NUM!');
            helper.edit('I13', '=TIME(2,0,-34);');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('1:59 AM');
            done();
        });
        it('TIME formula with decimal numbers as arguments', (done: Function) => {
            helper.edit('I14', '=TIME(4.56,34.43,43);');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('4:34 AM');
            helper.edit('I15', '=TIME(5,-4.54,43);');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('4:56 AM');
            helper.edit('I16', '=TIME(2,34,34.43);');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('2:34 AM');
            done();
        });
        it('TIME formula with logical values as arguments', (done: Function) => {
            helper.edit('J1', '=TIME(TRUE,56,43);');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('1:56 AM');
            helper.edit('J2', '=TIME(7,TRUE,32);');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('7:01 AM');
            helper.edit('J3', '=TIME(14,FALSE,23);');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('2:00 PM');
            helper.edit('J4', 'TRUE');
            helper.edit('J5', 'FALSE');
            helper.edit('J6', '"TRUE"');
            helper.edit('J7', '"FALSE"');
            helper.edit('J8', '=TIME("TRUE",5,3);');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('#VALUE!');
            helper.edit('J9', '=TIME(4,"FALSE",2);');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#VALUE!');
            helper.edit('J10', '=TIME(J4,43,23);');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('1:43 AM');
            helper.edit('J11', '=TIME(4,J5,23);');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('4:00 AM');
            helper.edit('J12', '=TIME(J6,FALSE,23);');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#VALUE!');
            helper.edit('J13', '=TIME(43,J7,23);');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('TIME formula with cell reference values as arguments', (done: Function) => {
            helper.edit('K1', '=TIME(A1,6,43);');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('#VALUE!');
            helper.edit('K2', '=TIME(B3,43,32);');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NUM!');
            helper.edit('K3', '=TIME(4,C4,23);');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('4:00 AM');
            helper.edit('K4', '=TIME(15,54,D5);');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('3:54 PM');
            helper.edit('K5', '=TIME(23,E5,43);');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('11:20 PM');
            helper.edit('K6', '=TIME(4,F6,23);');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('9:00 AM');
            helper.edit('K7', '=TIME(A20,55,23);');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('12:55 AM');
            done();
        });
        it('TIME Formula with invalid arguments->', (done: Function) => {
            helper.edit('K8', '=TIME("one",5,3);');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#VALUE!');
            helper.edit('K9', '=TIME(4,one,2);');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#NAME?');
            helper.edit('K10', '=TIME("",4,3);');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('#VALUE!');
            helper.edit('K11', '=TIME(3," ",3);');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('#VALUE!');
            helper.edit('K12', '=TIME(4,54,32768);');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('#NUM!');
            helper.edit('K13', '123Hello');
            helper.edit('K14', '=TIME(4,K13,23);');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('TIME formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('L1', '=TIME($B$8,1,32)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('#NUM!');
            helper.edit('L2', '=TIME($C$7,3,$D$21)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('12:03 AM');
            helper.edit('L3', '=TIME($D$5,4,$D$2)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('3:04 PM');
            helper.edit('L4', '=TIME($E$3,2,$E$6)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('6:02 AM');
            helper.edit('L5', '=TIME($F$6,5,$A$20)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('12:05 PM');
            helper.edit('L6', '=TIME($A$5,2,5)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('TIME formula with Sheet references as arguments->', (done: Function) => {
            helper.edit('L7', '=TIME(Sheet2!A1,1,Sheet1!C3)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('6:01 AM');
            helper.edit('L8', '=TIME(Sheet1!E3,3,45)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('6:03 AM');
            helper.edit('L9', '=TIME(Sheet2!A4,4,Sheet2!B13)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('#NUM!');
            helper.edit('L10', '=TIME(Sheet1!C10,11,65)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('12:12 AM');
            done();
        });
        it('TIME formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L11', '=TIME(Sheet2!$A$3,12,32)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#VALUE!');
            helper.edit('L12', '=TIME(Sheet1!$E$3,15,Sheet2!$A$8)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('6:15 AM');
            helper.edit('L13', '=TIME(Sheet2!$A$2,1,65)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('2:02 AM');
            helper.edit('L14', '=TIME(Sheet1!$C$4,3,Sheet1!$D$5)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('12:03 AM');
            helper.edit('L15', '=TIME(Sheet2!$A$5,2,43)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('8:02 AM');
            helper.edit('L16', '=TIME(Sheet2!$A$6,3,5)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('TIME formula with nested formulas->', (done: Function) => {
            helper.edit('M1', '=TIME(TODAY(),3,43)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#NUM!');
            helper.edit('M2', '=TIME(DAY(54564),2,34)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('9:02 PM');
            helper.edit('M3', '=TIME(DATE(2019,3,30),25,43)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#NUM!');
            helper.edit('M4', '=TIME(SUM(C2:C6),2,4)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('1:02 AM');
            helper.edit('M5', '=TIME(453,1,54)-TIME(211,45,43)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('1:16 AM');
            helper.edit('M6', '=TIME(HOUR("23:45"),MINUTE("12:30 AM"),SECOND("04:56:43 PM"))');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('11:30 PM');
            done();
        });
        it('TIME formula with invalid arguments in all->', (done: Function) => {
            helper.edit('M7', '=TIME("one",one,43)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            helper.edit('M8', '=TIME(one,"hello",34)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#NAME?');
            helper.edit('M9', '=TIME(32,one,"hello")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#NAME?');
            helper.edit('M10', '=TIME(2,34,"one")');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('TIME Formula with no input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('M11');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=TIME()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=TIME()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M11', '=TIME(3,0,0)');
            done();
        });
    });

    describe('AVERAGEA Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Decimals' }] }, { cells: [{ index: 8, value: '102.32' }] },
                        { cells: [{ index: 8, value: '105.43' }] }, { cells: [{ index: 8, value: '103.23' }] },
                        { cells: [{ index: 8, value: '1002.2323' }] }, { cells: [{ index: 8, value: '1023.3219' }] },
                        { cells: [{ index: 8, value: '1022.4567' }] }, { cells: [{ index: 8, value: '320.12354' }] },
                        { cells: [{ index: 8, value: '102.45674' }] }, { cells: [{ index: 8, value: '103.32321' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: '-3221' }] }, { cells: [{ index: 8, value: '-1253' }] },
                        { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '119', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '321', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12.56', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '2', format: '0%' }] },
                        { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '12' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '76' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '93' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'ABC' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('AVERAGEA Formula with ranged cell references values as arguments->', (done: Function) => {
            helper.edit('J1', '=AVERAGEA(A2:A10)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0');
            helper.edit('J2', '=AVERAGEA(B3:B10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('41842.875');
            helper.edit('J3', '=AVERAGEA(C3:C8)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0.217314815');
            helper.edit('J4', '=AVERAGEA(D2:D11)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('27.7');
            helper.edit('J5', '=AVERAGEA(I2:I6)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('467.30684');
            helper.edit('J6', '=AVERAGEA(I6:I10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('514.336418');
            helper.edit('J7', '=AVERAGEA(I19:I21)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-1491.333333');
            helper.edit('J8', '=AVERAGEA(I24:I25)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('65.78');
            helper.edit('J9', '=AVERAGEA(I26:I27)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('14.5');
            helper.edit('J10', '=AVERAGEA(I28:I29)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('58.5');
            helper.edit('J11', '=AVERAGEA(I13:I16)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0.5');
            helper.edit('J12', '=AVERAGEA(I13:I29)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('-220.8494118');
            done();
        });
        it('AVERAGEA Formula with single cell references values as arguments->', (done: Function) => {
            helper.edit('J13', '=AVERAGEA(I21)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('0');
            helper.edit('J14', '=AVERAGEA(F3)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('600');
            helper.edit('J15', '=AVERAGEA(C13)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J16', '=AVERAGEA(D3,E7,I4,I20,F9)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('-159.954');
            helper.edit('J17', '=AVERAGEA(A6:A8,D7,F6,G10)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('58.66666667');
            helper.edit('J18', '=AVERAGEA(I21,G2,A8:A11)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('0.166666667');
            helper.edit('J19', '=AVERAGEA(E7,I11,E10,C6,A10)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('AVERAGEA Formula with different format arguments as input in General formatted cells ->', (done: Function) => {
            helper.edit('K1', '=AVERAGEA(E2:E11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('17.5');
            helper.edit('K2', '=AVERAGEA(I26:I27)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('14.5');
            helper.edit('K3', '=AVERAGEA(I24:I25)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('65.78');
            helper.edit('K4', '=AVERAGEA(I28:I29)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('58.5');
            helper.edit('K5', '=AVERAGEA(I2:I10)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('431.6549322');
            done();
        });
        it('AVERAGEA Formula with different format arguments as input in Currency formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['$#,##0.00', 'K6']);
            helper.edit('K6', '=AVERAGEA(E2:E11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('$17.50');
            helper.invoke('numberFormat', ['$#,##0.00', 'K7']);
            helper.edit('K7', '=AVERAGEA(I26:I27)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('$14.50');
            helper.invoke('numberFormat', ['$#,##0.00', 'K8']);
            helper.edit('K8', '=AVERAGEA(I24:I25)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('$65.78');
            helper.invoke('numberFormat', ['$#,##0.00', 'K9']);
            helper.edit('K9', '=AVERAGEA(I28:I29)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('$58.50');
            helper.invoke('numberFormat', ['$#,##0.00', 'K10']);
            helper.edit('K10', '=AVERAGEA(I2:I10)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('$431.65');
            done();
        });
        it('AVERAGEA Formula with different format arguments as input in Percentage formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0%', 'K11']);
            helper.edit('K11', '=AVERAGEA(E2:E11)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('1750%');
            helper.invoke('numberFormat', ['0%', 'K12']);
            helper.edit('K12', '=AVERAGEA(I26:I27)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('1450%');
            helper.invoke('numberFormat', ['0%', 'K13']);
            helper.edit('K13', '=AVERAGEA(I24:I25)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('6578%');
            helper.invoke('numberFormat', ['0%', 'K14']);
            helper.edit('K14', '=AVERAGEA(I28:I29)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('5850%');
            helper.invoke('numberFormat', ['0%', 'K15']);
            helper.edit('K15', '=AVERAGEA(I2:I10)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('43165%');
            done();
        });
        it('AVERAGEA Formula with different format arguments as input in Scientific formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0.0000E+00', 'K16']);
            helper.edit('K16', '=AVERAGEA(E2:E11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('1.7500E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K17']);
            helper.edit('K17', '=AVERAGEA(I26:I27)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('1.4500E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K18']);
            helper.edit('K18', '=AVERAGEA(I24:I25)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('6.5780E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K19']);
            helper.edit('K19', '=AVERAGEA(I28:I29)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('5.8500E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K20']);
            helper.edit('K20', '=AVERAGEA(I2:I10)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('4.3165E+02');
            done();
        });
        it('AVERAGEA Formula with different format arguments as input in Number formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['#,##0.00', 'K21']);
            helper.edit('K21', '=AVERAGEA(E2:E11)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('17.50');
            helper.invoke('numberFormat', ['#,##0.00', 'K22']);
            helper.edit('K22', '=AVERAGEA(I26:I27)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('14.50');
            helper.invoke('numberFormat', ['#,##0.00', 'K23']);
            helper.edit('K23', '=AVERAGEA(I24:I25)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('65.78');
            helper.invoke('numberFormat', ['#,##0.00', 'K24']);
            helper.edit('K24', '=AVERAGEA(I28:I29)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('58.50');
            helper.invoke('numberFormat', ['#,##0.00', 'K25']);
            helper.edit('K25', '=AVERAGEA(I2:I10)');
            expect(helper.invoke('getCell', [24, 10]).textContent).toBe('431.65');
            done();
        });
        it('AVERAGEA Formula with list of different arguments as input->', (done: Function) => {
            helper.edit('L1', '=AVERAGEA(D2:D11,E7,G7,42,"2")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('25.28571429');
            helper.edit('L2', '=AVERAGEA(D2:D11,E11,G2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('24');
            helper.edit('L3', '=AVERAGEA(1,3,4,"a")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#VALUE!');
            helper.edit('L4', '=AVERAGEA("1","323",F9:F10,"Hi123","123Hi","H123i")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#VALUE!');
            helper.edit('L5', '=AVERAGEA("HI123",123,"123HI")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            helper.edit('L6', '=AVERAGEA("1")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('1');
            done();
        });
        it('AVERAGEA Formula with logical value as argument->', (done: Function) => {
            helper.edit('L7', '=AVERAGEA(1,3,"43",TRUE)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('12');
            helper.edit('L8', '=AVERAGEA(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('11');
            helper.edit('L9', '=AVERAGEA(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('11');
            helper.edit('L10', '=AVERAGEA(TRUE,FALSE)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('0.5');
            helper.edit('L11', '=AVERAGEA("1",TRUE,FALSE,4)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('1.5');
            helper.edit('L12', '=AVERAGEA("TRUE","FALSE")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            helper.edit('L13', '=AVERAGEA(I15:I18)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0.5');
            helper.edit('L14', '=AVERAGEA(I15,I17,I16,I18)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('0.5');
            helper.edit('L15', '=AVERAGEA(FALSE)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('0');
            done();
        });
        it('AVERAGEA Formula with nested formula as input->', (done: Function) => {
            helper.edit('L16', '=AVERAGEA(LEN(D10),LEN(D8),LEN(E10))');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('2');
            helper.edit('L17', '=AVERAGEA(GEOMEAN(G2:G6),GEOMEAN(H3:H7))');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('29.10251425');
            helper.edit('L18', '=AVERAGEA(COUNT(F16:F20),10)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('5');
            done();
        });
        it('AVERAGEA Formula with worst case value as argument->', (done: Function) => {
            helper.edit('M1', '=AVERAGEA(A2:A11)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('0');
            helper.edit('M2', '=AVERAGEA(I12,G10)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NAME?');
            helper.edit('M3', '=AVERAGEA(,)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('0');
            helper.edit('M4', '=AVERAGEA(1,3, ,0)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('1');
            helper.edit('M5', '=AVERAGEA(0)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('0');
            helper.edit('M6', '=AVERAGEA(1,2,"")');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            helper.edit('M7', '=AVERAGEA(I11)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            helper.edit('M8', '=AVERAGEA(I12)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#NAME?');
            helper.edit('M9', '=AVERAGEA("Hello")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#VALUE!');
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('M10');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEA()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEA()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M10', '=AVERAGEA(0)');
            done();
        });
        it('AVERAGEA Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=AVERAGEA($F$2:$F$20)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('472');
            helper.edit('N2', '=AVERAGEA($I$4:$I$7,$F$4:$F$7)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('606.4051125');
            helper.edit('N3', '=AVERAGEA($I$3:$I$9,$H$8)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('461.6563975');
            done();
        });
        it('AVERAGEA Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N4', '=AVERAGEA(Sheet2!A1:A11)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('39.55555556');
            helper.edit('N5', '=AVERAGEA(Sheet2!A1:A10,Sheet1!F2:F11)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('267.1578947');
            helper.edit('N6', '=AVERAGEA(Sheet1!D1:D10,Sheet2!A2:A11)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('31.72222222');
            helper.edit('N7', '=AVERAGEA(Sheet1!E2:E11,Sheet1!H2:H11)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('36.45');
            helper.edit('N8', '=AVERAGEA(Sheet2!A5,Sheet2!A2)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('56.5');
            helper.edit('N9', '=AVERAGEA(Sheet1!D5,Sheet1!E2)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('17.5');
            helper.edit('N10', '=AVERAGEA(Sheet1!D5,Sheet2!A3)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('45.5');
            helper.edit('N11', '=AVERAGEA(Sheet2!A5,Sheet1!E3)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('61.5');
            done();
        });
        it('AVERAGEA Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N12', '=AVERAGEA(Sheet2!$A$1:$A$6,Sheet2!$C$3:$C$10,Sheet2!$B$12,$D$6)');
            expect(helper.invoke('getCell', [11, 13]).textContent).toBe('42.28571429');
            helper.edit('N13', '=AVERAGEA(Sheet2!$A$1:$A$10,Sheet1!$F$2:$F$11)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('267.1578947');
            helper.edit('N14', '=AVERAGEA(Sheet1!$E$2:$E$11,Sheet1!$H$2:$H$11)');
            expect(helper.invoke('getCell', [13, 13]).textContent).toBe('36.45');
            helper.edit('N15', '=AVERAGEA(Sheet1!$E$2:$E$11)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('17.5');
            helper.edit('N16', '=AVERAGEA(Sheet2!$A$7)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('40');
            helper.edit('N17', '=AVERAGEA(Sheet2!$A$5,Sheet1!$E$2)');
            expect(helper.invoke('getCell', [16, 13]).textContent).toBe('56.5');
            done();
        });
    });

    describe('COUNTA Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNTA Formula with ranged cell references values as arguments->', (done: Function) => {
            helper.edit('J1', '=COUNTA(A2:A10)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('9');
            helper.edit('J2', '=COUNTA(B2:B10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('9');
            helper.edit('J3', '=COUNTA(C2:C9)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('8');
            helper.edit('J4', '=COUNTA(D3:D10)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('8');
            helper.edit('J5', '=COUNTA(I17:I18)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('2');
            helper.edit('J6', '=COUNTA(I15:I16)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('2');
            helper.edit('J7', '=COUNTA(I19:I20)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('2');
            helper.edit('J8', '=COUNTA(I13:I14)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('2');
            helper.edit('J9', '=COUNTA(I2:I5)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('4');
            helper.edit('J10', '=COUNTA(A13:E16)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('0');
            helper.edit('J11', '=COUNTA(I2:I20)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('19');
            done();
        });
        it('COUNTA Formula with single cell references values as arguments->', (done: Function) => {
            helper.edit('J12', '=COUNTA(A4)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('1');
            helper.edit('J13', '=COUNTA(F6)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('1');
            helper.edit('J14', '=COUNTA(C19)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('0');
            helper.edit('J15', '=COUNTA(G5,F14,F10,E13,E9)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('3');
            done();
        });
        it('COUNTA Formula with list of different arguments as input->', (done: Function) => {
            helper.edit('J16', '=COUNTA(D2:D11,E7,G7,42,"2")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('14');
            helper.edit('J17', '=COUNTA(D2:D11,E7,G7)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('12');
            helper.edit('J18', '=COUNTA("a","123")');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('2');
            helper.edit('J19', '=COUNTA("1","323",F9:F10,"Hi123","123Hi","H123i")');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('7');
            helper.edit('J20', '=COUNTA("HI123",123,"123HI")');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('3');
            helper.edit('J21', '=COUNTA(1,a,"1","a",TRUE,"true",FALSE,"false")');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('8');
            done();
        });
        it('COUNTA Formula with logical value as argument->', (done: Function) => {
            helper.edit('K1', '=COUNTA(1,3,"43",TRUE)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('4');
            helper.edit('K2', '=COUNTA(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('3');
            helper.edit('K3', '=COUNTA("TRUE","FALSE","TRUE")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('3');
            helper.edit('K4', '=COUNTA(32,2/7/2023,"123","FALSE")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('4');
            helper.edit('K5', '=COUNTA(I3,I5,E6)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('3');
            helper.edit('K6', '=COUNTA(I2:I5,F7:F8,A6:A9)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('10');
            done();
        });
        it('COUNTA Formula with worst case value as argument->', (done: Function) => {
            helper.edit('K7', '=COUNTA(,)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('2');
            helper.edit('K8', '=COUNTA( " ")');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('1');
            helper.edit('K9', '=COUNTA(1,,5)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('3');
            helper.edit('K10', '=COUNTA(A12:H14)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('0');
            helper.edit('K11', '=COUNTA(I9:I12)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('4');
            helper.edit('K12', '=COUNTA(0)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('1');
            helper.edit('K12', '=COUNTA(1,2,3,,,,,,,)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('10');
            done();
        });
        it('COUNTA Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('L1', '=COUNTA($D$2:$H$10)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('45');
            helper.edit('L2', '=COUNTA(32,$F$9,$A$10,$E$14)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('3');
            helper.edit('L3', '=COUNTA($C$3:$C$10,$E$5)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('9');
            done();
        });
        it('COUNTA Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L4', '=COUNTA(Sheet2!A1:A10)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('9');
            helper.edit('L5', '=COUNTA(Sheet2!A2:B5,Sheet1!G3:G10)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('12');
            helper.edit('L6', '=COUNTA(Sheet1!B2:B9,Sheet2!A3:A9)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('15');
            helper.edit('L7', '=COUNTA(Sheet1!A2:B10,Sheet1!H3:H9)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('25');
            helper.edit('L8', '=COUNTA(Sheet2!A5)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('1');
            done();
        });
        it('COUNTA Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L9', '=COUNTA(Sheet2!$A$1:$A$6,Sheet2!$C$3:$C$10,Sheet2!$B$12,$D$6)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('7');
            helper.edit('L10', '=COUNTA(Sheet1!$B$3:$B$10,Sheet2!$A$2:$A$8)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('15');
            helper.edit('L11', '=COUNTA(Sheet2!$A$3:$B$5,Sheet1!$G$3:$G$10)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('11');
            helper.edit('L12', '=COUNTA(Sheet1!$A$2:$B$10)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('18');
            helper.edit('L13', '=COUNTA(Sheet2!$A$7)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('1');
            helper.edit('L14', '=COUNTA(Sheet1!$A$6)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('1');
            done();
        });
    });

     describe('COUNTIF Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNTIF Formula with operators as criteria ->', (done: Function) => {
            helper.edit('J1', '=COUNTIF(D2:D11,"<25")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('5');
            helper.edit('J2', '=COUNTIF(D2:D11,">35")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('3');
            helper.edit('J3', '=COUNTIF(D2:D11,"<="&E4)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('2');
            helper.edit('J4', '=COUNTIF(D2:D11,">="&E3)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('5');
            helper.edit('J5', '=COUNTIF(F2:F11,"<>300")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('7');
            helper.edit('J6', '=COUNTIF(E2:E10,D4)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('3');
            done();
        });
        it('COUNTIF Formula with wildcard * as criteria* ->', (done: Function) => {
            helper.edit('J7', '=COUNTIF(D2:D11,"2*")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            helper.edit('J8', '=COUNTIF(D2:D11,"0*")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0');
            helper.edit('J9', '=COUNTIF(A2:A11,"C*")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('2');
            helper.edit('J10', '=COUNTIF(A2:A11,"*es")');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('5');
            helper.edit('J11', '=COUNTIF(A2:A11,"s*ers")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('2');
            done();
        });
        it('COUNTIF Formula with wildcard ? as criteria ->', (done: Function) => {
            helper.edit('J12', '=COUNTIF(D2:D11,"?0")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('0');
            helper.edit('J13', '=COUNTIF(D2:D11,"1?")');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('0');
            helper.edit('J14', '=COUNTIF(A2:A11,"???????Shoes")');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('3');
            helper.edit('J15', '=COUNTIF(A2:A11,"???????")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('1');
            helper.edit('J16', '=COUNTIF(A2:A11,"<>????????")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('8');
            done();
        });
        it('COUNTIF Formula with different kind of value as criteria ->', (done: Function) => {
            helper.edit('K1', '=COUNTIF(G2:G10,11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('1');
            helper.edit('K2', '=COUNTIF(D2:D10,"20")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('3');
            helper.edit('K3', '=COUNTIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('4');
            helper.edit('K4', '=COUNTIF(H2:H11,"<>"&G6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('9');
            helper.edit('K5', '=COUNTIF(A2:A7,"*"&A3)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('1');
            helper.edit('K6', '=COUNTIF(A2:A7,A4&"*")');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('1');
            helper.edit('K7', '=COUNTIF(A2:A11,"Casual Shoes")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('1');
            done();
        });
        it('COUNTIF Formula with experssion as criteria ->', (done: Function) => {
            helper.edit('K8', '=COUNTIF(H2:H11,">"&G6+13)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('8');
            helper.edit('K9', '=COUNTIF(H2:H10,F5-134)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('1');
            done();
        });
        it('Add 2 COUNTIF Formulas->', (done: Function) => {
            helper.edit('K10', '=(COUNTIF(D2:D11,">30")+COUNTIF(D2:D11,"<30"))');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('9');
            done();
        });
        it('COUNTIF Formula with worst case value as argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K11');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=COUNTIF(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=COUNTIF(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K11', '=COUNTIF(G2:G10,11)');
            helper.edit('K12', '=COUNTIF(,"*e")');
            const dialog2: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K12', '=COUNTIF(G2:G10,11)');
            helper.edit('K13', '=COUNTIF(E2:E9,)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('0');
            helper.edit('K14', '=COUNTIF(AWFE,20)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#NAME?');
            helper.edit('K15', '=COUNTIF("A3","*e")');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#NAME?');
            helper.edit('K16', '=COUNTIF(O2:O6,)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('0');
            done();
        });
        it('COUNTIF Formula with text,empty,number value as range and * or <>* as criteria->', (done: Function) => {
            helper.edit('K17', '=COUNTIF(A2:A10,"*")');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('9');
            helper.edit('K18', '=COUNTIF(E2:E11,"*")');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('0');
            helper.edit('K19', '=COUNTIF(P2:P10,"*")');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('0');
            helper.edit('K20', '=COUNTIF(A2:A10,"<>*")');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('0');
            helper.edit('K21', '=COUNTIF(D2:D9,"<>*")');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('8');
            helper.edit('K22', '=COUNTIF(P2:P10,"<>*")');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('9');
            done();
        });
        it('COUNTIF Formula with different formatted value as arguments->', (done: Function) => {
            helper.edit('L1', '=COUNTIF(I6:I8,"<0")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('2');
            helper.edit('L2', '=COUNTIF(I15:I16,I16)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('1');
            helper.edit('L3', '=COUNTIF(I17:I18,">=12")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('2');
            helper.edit('L4', '=COUNTIF(I19:I20,115)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('1');
            helper.edit('L5', '=COUNTIF(I2:I20,">"&E2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('9');
            done();
        });
        it('COUNTIF Formula with Logical value as arguments->', (done: Function) => {
            helper.edit('L6', '=COUNTIF(I2:I5,"TRUE")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('2');
            helper.edit('L7', '=COUNTIF(I2:I5,"FALSE")');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('2');
            helper.edit('L8', '=COUNTIF(I2:I5,TRUE)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('2');
            helper.edit('L9', '=COUNTIF(I2:I5,FALSE)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('2');
            helper.edit('L10', '=COUNTIF(I2:I3,I2)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('2');
            helper.edit('L11', '=COUNTIF(I2:I3,I3)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('2');
            done();
        });
        it('COUNTIF Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('L12', '=COUNTIF($D$2:$D$11,"10")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('1');
            helper.edit('L13', '=COUNTIF($D$2:$D$11,$E2)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('3');
            helper.edit('L14', '=COUNTIF($H$2:$H$11,">"&$E$2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('8');
            done();
        });
        it('COUNTIF Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L15', '=COUNTIF(Sheet2!A1:A8,Sheet2!A1)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('1');
            helper.edit('L16', '=COUNTIF(Sheet2!A1:A8,"<10")');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('3');
            helper.edit('L17', '=COUNTIF(G2:G11,">="&Sheet2!A5)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('9');
            helper.edit('L18', '=COUNTIF(Sheet2!A1:A8,">="&Sheet1!G6)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('5');
            helper.edit('L19', '=COUNTIF(Sheet1!G2:G11,Sheet2!A5)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('1');
            helper.edit('L20', '=COUNTIF(Sheet1!E2:E11,">"&Sheet1!E6)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('6');
            done();
        });
        it('COUNTIF Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L21', '=COUNTIF(Sheet2!$A$1:$A$9,Sheet2!$A$2)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('1');
            helper.edit('L22', '=COUNTIF(Sheet2!$A$1:$A$8,"<10")');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('3');
            helper.edit('L23', '=COUNTIF(G2:G11,">="&Sheet2!$A$1)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('9');
            helper.edit('L24', '=COUNTIF(Sheet1!$G$2:$G$11,Sheet2!A5)');
            expect(helper.invoke('getCell', [23, 11]).textContent).toBe('1');
            helper.edit('L25', '=COUNTIF(Sheet1!$G$2:$G$11,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [24, 11]).textContent).toBe('1');
            helper.edit('L26', '=COUNTIF(Sheet2!$A$1:$A$8,">="&Sheet1!$G$6)');
            expect(helper.invoke('getCell', [25, 11]).textContent).toBe('5');
            helper.edit('L27', '=COUNTIF(Sheet1!$E$2:$E$11,">"&Sheet1!$E$5)');
            expect(helper.invoke('getCell', [26, 11]).textContent).toBe('2');
            done();
        });
        it('COUNTIF Formula with nested Formula as criteria->', (done: Function) => {
            helper.edit('M1', '=COUNTIF(E2:E11,SUM(D3))');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('3');
            helper.edit('M2', '=COUNTIF(G2:G11,COUNT(E2:E11))');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('1');
            helper.edit('M3', '=COUNTIF(F2:F11,">"LEN(E2:E11))');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('10');
            done();
        });
        it('COUNTIF formula with cell references like string argument as input->', (done: Function) => {
            helper.edit('M4', '=COUNTIF(Sheet2!A8:A9,"q1")');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('1');
            helper.edit('M5', '=COUNTIF(Sheet2!A8:A9,"Q2")');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('1');
            done();
        });
    });

    describe('SUMIF Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUMIF formula with argument having whole column range->', (done: Function) => {
            helper.edit('J1', '=SUMIF(H1:H100,">10")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('544');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toEqual('=SUMIF(H1:H100,">10")');
            done();
        });
        it('SUMIF formula with argument having with criteria value length > 255->', (done: Function) => {
            helper.edit('J2', '=SUMIF(H2:H5,">123456789090123456789012345678789012345678799999877654544121233456775345654323456543234565432345654345699012346587909098765432123456789876543234567876888889999998889999999987654345678987654323456789098765432345678909876543345678987654323456789876543456785")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toEqual('=SUMIF(H2:H5,">123456789090123456789012345678789012345678799999877654544121233456775345654323456543234565432345654345699012346587909098765432123456789876543234567876888889999998889999999987654345678987654323456789098765432345678909876543345678987654323456789876543456785")');
            done();
        });
        it('SUMIF Formula with operators as criteria ->', (done: Function) => {
            helper.edit('J3', '=SUMIF(D2:D11,"<25")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('85');
            helper.edit('J4', '=SUMIF(D2:D11,">35")');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('131');
            helper.edit('J5', '=SUMIF(D2:D11,"<="&E2,G2:G11)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('27');
            helper.edit('J6', '=SUMIF(D2:D11,">="&E2,G2:G11)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('65');
            helper.edit('J7', '=SUMIF(F2:F9,"<>300")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('2110');
            helper.edit('J8', '=SUMIF(E2:E10,D4)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('60');
            done();
        });
        it('SUMIF Formula with wildcard * as criteria* ->', (done: Function) => {
            helper.edit('J9', '=SUMIF(D2:D11,"2*",G2:G11)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0');
            helper.edit('J10', '=SUMIF(D2:D11,"0*",G2:G11)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('0');
            helper.edit('J11', '=SUMIF(A2:A11,"C*",E2:E11)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            helper.edit('J12', '=SUMIF(A2:A11,"*es",E2:E11)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('105');
            helper.edit('J13', '=SUMIF(A2:A11,"s*ers",E2:E11)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('40');
            done();
        });
        it('SUMIF Formula with wildcard ? as criteria ->', (done: Function) => {
            helper.edit('J14', '=SUMIF(D2:D11,"?0",G2:G11)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('0');
            helper.edit('J15', '=SUMIF(D2:D11,"1?",G2:G11)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('0');
            helper.edit('J16', '=SUMIF(A2:A11,"???????Shoes",E2:E11)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('65');
            helper.edit('J17', '=SUMIF(A2:A11,"???????",E2:E11)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('10');
            helper.edit('J18', '=SUMIF(A2:A11,"<>????????",E2:E11)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('145');
            done();
        });
        it('SUMIF Formula with different kind of value as criteria ->', (done: Function) => {
            helper.edit('K1', '=SUMIF(G2:G10,11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('11');
            helper.edit('K2', '=SUMIF(D2:D10,"20")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('60');
            helper.edit('K3', '=SUMIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('40');
            helper.edit('K4', '=SUMIF(E2:E11,"<>"&G6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('135');
            helper.edit('K5', '=SUMIF(A2:A11,"*"&A2,E2:E11)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('20');
            helper.edit('K6', '=SUMIF(A2:A11,A11&"*",D2:D11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('50');
            helper.edit('K7', '=SUMIF(A2:A11,"Casual Shoes",F2:F11)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('200');
            done();
        });
        it('SUMIF Formula with experssion as criteria ->', (done: Function) => {
            helper.edit('K8', '=SUMIF(H2:H11,">"&G6+13)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('530');
            helper.edit('K9', '=SUMIF(H2:H10,F5-134,E2:E11)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('30');
            done();
        });
        it('Add 2 SUMIF Formulas->', (done: Function) => {
            helper.edit('K10', '=(SUMIF(D2:D11,">30")+AVERAGEIF(D2:D11,"<30"))');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('179');
            done();
        });
        it('SUMIF Formula with worst case value as argument->', (done: Function) => {
            helper.edit('K11', '=SUMIF(E2:E9,)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('0');
            helper.edit('K12', '=SUMIF(O2:O6,)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('0');
            done();
        });
        it('SUMIF Formula with text,empty,number value as range and * or <>* as criteria->', (done: Function) => {
            helper.edit('K13', '=SUMIF(A2:A11,"*",G2:G11)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('77');
            helper.edit('K14', '=SUMIF(E2:E11,"*",G2:G11)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('0');
            helper.edit('K15', '=SUMIF(P2:P11,"*",G2:G11)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('0');
            helper.edit('K16', '=SUMIF(A2:A11,"<>*",G2:G11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('0');
            helper.edit('K17', '=SUMIF(D2:D1,"<>*",G2:G11)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('5');
            helper.edit('K18', '=SUMIF(P2:P11,"<>*",G2:G11)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('77');
            done();
        });
        it('SUMIF Formula with different formatted value as arguments->', (done: Function) => {
            helper.edit('L1', '=SUMIF(I6:I8,"<0")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('-3344');
            helper.edit('L2', '=SUMIF(I15:I16,I16)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('12.76');
            helper.edit('L3', '=SUMIF(I17:I18,">=12")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('29');
            helper.edit('L4', '=SUMIF(I19:I20,115)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('115');
            helper.edit('L5', '=SUMIF(I2:I20,">"&E2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('385');
            done();
        });
        it('SUMIF Formula with Logical value as arguments->', (done: Function) => {
            helper.edit('L6', '=SUMIF(I2:I5,"TRUE",G2:G5)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('6');
            helper.edit('L7', '=SUMIF(I2:I5,"FALSE",G2:G5)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('18');
            helper.edit('L8', '=SUMIF(I2:I5,TRUE,G2:G5)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('6');
            helper.edit('L9', '=SUMIF(I2:I5,FALSE,G2:G5)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('18');
            helper.edit('L10', '=SUMIF(I2:I3,I2,G2:G5)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('6');
            helper.edit('L11', '=SUMIF(I2:I5,I4,G2:G5)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('18');
            done();
        });
        it('SUMIF Formula with nested Formula as criteria->', (done: Function) => {
            helper.edit('L12', '=SUMIF(E2:E11,SUM(D3),F2:F11)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('1300');
            helper.edit('L13', '=SUMIF(G2:G11,COUNT(E2:E11),H2:H11)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('70');
            helper.edit('L14', '=SUMIF(F2:F11,">"LEN(E2:E11),H2:H11)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('554');
            done();
        });
        it('SUMIF Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=SUMIF($E$2:$E$11,"<15")');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('40');
            helper.edit('M2', '=SUMIF($A$2:$A$11,"T-Shirts",$D$2:$D$11)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('50');
            helper.edit('M3', '=SUMIF($H$2:$H$11,">="&$G$3)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('554');
            helper.edit('M4', '=SUMIF($D$3:$D$10,">"&$E$5,$H$3:$H$10)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('331');
            helper.edit('M5', '=SUMIF(D2:D10,$E$6,H2:H10)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('10');
            helper.edit('M6', '=SUMIF(D2:D10,E6,$H$2:$H$10)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('10');
            done();
        });
        it('SUMIF Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M7', '=SUMIF(Sheet2!A1:A8,Sheet2!A1)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('2');
            helper.edit('M8', '=SUMIF(Sheet2!A1:A10,"<10")');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('11');
            helper.edit('M9', '=SUMIF(G2:G11,">="&Sheet2!A5)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('76');
            helper.edit('M10', '=SUMIF(Sheet2!A1:A8,">="&Sheet1!G6)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('125');
            helper.edit('M11', '=SUMIF(Sheet1!G2:G11,Sheet2!A5)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('3');
            helper.edit('M12', '=SUMIF(Sheet1!E2:E11,">"&Sheet1!E6)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('135');
            done();
        });
        it('SUMIF Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M13', '=SUMIF(Sheet2!$A$1:$A$9,Sheet2!$A$2)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('20');
            helper.edit('M14', '=SUMIF(Sheet2!$A$1:$A$10,"<10")');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('11');
            helper.edit('M15', '=SUMIF(G2:G11,">="&Sheet2!$A$3)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('68');
            helper.edit('M16', '=SUMIF(Sheet1!F3:F10,">"&Sheet1!F5,Sheet1!D3:D10)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('132');
            helper.edit('M17', '=SUMIF(Sheet1!D3:D8,">"&Sheet2!A2,Sheet1!H3:H8)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('136');
            helper.edit('M18', '=SUMIF(Sheet2!$A$1:$A$8,">="&Sheet1!$G$6)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('125');
            helper.edit('M19', '=SUMIF(Sheet1!$E$2:$E$11,">"&Sheet1!$E$5)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('60');
            done();
        });
        it('SUMIF formula with cell references like string argument as input->', (done: Function) => {
            helper.edit('M20', '=SUMIF(Sheet2!A8:A9,"q1",Sheet1!G5:G6)');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('11');
            helper.edit('M21', '=SUMIF(Sheet2!A8:A9,"Q2",Sheet1!G5:G6)');
            expect(helper.invoke('getCell', [20, 12]).textContent).toBe('10');
            done();
        });
        it('SUMIF formula with invalid arguments shows error dialog cases ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=SUMIF(E2:E9,)');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF(E2:E9,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF(E2:E9,)';
            helper.triggerKeyNativeEvent(13);
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('0');
            helper.edit('N2', '=SUMIF(,">10")');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF(,">10")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF(,">10")';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=SUMIF(E2:E9,)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('0');
            helper.edit('N3', '=SUMIF(,)');
            spreadsheet.selectRange('N3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF(,)';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N3', '=SUMIF(E2:E9,)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('0');
            spreadsheet.selectRange('N4');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF(AWFE,20)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF(AWFE,20)';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N4', '=SUMIF(E2:E9,)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('0');
            helper.edit('N5', '=SUMIF("A3","*e")');
            spreadsheet.selectRange('N5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF("A3","*e")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF("A3","*e")';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N5', '=SUMIF(E2:E9,)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('0');
            done();
        });
    });

    describe('AVERAGEIF Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('AVERAGEIF formula with argument having whole column range->', (done: Function) => {
            helper.edit('J1', '=AVERAGEIF(H1:H100,">10")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('60.44444444');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toEqual('=AVERAGEIF(H1:H100,">10")');
            done();
        });
        it('AVERAGEIF formula with argument having with criteria value length > 255->', (done: Function) => {
            helper.edit('J2', '=AVERAGEIF(H2:H5,">123456789090123456789012345678789012345678799999877654544121233456775345654323456543234565432345654345699012346587909098765432123456789876543234567876888889999998889999999987654345678987654323456789098765432345678909876543345678987654323456789876543456785")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toEqual('=AVERAGEIF(H2:H5,">123456789090123456789012345678789012345678799999877654544121233456775345654323456543234565432345654345699012346587909098765432123456789876543234567876888889999998889999999987654345678987654323456789098765432345678909876543345678987654323456789876543456785")');
            done();
        });
        it('AVERAGEIF Formula with operators as criteria ->', (done: Function) => {
            helper.edit('J3', '=AVERAGEIF(D2:D11,"<25")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('17');
            helper.edit('J4', '=AVERAGEIF(D2:D11,">35")');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('43.66666667');
            helper.edit('J5', '=AVERAGEIF(D2:D11,"<="&E2,G2:G11)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('5.4');
            helper.edit('J6', '=AVERAGEIF(D2:D11,">="&E2,G2:G11)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('8.125');
            helper.edit('J7', '=AVERAGEIF(F2:F9,"<>300")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('422');
            helper.edit('J8', '=AVERAGEIF(E2:E10,D4)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('20');
            done();
        });
        it('AVERAGEIF Formula with wildcard * as criteria* ->', (done: Function) => {
            helper.edit('J9', '=AVERAGEIF(D2:D11,"2*",G2:G11)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J10', '=AVERAGEIF(D2:D11,"0*",G2:G11)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J11', '=AVERAGEIF(A2:A11,"C*",E2:E11)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('25');
            helper.edit('J12', '=AVERAGEIF(A2:A11,"*es",E2:E11)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('21');
            helper.edit('J13', '=AVERAGEIF(A2:A11,"s*ers",E2:E11)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('20');
            done();
        });
        it('AVERAGEIF Formula with wildcard ? as criteria ->', (done: Function) => {
            helper.edit('J14', '=AVERAGEIF(D2:D11,"?0",G2:G11)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J15', '=AVERAGEIF(D2:D11,"1?",G2:G11)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J16', '=AVERAGEIF(A2:A11,"???????Shoes",E2:E11)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('21.66666667');
            helper.edit('J17', '=AVERAGEIF(A2:A11,"???????",E2:E11)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('10');
            helper.edit('J18', '=AVERAGEIF(A2:A11,"<>????????",E2:E11)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('18.125');
            done();
        });
        it('AVERAGEIF Formula with different kind of value as criteria ->', (done: Function) => {
            helper.edit('K1', '=AVERAGEIF(G2:G10,11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('11');
            helper.edit('K2', '=AVERAGEIF(D2:D10,"20")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('20');
            helper.edit('K3', '=AVERAGEIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('10');
            helper.edit('K4', '=AVERAGEIF(E2:E11,"<>"&G6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('22.5');
            helper.edit('K5', '=AVERAGEIF(A2:A11,"*"&A2,E2:E11)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('20');
            helper.edit('K6', '=AVERAGEIF(A2:A11,A11&"*",D2:D11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('50');
            helper.edit('K7', '=AVERAGEIF(A2:A11,"Casual Shoes",F2:F11)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('200');
            done();
        });
        it('AVERAGEIF Formula with experssion as criteria ->', (done: Function) => {
            helper.edit('K8', '=AVERAGEIF(H2:H11,">"&G6+13)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('66.25');
            helper.edit('K9', '=AVERAGEIF(H2:H10,F5-134,E2:E11)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('30');
            done();
        });
        it('Add 2 AVERAGEIF Formulas->', (done: Function) => {
            helper.edit('K10', '=(AVERAGEIF(D2:D11,">30")+AVERAGEIF(D2:D11,"<30"))');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('57.5');
            done();
        });
        it('AVERAGEIF Formula with worst case value as argument->', (done: Function) => {
            helper.edit('K11', '=AVERAGEIF(E2:E9,)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K12', '=AVERAGEIF(O2:O6,)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('#DIV/0!');
            done();
        });
        it('AVERAGEIF Formula with text,empty,number value as range and * or <>* as criteria->', (done: Function) => {
            helper.edit('K13', '=AVERAGEIF(A2:A11,"*",G2:G11)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('7.7');
            helper.edit('K14', '=AVERAGEIF(E2:E11,"*",G2:G11)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K15', '=AVERAGEIF(P2:P11,"*",G2:G11)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K16', '=AVERAGEIF(A2:A11,"<>*",G2:G11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K17', '=AVERAGEIF(D2:D1,"<>*",G2:G11)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('5');
            helper.edit('K18', '=AVERAGEIF(P2:P11,"<>*",G2:G11)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('7.7');
            done();
        });
        it('AVERAGEIF Formula with different formatted value as arguments->', (done: Function) => {
            helper.edit('L1', '=AVERAGEIF(I6:I8,"<0")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('-1672');
            helper.edit('L2', '=AVERAGEIF(I15:I16,I16)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('12.76');
            helper.edit('L3', '=AVERAGEIF(I17:I18,">=12")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('14.5');
            helper.edit('L4', '=AVERAGEIF(I19:I20,115)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('115');
            helper.edit('L5', '=AVERAGEIF(I2:I20,">"&E2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('96.25');
            done();
        });
        it('AVERAGEIF Formula with Logical value as arguments->', (done: Function) => {
            helper.edit('L6', '=AVERAGEIF(I2:I5,"TRUE",G2:G5)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('3');
            helper.edit('L7', '=AVERAGEIF(I2:I5,"FALSE",G2:G5)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('9');
            helper.edit('L8', '=AVERAGEIF(I2:I5,TRUE,G2:G5)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('3');
            helper.edit('L9', '=AVERAGEIF(I2:I5,FALSE,G2:G5)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('9');
            helper.edit('L10', '=AVERAGEIF(I2:I3,I2,G2:G5)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('3');
            helper.edit('L11', '=AVERAGEIF(I2:I5,I4,G2:G5)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('9');
            done();
        });
        it('AVERAGEIF Formula with nested Formula as criteria->', (done: Function) => {
            helper.edit('L12', '=AVERAGEIF(E2:E11,SUM(D3),F2:F11)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('433.3333333');
            helper.edit('L13', '=AVERAGEIF(G2:G11,COUNT(E2:E11),H2:H11)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('70');
            helper.edit('L14', '=AVERAGEIF(F2:F11,">"LEN(E2:E11),H2:H11)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('55.4');
            done();
        });
        it('AVERAGEIF Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=AVERAGEIF($E$2:$E$11,"<15")');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('10');
            helper.edit('M2', '=AVERAGEIF($A$2:$A$11,"T-Shirts",$D$2:$D$11)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('50');
            helper.edit('M3', '=AVERAGEIF($H$2:$H$11,">="&$G$3)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('55.4');
            helper.edit('M4', '=AVERAGEIF($D$3:$D$10,">"&$E$5,$H$3:$H$10)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('82.75');
            helper.edit('M5', '=AVERAGEIF(D2:D10,$E$6,H2:H10)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('10');
            helper.edit('M6', '=AVERAGEIF(D2:D10,E6,$H$2:$H$10)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('10');
            done();
        });
        it('AVERAGEIF Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M7', '=AVERAGEIF(Sheet2!A1:A8,Sheet2!A1)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('2');
            helper.edit('M8', '=AVERAGEIF(Sheet2!A1:A10,"<10")');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('2.75');
            helper.edit('M9', '=AVERAGEIF(G2:G11,">="&Sheet2!A5)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('8.444444444');
            helper.edit('M10', '=AVERAGEIF(Sheet2!A1:A8,">="&Sheet1!G6)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('31.25');
            helper.edit('M11', '=AVERAGEIF(Sheet1!G2:G11,Sheet2!A5)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('3');
            helper.edit('M12', '=AVERAGEIF(Sheet1!E2:E11,">"&Sheet1!E6)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('22.5');
            done();
        });
        it('AVERAGEIF Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M13', '=AVERAGEIF(Sheet2!$A$1:$A$9,Sheet2!$A$2)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('20');
            helper.edit('M14', '=AVERAGEIF(Sheet2!$A$1:$A$10,"<10")');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('2.75');
            helper.edit('M15', '=AVERAGEIF(G2:G11,">="&Sheet2!$A$3)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('9.714285714');
            helper.edit('M16', '=AVERAGEIF(Sheet1!F3:F10,">"&Sheet1!F5,Sheet1!D3:D10)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('33');
            helper.edit('M17', '=AVERAGEIF(Sheet1!D3:D8,">"&Sheet2!A2,Sheet1!H3:H8)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('68');
            helper.edit('M18', '=AVERAGEIF(Sheet2!$A$1:$A$8,">="&Sheet1!$G$6)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('31.25');
            helper.edit('M19', '=AVERAGEIF(Sheet1!$E$2:$E$11,">"&Sheet1!$E$5)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('30');
            done();
        });
        it('AVERAGEIF formula with cell references like string argument as input->', (done: Function) => {
            helper.edit('M20', '=AVERAGEIF(Sheet2!A8:A9,"q1",Sheet1!G5:G6)');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('11');
            helper.edit('M21', '=AVERAGEIF(Sheet2!A8:A9,"Q2",Sheet1!G5:G6)');
            expect(helper.invoke('getCell', [20, 12]).textContent).toBe('10');
            done();
        });
        it('AVERAGEIF formula with invalid arguments shows error dialog cases ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIF()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIF()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=AVERAGEIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('10');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIF(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIF(,)';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=AVERAGEIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('10');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIF(,"*e")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIF(,"*e")';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N3', '=AVERAGEIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('');
            spreadsheet.selectRange('N4');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIF(AWFE,20)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIF(AWFE,20)';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N4', '=AVERAGEIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('');
            spreadsheet.selectRange('N5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIF("A3","*e")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIF("A3","*e")';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula which is improper.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N5', '=AVERAGEIF(E2:E11,G6)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('');
            done();
        });
    });

    describe('Unique Formula - Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('UNIQUE Formula with with reverse row selection->', (done: Function) => {
            helper.edit('I2', '=UNIQUE(E11:E2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('20');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('30');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('15');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"20","formula":"=UNIQUE(E11:E2)"}');
            done();
        });
        it('UNIQUE Formula with reverse Column selection->', (done: Function) => {
            helper.edit('J1', '=UNIQUE(H2:D2)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('20');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('200');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('1');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"10","formula":"=UNIQUE(H2:D2)"}');
            done();
        });
        it('UNIQUE Formula for by column value as True->', (done: Function) => {
            helper.edit('J2', '=UNIQUE(D2:H2,1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('20');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('200');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":"10","formula":"=UNIQUE(D2:H2,1)"}');
            done();
        });
        it('UNIQUE Formula for by column value as True and Exactly once as True->', (done: Function) => {
            helper.edit('J3', '=UNIQUE(D2:H2,1,TRUE)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('200');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":"20","formula":"=UNIQUE(D2:H2,1,TRUE)"}');
            done();
        });
        it('UNIQUE Formula with single cell->', (done: Function) => {
            helper.edit('J4', '=UNIQUE(A1)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('Item Name');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"Item Name","formula":"=UNIQUE(A1)"}');
            done();
        });
        it('UNIQUE Formula with Column Header as NUll ->', (done: Function) => {
            helper.edit('J5', '=UNIQUE(2:2,1,TRUE)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('41684');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('0.482314815');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"Casual Shoes","formula":"=UNIQUE(2:2,1,TRUE)"}');
            done();
        });
        it('UNIQUE Formula with Row Number as NUll ->', (done: Function) => {
            helper.edit('J6', '=UNIQUE(E:E)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('Price');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('30');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('15');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":"Price","formula":"=UNIQUE(E:E)"}');
            done();
        });
        it('UNIQUE Formula with no arguments->', (done: Function) => {
            helper.edit('I1', '=UNIQUE()');
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=UNIQUE()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=UNIQUE()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I1', '=UNIQUE(E11:E2)');
            done();
        });
    });

    describe('Reported DAYS formula - Checking -> IV ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DAYS formula with cell Reference - 1->', (done: Function) => {
            helper.edit('I1', '=DAYS(48567,-4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(48567,-4)"}');
            done();
        });
        it('DAYS formula with cell Reference - 2->', (done: Function) => {
            helper.edit('I1', '=DAYS(45321,0)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('45321');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":45321,"formula":"=DAYS(45321,0)"}');
            done();
        });
        it('DAYS formula with cell Reference - 3->', (done: Function) => {
            helper.edit('I1', '=DAYS(-45355,-432)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(-45355,-432)"}');
            done();
        });
        it('DAYS formula with cell Reference - 4->', (done: Function) => {
            helper.edit('I1', '=DAYS(5432,-3432)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(5432,-3432)"}');
            done();
        });
        it('DAYS formula with cell Reference - 5->', (done: Function) => {
            helper.edit('I1', '=DAYS("45943.43","-43")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(\\"45943.43\\",\\"-43\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 6->', (done: Function) => {
            helper.edit('I1', '=DAYS(3-Mar-23,1-Jan-23)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=DAYS(3-Mar-23,1-Jan-23)"}');
            done();
        });
        it('DAYS formula with cell Reference - 7->', (done: Function) => {
            helper.edit('I1', '=DAYS(TRUE,FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=DAYS(TRUE,FALSE)"}');
            done();
        });
        it('DAYS formula with cell Reference - 8->', (done: Function) => {
            helper.edit('I1', '=DAYS(FALSE,TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-1,"formula":"=DAYS(FALSE,TRUE)"}');
            done();
        });
        it('DAYS formula with cell Reference - 9->', (done: Function) => {
            helper.edit('I1', '=DAYS("TRUE",FALSE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(\\"TRUE\\",FALSE)"}');
            done();
        });
        it('DAYS formula with cell Reference - 10->', (done: Function) => {
            helper.edit('I1', '=DAYS("TRUE","FALSE")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(\\"TRUE\\",\\"FALSE\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 11->', (done: Function) => {
            helper.edit('I1', '=DAYS(49854-32,4532+45)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('45245');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":45245,"formula":"=DAYS(49854-32,4532+45)"}');
            done();
        });
        it('DAYS formula with cell Reference - 12->', (done: Function) => {
            helper.edit('I1', '=DAYS(45+43,32-34)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(45+43,32-34)"}');
            done();
        });
        it('DAYS formula with cell Reference - 13->', (done: Function) => {
            helper.edit('I1', '=DAYS(,"03/21/2020")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-43911');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-43911,"formula":"=DAYS(,\\"03/21/2020\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 14->', (done: Function) => {
            helper.edit('I1', '=DAYS("3/12/2020",)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('43902');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":43902,"formula":"=DAYS(\\"3/12/2020\\",)"}');
            done();
        });
        it('DAYS formula with cell Reference - 15->', (done: Function) => {
            helper.edit('I1', '=DAYS("","4/13/2021")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(\\"\\",\\"4/13/2021\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 16->', (done: Function) => {
            helper.edit('I1', '=DAYS(" ",45365)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(\\" \\",45365)"}');
            done();
        });
        it('DAYS formula with cell Reference - 17->', (done: Function) => {
            helper.edit('I1', '=DAYS("","")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(\\"\\",\\"\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 18->', (done: Function) => {
            helper.edit('I1', '=DAYS(34,"")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(34,\\"\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 18->', (done: Function) => {
            helper.edit('H6', '9578.45324235');
            helper.edit('H2', '8529.22456');
            helper.edit('A13', '-435.54');
            helper.edit('A14', '-1231');
            helper.edit('D17', '"2133"');
            helper.edit('D14', '"1"');
            helper.edit('D12', '"-45.43"');
            helper.edit('D15', '"212"');
            helper.edit('D13', '"-3453"');
            helper.edit('I19', '6/25/2023');
            helper.edit('B14', 'TRUE');
            helper.edit('B18', 'FALSE');
            helper.edit('B17', 'TRUE');
            helper.edit('B24', '"TRUE"');
            helper.edit('B25', '"FALSE"');
            helper.edit('B11', '10/31/2014');
            helper.edit('B16', 'TRUE');
            helper.edit('F20', '""');
            helper.edit('A20', '0');
            helper.edit('B7', '7/22/2014');
            helper.edit('C6', '12:43:59 AM');
            helper.edit('E7', '20');
            helper.edit('E4', '0.000000065');
            helper.edit('G6', '1000%');
            helper.edit('C17', 'hi');
            helper.edit('C18', '@');
            helper.edit('C19', 'A123@');
            helper.edit('C21', 'Jim324');
            helper.edit('B15', 'TRUE');
            helper.edit('B8', '2/4/2014');
            helper.edit('B9', '11/30/2014');
            helper.edit('C11', '12:01:44 AM');
            helper.edit('C8', '3:44:34 AM');
            helper.edit('C26', '');
            helper.edit('I16', '8/22/2011');
            done();
        });
        it('DAYS formula with cell Reference - 19->', (done: Function) => {
            helper.edit('I1', '=DAYS(H6,A13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(H6,A13)"}');
            done();
        });
        it('DAYS formula with cell Reference - 20->', (done: Function) => {
            helper.edit('I1', '=DAYS(A14,H2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(A14,H2)"}');
            done();
        });
        it('DAYS formula with cell Reference - 21->', (done: Function) => {
            helper.edit('I1', '=DAYS(A13,A14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NUM!","formula":"=DAYS(A13,A14)"}');
            done();
        });
        it('DAYS formula with cell Reference - 22->', (done: Function) => {
            helper.edit('I1', '=DAYS(D17,D14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(D17,D14)"}');
            done();
        });
        it('DAYS formula with cell Reference - 23->', (done: Function) => {
            helper.edit('I1', '=DAYS(D12,D15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(D12,D15)"}');
            done();
        });
        it('DAYS formula with cell Reference - 24->', (done: Function) => {
            helper.edit('I1', '=DAYS(D17,D14)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(D17,D14)"}');
            done();
        });
        it('DAYS formula with cell Reference - 25->', (done: Function) => {
            helper.edit('I1', '=DAYS(D14,D13)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(D14,D13)"}');
            done();
        });
        it('DAYS formula with cell Reference - 26->', (done: Function) => {
            helper.edit('I1', '=DAYS(I19,I160)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('45102');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":45102,"formula":"=DAYS(I19,I160)"}');
            done();
        });
        it('DAYS formula with cell Reference - 27->', (done: Function) => {
            helper.edit('I1', '=DAYS(B14,B18)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":1,"formula":"=DAYS(B14,B18)"}');
            done();
        });
        it('DAYS formula with cell Reference - 28->', (done: Function) => {
            helper.edit('I1', '=DAYS(B18,B17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-1,"formula":"=DAYS(B18,B17)"}');
            done();
        });
        it('DAYS formula with cell Reference - 29->', (done: Function) => {
            helper.edit('I1', '=DAYS(B24,B17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(B24,B17)"}');
            done();
        });
        it('DAYS formula with cell Reference - 30->', (done: Function) => {
            helper.edit('I1', '=DAYS(B25,B240)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(B25,B240)"}');
            done();
        });
        it('DAYS formula with cell Reference - 31->', (done: Function) => {
            helper.edit('I1', '=DAYS(B11,B16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41942');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41942,"formula":"=DAYS(B11,B16)"}');
            done();
        });
        it('DAYS formula with cell Reference - 32->', (done: Function) => {
            helper.edit('I1', '=DAYS(E24,B11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-41943');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-41943,"formula":"=DAYS(E24,B11)"}');
            done();
        });
        it('DAYS formula with cell Reference - 33->', (done: Function) => {
            helper.edit('I1', '=DAYS(B11,C26)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41943');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41943,"formula":"=DAYS(B11,C26)"}');
            done();
        });
        it('DAYS formula with cell Reference - 34->', (done: Function) => {
            helper.edit('I1', '=DAYS(F20,B11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(F20,B11)"}');
            done();
        });
        it('DAYS formula with cell Reference - 35->', (done: Function) => {
            helper.edit('I1', '=DAYS(F21,A20)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":0,"formula":"=DAYS(F21,A20)"}');
            done();
        });
        it('DAYS formula with cell Reference - 36->', (done: Function) => {
            helper.edit('I1', '=DAYS(F20,F20)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(F20,F20)"}');
            done();
        });
        it('DAYS formula with cell Reference - 37->', (done: Function) => {
            helper.edit('I1', '=DAYS(B7,C6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41842');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41842,"formula":"=DAYS(B7,C6)"}');
            done();
        });
        it('DAYS formula with cell Reference - 38->', (done: Function) => {
            helper.edit('I1', '=DAYS(E7,E4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":20,"formula":"=DAYS(E7,E4)"}');
            done();
        });
        it('DAYS formula with cell Reference - 39->', (done: Function) => {
            helper.edit('I1', '=DAYS(B9,E4)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41973');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41973,"formula":"=DAYS(B9,E4)"}');
            done();
        });
        it('DAYS formula with cell Reference - 40->', (done: Function) => {
            helper.edit('I1', '=DAYS(G6,H6)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-9568');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-9568,"formula":"=DAYS(G6,H6)"}');
            done();
        });
        it('DAYS formula with cell Reference - 41->', (done: Function) => {
            helper.edit('I1', '=DAYS(E4,B16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-1,"formula":"=DAYS(E4,B16)"}');
            done();
        });
        it('DAYS formula with cell Reference - 42->', (done: Function) => {
            helper.edit('I1', '=DAYS(C17,C18)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(C17,C18)"}');
            done();
        });
        it('DAYS formula with cell Reference - 43->', (done: Function) => {
            helper.edit('I1', '=DAYS(C21,C19)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(C21,C19)"}');
            done();
        });
        it('DAYS formula with cell Reference - 44->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Hello', refersTo: 'B4'});
            helper.edit('I1', '=DAYS(Hello,"hi")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(Hello,\\"hi\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 45->', (done: Function) => {
            helper.edit('I1', '=DAYS("hello",hi)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#NAME?","formula":"=DAYS(\\"hello\\",hi)"}');
            done();
        });
        it('DAYS formula with cell Reference - 46->', (done: Function) => {
            helper.edit('I1', '=DAYS(DAY(49854),4534)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-4506');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-4506,"formula":"=DAYS(DAY(49854),4534)"}');
            done();
        });
        it('DAYS formula with cell Reference - 47->', (done: Function) => {
            helper.edit('I1', '=DAYS(WEEKDAY(46574,2),I16)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-40775');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-40775,"formula":"=DAYS(WEEKDAY(46574,2),I16)"}');
            done();
        });
        it('DAYS formula with cell Reference - 48->', (done: Function) => {
            helper.edit('I1', '=DAYS(DATE(2023,3,23),43)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('44965');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":44965,"formula":"=DAYS(DATE(2023,3,23),43)"}');
            done();
        });
        it('DAYS formula with cell Reference - 49->', (done: Function) => {
            helper.edit('I1', '=DAYS(DATEVALUE("04/21/2023"),DATEVALUE("09/30/2022"))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('203');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":203,"formula":"=DAYS(DATEVALUE(\\"04/21/2023\\"),DATEVALUE(\\"09/30/2022\\"))"}');
            done();
        });
        it('DAYS formula with cell Reference - 50->', (done: Function) => {
            helper.edit('I1', '=DAYS($B$8,$B$15)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41673');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41673,"formula":"=DAYS($B$8,$B$15)"}');
            done();
        });
        it('DAYS formula with cell Reference - 50->', (done: Function) => {
            helper.edit('I1', '=DAYS($B$9,$C$11)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41973');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41973,"formula":"=DAYS($B$9,$C$11)"}');
            done();
        });
        it('DAYS formula with cell Reference - 51->', (done: Function) => {
            helper.edit('I1', '=DAYS(Sheet1!B11,Sheet1!C8)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41943');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41943,"formula":"=DAYS(Sheet1!B11,Sheet1!C8)"}');
            done();
        });
        it('DAYS formula with cell Reference - 52->', (done: Function) => {
            helper.edit('I1', '=DAYS(Sheet1!B11,Sheet1!C17)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=DAYS(Sheet1!B11,Sheet1!C17)"}');
            done();
        });
        it('DAYS formula with cell Reference - 53->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'One', refersTo: 'C8'});
            helper.edit('I1', '=DAYS(One,Hello)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-41847');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-41847,"formula":"=DAYS(One,Hello)"}');
            done();
        });
        it('DAYS formula with cell Reference - 54->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Two', refersTo: 'B11'});
            helper.edit('I1', '=DAYS(Two,One)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('41943');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":41943,"formula":"=DAYS(Two,One)"}');
            done();
        });
        it('DAYS formula with cell Reference - 55->', (done: Function) => {
            helper.edit('I1', '=DAYS("07-JUN","04/23/2021")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-7260');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-7260,"formula":"=DAYS(\\"07-JUN\\",\\"04/23/2021\\")"}');
            done();
        });
        it('DAYS formula with cell Reference - 56->', (done: Function) => {
            helper.edit('I1', '=DAYS("03/21/2022",TRUE)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('44640');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":44640,"formula":"=DAYS(\\"03/21/2022\\",TRUE)"}');
            done();
        });
        it('DAYS formula with cell Reference - 57->', (done: Function) => {
            helper.edit('I1', '=DAYS(453*3,23132/3)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-6351');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-6351,"formula":"=DAYS(453*3,23132/3)"}');
            done();
        });
        it('DAYS formula with cell Reference - 58->', (done: Function) => {
            helper.edit('I1', '=DAYS(54/34,53)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('-52');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":-52,"formula":"=DAYS(54/34,53)"}');
            done();
        });
        it('DAYS formula with cell Reference - 59->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'I26']);
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'I29']);
            helper.edit('I26', '04/23/2021');
            helper.edit('I29', '25-JUN');
            helper.edit('I1', '=DAYS(I26,I29)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('7242');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":7242,"formula":"=DAYS(I26,I29)"}');
            done();
        });
        it('DAYS formula with cell Reference - 60->', (done: Function) => {
            helper.invoke('numberFormat', [getFormatFromType('Text'), 'I31']);
            helper.edit('I31', '03-14-2021');
            helper.edit('D5', '15');
            helper.edit('I1', '=DAYS(I31,D5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('18685');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":18685,"formula":"=DAYS(I31,D5)"}');
            done();
        });
        it('DAYS formula with cell Reference - 61->', (done: Function) => {
            helper.edit('I1', '=MONTH(DAYS("04/30/2023","02/15/2022"))');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"3","formula":"=MONTH(DAYS(\\"04/30/2023\\",\\"02/15/2022\\"))"}');
            done();
        });
    });

    describe('Formula - Checking XI ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CHOOSE Formula for cell Reference with Num_index->', (done: Function) => {
            helper.edit('I1', '=CHOOSE(1,A2:A5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"#VALUE!","formula":"=CHOOSE(1,A2:A5)"}');
            done();
        });
        it('CHOOSE Formula for cell Reference with Num_index as alphabets->', (done: Function) => {
            helper.edit('I2', '=CHOOSE(a,A2:A5)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"#NAME?","formula":"=CHOOSE(a,A2:A5)"}');
            done();
        });
        it('INDEX Formula ->', (done: Function) => {
            helper.edit('I3', '=INDEX(D1:H11,5,5)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('67');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"67","formula":"=INDEX(D1:H11,5,5)"}');
            done();
        });
        it('INDEX Formula with column value as alphabets->', (done: Function) => {
            helper.edit('I4', '=INDEX(A1:A5,1,a)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#NAME?","formula":"=INDEX(A1:A5,1,a)"}');
            done();
        });
        it('INDEX Formula with Row value as alphabets->', (done: Function) => {
            helper.edit('I5', '=INDEX(D2:D5,a)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"#NAME?","formula":"=INDEX(D2:D5,a)"}');
            done();
        });
        it('INDEX Formula with Column value as 0->', (done: Function) => {
            helper.edit('I6', '=INDEX(D2:H11,5,0)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"30","formula":"=INDEX(D2:H11,5,0)"}');
            done();
        });
        it('INDEX Formula with row and Column value as -1->', (done: Function) => {
            helper.edit('I7', '=INDEX(A1:A10,-1,-1)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#VALUE!","formula":"=INDEX(A1:A10,-1,-1)"}');
            done();
        });
        it('Match Formula with Match Type as 1->', (done: Function) => {
            helper.edit('J1', '=Match(9.5,D2:D11,1)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('#N/A');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"#N/A","formula":"=Match(9.5,D2:D11,1)"}');
            done();
        });
        it('Match Formula with Match Type as -1->', (done: Function) => {
            helper.edit('J2', '=MATCH(10,D2:D11,"-1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('1');
            done();
        });
        it('Match Formula with Match Type as -1 II->', (done: Function) => {
            helper.edit('J3', '=MATCH(10,D3:D11,"-1")');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toBe('=MATCH(10,D3:D11,"-1")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('#N/A');
            done();
        });
        it('Match Formula with Match Type as 0->', (done: Function) => {
            helper.edit('J4', '=MATCH(10,D2:D11,0)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":1,"formula":"=MATCH(10,D2:D11,0)"}');
            done();
        });
        it('RANDBETWEEN Formula with maximum argument->', (done: Function) => {
            helper.edit('J5', '=RANDBETWEEN(,10)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#N/A');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"#N/A","formula":"=RANDBETWEEN(,10)"}');
            done();
        });
        it('RANDBETWEEN Formula with value as 0->', (done: Function) => {
            helper.edit('J6', '=RANDBETWEEN(0,0)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":"0","formula":"=RANDBETWEEN(0,0)"}');
            done();
        });
        it('RANDBETWEEN Formula for cell references with string values ->', (done: Function) => {
            helper.edit('J8', '=RANDBETWEEN(A2,D2)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{"value":"#VALUE!","formula":"=RANDBETWEEN(A2,D2)"}');
            done();
        });
        it('RANDBETWEEN Formula for cell references with no values ->', (done: Function) => {
            helper.edit('J9', '=RANDBETWEEN(D12,D13)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[9])).toBe('{"value":"0","formula":"=RANDBETWEEN(D12,D13)"}');
            done();
        });
        it('SLOPE Formula ->', (done: Function) => {
            helper.edit('K1', '=SLOPE(D2:D11,E2:E11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('-0.191111111');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"-0.19111111111111112","formula":"=SLOPE(D2:D11,E2:E11)"}');
            done();
        });
        it('SLOPE Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SLOPE()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SLOPE()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K2', '=SLOPE(D2:D11,E2:E11)');
            done();
        });
        it('SLOPE Formula with not equal range->', (done: Function) => {
            helper.edit('K3', '=SLOPE(D2:D11,C2:C5)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('#N/A');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"#N/A","formula":"=SLOPE(D2:D11,C2:C5)"}');
            done();
        });
        it('SLOPE Formula with cell having string->', (done: Function) => {
            helper.edit('K4', '=SLOPE(D1,E1)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#DIV/0!","formula":"=SLOPE(D1,E1)"}');
            done();
        });
        it('SLOPE Formula with direct string inputs->', (done: Function) => {
            helper.edit('K5', '=SLOPE(a,b)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"#DIV/0!","formula":"=SLOPE(a,b)"}');
            done();
        });
        it('INTERCEPT Formula ->', (done: Function) => {
            helper.edit('K6', '=INTERCEPT(D2:D11,E2:E11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('31.04444444');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"31.044444444444444","formula":"=INTERCEPT(D2:D11,E2:E11)"}');
            done();
        });
        it('INTERCEPT Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=INTERCEPT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=INTERCEPT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K7', '=INTERCEPT(D2:D11,E2:E11)');
            done();
        });
        it('SLOPE Formula with not equal range->', (done: Function) => {
            helper.edit('K8', '=SLOPE(D2:D11,C2:C5)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#N/A');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[10])).toBe('{"value":"#N/A","formula":"=SLOPE(D2:D11,C2:C5)"}');
            done();
        });
        it('SLOPE Formula with cell having string->', (done: Function) => {
            helper.edit('K9', '=INTERCEPT(D1,E1)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[10])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(D1,E1)"}');
            done();
        });
        it('SLOPE Formula with direct string inputs->', (done: Function) => {
            helper.edit('K10', '=INTERCEPT(a,b)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[10])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(a,b)"}');
            done();
        });
    });

    describe('Formula - Checking X ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ISNUMBER Formula ->', (done: Function) => {
            helper.edit('I1', '=ISNUMBER(100)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":true,"formula":"=ISNUMBER(100)"}');
            done();
        });
        it('ISNUMBER Formula with no arguments->', (done: Function) => {
            helper.edit('I2', '=ISNUMBER()');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{}');
            done();
        });
        it('ISNUMBER Formula with more than 2 arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ISNUMBER(1,2,3)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ISNUMBER(1,2,3)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I3', '=ISNUMBER(1)');
            done();
        });
        it('POWER Formula ->', (done: Function) => {
            helper.edit('J1', '=POWER(2,3)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"8","formula":"=POWER(2,3)"}');
            done();
        });
        it('POWER Formula with more than 2 arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=POWER(1,2,3)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=POWER(1,2,3)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J2', '=POWER(1,2)');
            done();
        });
        it('POWER Formula with negative arguments->', (done: Function) => {
            helper.edit('J3', '=POWER(-2,3)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('-8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":"-8","formula":"=POWER(-2,3)"}');
            done();
        });
        it('POWER Formula with value as 0->', (done: Function) => {
            helper.edit('J4', '=POWER(0,-3)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"#DIV/0!","formula":"=POWER(0,-3)"}');
            done();
        });
        it('POWER Formula with both value and exponent as 0->', (done: Function) => {
            helper.edit('J5', '=POWER(0,0)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"#NUM!","formula":"=POWER(0,0)"}');
            done();
        });
        it('POWER Formula with string as arguments->', (done: Function) => {
            helper.edit('J6', '=POWER(a,b)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":"#NAME?","formula":"=POWER(a,b)"}');
            done();
        });
        it('LOG Formula ->', (done: Function) => {
            helper.edit('K1', '=LOG(100,10)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"2","formula":"=LOG(100,10)"}');
            done();
        });
        it('LOG Formula with more than 2 arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LOG(1,2,3)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LOG(1,2,3)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K2', '=LOG(1,2)');
            done();
        });
        it('LOG Formula with both value and base as negative values->', (done: Function) => {
            helper.edit('K4', '=LOG(-100,-10)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#NUM!","formula":"=LOG(-100,-10)"}');
            done();
        });
        it('LOG Formula with base value as 1->', (done: Function) => {
            helper.edit('K5', '=LOG(10,1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"#DIV/0!","formula":"=LOG(10,1)"}');
            done();
        });
        it('LOG Formula with string as arguments->', (done: Function) => {
            helper.edit('K6', '=LOG(a,b)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"#NAME?","formula":"=LOG(a,b)"}');
            done();
        });
    });

    describe('Formula - Checking XI ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('TRUNC Formula ->', (done: Function) => {
            helper.edit('I1', '=TRUNC(8.9)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"8","formula":"=TRUNC(8.9)"}');
            done();
        });
        it('TRUNC Formula for Negative Value and Number number of Digits as 0->', (done: Function) => {
            helper.edit('I2', '=TRUNC(-6.5,0)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('-6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"-6","formula":"=TRUNC(-6.5,0)"}');
            done();
        });
        it('TRUNC Formula with Number number of Digits as 3->', (done: Function) => {
            helper.edit('I3', '=TRUNC(3.147895,3)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('3.147');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"3.147","formula":"=TRUNC(3.147895,3)"}');
            done();
        });
        it('TRUNC Formula with cell Reference which contains string->', (done: Function) => {
            helper.edit('I4', '=TRUNC(A5)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"#VALUE!","formula":"=TRUNC(A5)"}');
            done();
        });
        it('TRUNC Formula with more than 2 arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=TRUNC(1.5,2.5,3.5)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=TRUNC(1.5,2.5,3.5)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I5', '=TRUNC(1.5,2)');
            done();
        });
        it('EXP Formula ->', (done: Function) => {
            helper.edit('J1', '=EXP(1)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('2.718281828');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"2.718281828459045","formula":"=EXP(1)"}');
            done();
        });
        it('EXP Formula with no arguments ->', (done: Function) => {
            helper.edit('J2', '=EXP()');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{}');
            done();
        });
        it('EXP Formula for value 709 ->', (done: Function) => {
            helper.edit('J3', '=EXP(709)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":"8.218407461554972e+307","formula":"=EXP(709)"}');
            done();
        });
        it('EXP Formula for value greater than 709 ->', (done: Function) => {
            helper.edit('J4', '=EXP(710)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"#NUM!","formula":"=EXP(710)"}');
            done();
        });
        it('EXP Formula for more than 1 argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=EXP(1,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=EXP(1,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J5', '=EXP(1)');
            done();
        });
        it('EXP Formula with cell Reference which contains alphabets->', (done: Function) => {
            helper.edit('J6', '=EXP(A5)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":"#VALUE!","formula":"=EXP(A5)"}');
            done();
        });
        it('GEOMEAN Formula ->', (done: Function) => {
            helper.edit('K1', '=GEOMEAN(1,2)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('1.414213562');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"1.4142135623730951","formula":"=GEOMEAN(1,2)"}');
            done();
        });
        it('GEOMEAN Formula with 3 arguments->', (done: Function) => {
            helper.edit('K2', '=GEOMEAN(1,2,3)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1.817120593');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"1.8171205928321397","formula":"=GEOMEAN(1,2,3)"}');
            done();
        });
        it('GEOMEAN Formula with subtract operator->', (done: Function) => {
            helper.edit('K3', '=GEOMEAN(1,2)-1');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0.414213562');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"0.4142135623730952","formula":"=GEOMEAN(1,2)-1"}');
            done();
        });
        it('GEOMEAN Formula with negative value in argument 2->', (done: Function) => {
            helper.edit('K4', '=GEOMEAN(5,-1)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#NUM!","formula":"=GEOMEAN(5,-1)"}');
            done();
        });
        it('GEOMEAN Formula with negative value in argument 1->', (done: Function) => {
            helper.edit('K5', '=GEOMEAN(-5,1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"#NUM!","formula":"=GEOMEAN(-5,1)"}');
            done();
        });
        it('GEOMEAN Formula with cell reference->', (done: Function) => {
            helper.edit('K6', '=GEOMEAN(D3)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"20","formula":"=GEOMEAN(D3)"}');
            done();
        });
        it('GEOMEAN Formula with cell reference which contains string->', (done: Function) => {
            helper.edit('K7', '=GEOMEAN(D1:D5)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('15.6508458');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"15.650845800732872","formula":"=GEOMEAN(D1:D5)"}');
            done();
        });
        it('GEOMEAN Formula with cell reference which contains negative values->', (done: Function) => {
            helper.edit('F2', '-200');
            helper.edit('K8', '=GEOMEAN(F2:F8)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[10])).toBe('{"value":"#NUM!","formula":"=GEOMEAN(F2:F8)"}');
            done();
        });
        it('GEOMEAN Formula with no argguments->', (done: Function) => {
            helper.edit('K9', '=GEOMEAN()');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[10])).toBe('{"value":"1","formula":"=GEOMEAN()"}');
            done();
        });
        it('GEOMEAN Formula with only contains ""->', (done: Function) => {
            helper.edit('K10', '=GEOMEAN("")');
            expect(helper.getInstance().sheets[0].rows[9].cells[10].formula).toBe('=GEOMEAN("")');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('#NUM!');
            done();
        });
    });

    describe('Text Formula - Checking with Different Date Format->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('TEXT Formula with Date format - dd-MMM-yyyy ->', (done: Function) => {
            helper.edit('I1', '=TEXT(B2,"dd-MMM-yyyy")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('Feb 14, 2014');
            expect(helper.getInstance().sheets[0].rows[0].cells[8].formula).toEqual('=TEXT(B2,"dd-MMM-yyyy")');
            expect(helper.getInstance().sheets[0].rows[0].cells[8].value).toEqual('Feb 14, 2014');
            done();
        });
        it('TEXT Formula with Date format - dd MMM yyyy ->', (done: Function) => {
            helper.edit('I2', '=TEXT(B3,"dd MMM yyyy")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('Jun 11, 2014');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toEqual('=TEXT(B3,"dd MMM yyyy")');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].value).toEqual('Jun 11, 2014');
            done();
        });
        it('TEXT Formula with Date format - MMM-yyyy ->', (done: Function) => {
            helper.edit('I3', '=TEXT(B4,"MMM-yyyy")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('Jul-2014');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].formula).toEqual('=TEXT(B4,"MMM-yyyy")');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].value).toEqual('Jul-2014');
            done();
        });
        it('TEXT Formula with Date format - MMM yyyy ->', (done: Function) => {
            helper.edit('I4', '=TEXT(B5,"MMM yyyy")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('Nov 2014');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].formula).toEqual('=TEXT(B5,"MMM yyyy")');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].value).toEqual('Nov 2014');
            done();
        });
        it('TEXT Formula with Date format - MM-dd-yyyy ->', (done: Function) => {
            helper.edit('I5', '=TEXT(B6,"MM-dd-yyyy")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('06-23-2014');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].formula).toEqual('=TEXT(B6,"MM-dd-yyyy")');
            done();
        });
        it('TEXT Formula with Date format - dd-MM-yyyy ->', (done: Function) => {
            helper.edit('I6', '=TEXT(B7,"dd-MM-yyyy")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('22-07-2014');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].formula).toEqual('=TEXT(B7,"dd-MM-yyyy")');
            done();
        });
        it('TEXT Formula with Date format - dd-MM-yy ->', (done: Function) => {
            helper.edit('I7', '=TEXT(B8,"dd-MM-yy")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('04-02-14');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].formula).toEqual('=TEXT(B8,"dd-MM-yy")');
            done();
        });
        it('TEXT Formula with Date format - MM/dd/yyyy ->', (done: Function) => {
            helper.edit('I8', '=TEXT(B9,"MM/dd/yyyy")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('11/30/14');
            expect(helper.getInstance().sheets[0].rows[7].cells[8].formula).toEqual('=TEXT(B9,"MM/dd/yyyy")');
            done();
        });
        it('TEXT Formula with Date format - dd/MM/yyyy ->', (done: Function) => {
            helper.edit('I9', '=TEXT(B10,"dd/MM/yyyy")');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('7/9/14');
            expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toEqual('=TEXT(B10,"dd/MM/yyyy")');
            done();
        });
        it('TEXT Formula with Date format - dd/MM/yy ->', (done: Function) => {
            helper.edit('I10', '=TEXT(B11,"dd/MM/yy")');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('10/31/14');
            expect(helper.getInstance().sheets[0].rows[9].cells[8].formula).toEqual('=TEXT(B11,"dd/MM/yy")');
            done();
        });
        it('TEXT Formula with Date format - MMM d ->', (done: Function) => {
            helper.edit('I11', '=TEXT(B4,"MMM d")');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('Jul 27');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].formula).toEqual('=TEXT(B4,"MMM d")');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].value).toEqual('Jul 27');
            done();
        });
        it('TEXT Formula with Date format - M/yyyy ->', (done: Function) => {
            helper.edit('I12', '=TEXT(B5,"M/yyyy")');
            const cellEle: HTMLElement = helper.invoke('getCell', [11, 8]);
            expect(cellEle.textContent).toBe('11/2014');
            expect(cellEle.classList.contains('e-right-align')).toBeFalsy();
            expect(helper.getInstance().sheets[0].rows[11].cells[8].formula).toEqual('=TEXT(B5,"M/yyyy")');
            done();
        });
        it('TEXT Formula with Date format - dddd MMMM dd yyyy ->', (done: Function) => {
            helper.edit('J1', '=TEXT(B2,"dddd MMMM dd yyyy")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('February 14, 2014');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toEqual('=TEXT(B2,"dddd MMMM dd yyyy")');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].value).toEqual('February 14, 2014');
            done();
        });
        it('TEXT Formula with Date format - dd MMMM yyyy ->', (done: Function) => {
            helper.edit('J2', '=TEXT(B3,"dd MMMM yyyy")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('June 11, 2014');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toEqual('=TEXT(B3,"dd MMMM yyyy")');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toEqual('June 11, 2014');
            done();
        });
        it('TEXT Formula with Date format - d MMMM yyyy ->', (done: Function) => {
            helper.edit('J3', '=TEXT(B4,"d MMMM yyyy")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('Jul 27, 2014');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toEqual('=TEXT(B4,"d MMMM yyyy")');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toEqual('Jul 27, 2014');
            done();
        });
        it('TEXT Formula with Date format - yyyy ->', (done: Function) => {
            helper.edit('J4', '=TEXT(B5,"yyyy")');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('2014');
            expect(helper.getInstance().sheets[0].rows[3].cells[9].formula).toEqual('=TEXT(B5,"yyyy")');
            expect(helper.getInstance().sheets[0].rows[3].cells[9].value).toEqual('2014');
            done();
        });
        it('TEXT Formula with Date format - dddd ->', (done: Function) => {
            helper.edit('J5', '=TEXT(B3,"dddd")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('Wed');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].formula).toEqual('=TEXT(B3,"dddd")');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].value).toEqual('Wed');
            done();
        });
        it('TEXT Formula with Date format - d ->', (done: Function) => {
            helper.edit('J6', '=TEXT(B4,"d")');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('27');
            expect(helper.getInstance().sheets[0].rows[5].cells[9].formula).toEqual('=TEXT(B4,"d")');
            expect(helper.getInstance().sheets[0].rows[5].cells[9].value).toEqual('27');
            done();
        });
        it('TEXT Formula with Date format - d dddd ->', (done: Function) => {
            helper.edit('J7', '=TEXT(B3,"d dddd")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('11 Wed');
            expect(helper.getInstance().sheets[0].rows[6].cells[9].formula).toEqual('=TEXT(B3,"d dddd")');
            expect(helper.getInstance().sheets[0].rows[6].cells[9].value).toEqual('11 Wed');
            done();
        });
        it('TEXT Formula with Date format - M ->', (done: Function) => {
            helper.edit('J8', '=TEXT(B5,"M")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('11');
            expect(helper.getInstance().sheets[0].rows[7].cells[9].formula).toEqual('=TEXT(B5,"M")');
            expect(helper.getInstance().sheets[0].rows[7].cells[9].value).toEqual('11');
            done();
        });
        it('TEXT Formula with Date format - Md ->', (done: Function) => {
            helper.edit('J9', '=TEXT(B2,"Md")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('2/14');
            expect(helper.getInstance().sheets[0].rows[8].cells[9].formula).toEqual('=TEXT(B2,"Md")');
            done();
        });
        it('TEXT Formula with Date format - MMM ->', (done: Function) => {
            helper.edit('J10', '=TEXT(B5,"MMM")');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('Nov');
            expect(helper.getInstance().sheets[0].rows[9].cells[9].formula).toEqual('=TEXT(B5,"MMM")');
            expect(helper.getInstance().sheets[0].rows[9].cells[9].value).toEqual('Nov');
            done();
        });
        it('TEXT Formula with Date format - ddd MMM d ->', (done: Function) => {
            helper.edit('J11', '=TEXT(B3,"ddd MMM d")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('Wed, Jun 11');
            expect(helper.getInstance().sheets[0].rows[10].cells[9].formula).toEqual('=TEXT(B3,"ddd MMM d")');
            expect(helper.getInstance().sheets[0].rows[10].cells[9].value).toEqual('Wed, Jun 11');
            done();
        });
        it('TEXT Formula with Date format - ddd->', (done: Function) => {
            helper.edit('J12', '=TEXT(B6,"ddd")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('Mon');
            expect(helper.getInstance().sheets[0].rows[11].cells[9].formula).toEqual('=TEXT(B6,"ddd")');
            expect(helper.getInstance().sheets[0].rows[11].cells[9].value).toEqual('Mon');
            done();
        });
    });

    describe('Text Formula - Checking with Different Time Format->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('TEXT Formula with Time format - h:mm ->', (done: Function) => {
            helper.edit('I1', '=TEXT(C2,"h:mm")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('11:34');
            expect(helper.getInstance().sheets[0].rows[0].cells[8].formula).toEqual('=TEXT(C2,"h:mm")');
            done();
        });
        it('TEXT Formula with Time format - h:mm tt ->', (done: Function) => {
            helper.edit('I2', '=TEXT(C3,"h:mm tt")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('5:56 AM');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toEqual('=TEXT(C3,"h:mm tt")');
            done();
        });
        it('TEXT Formula with Time format - h ->', (done: Function) => {
            helper.edit('I3', '=TEXT(C4,"h")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('03');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].formula).toEqual('=TEXT(C4,"h")');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].value).toEqual('03');
            done();
        });
        it('TEXT Formula with Time format - h tt ->', (done: Function) => {
            helper.edit('I4', '=TEXT(C5,"h tt")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('6 AM');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].formula).toEqual('=TEXT(C5,"h tt")');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].value).toEqual('6 AM');
            done();
        });
        it('TEXT Formula with Time format - h:mm:ss tt ->', (done: Function) => {
            helper.edit('I5', '=TEXT(C6,"h:mm:ss tt")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('12:43:59 AM');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].formula).toEqual('=TEXT(C6,"h:mm:ss tt")');
            done();
        });
        it('TEXT Formula with Time format - h:mm:ss ->', (done: Function) => {
            helper.edit('I6', '=TEXT(C7,"h:mm:ss")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('10:55:53');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].formula).toEqual('=TEXT(C7,"h:mm:ss")');
            done();
        });
        it('TEXT Formula with invalid format->', (done: Function) => {
            helper.edit('I7', '=TEXT(B2,"MM/dd/yy")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('02/14/14');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].formula).toEqual('=TEXT(B2,"MM/dd/yy")');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].value).toEqual('02/14/14');
            done();
        });
    });

    describe('DOLLAR Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DOLLAR Formula without decimal values->', (done: Function) => {
            helper.edit('J1', '=DOLLAR(2)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('$2.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":"$2.00","formula":"=DOLLAR(2)"}');
            helper.edit('J2', '=DOLLAR(a)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":"#NAME?","formula":"=DOLLAR(a)"}');
            helper.edit('J3', '=DOLLAR(236)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('$236.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":"$236.00","formula":"=DOLLAR(236)"}');
            helper.edit('J4', '=DOLLAR(0)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('$0.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":"$0.00","formula":"=DOLLAR(0)"}');
            helper.edit('J5', '=DOLLAR(2.566)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('$2.57');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":"$2.57","formula":"=DOLLAR(2.566)"}');
            done();
        });
        it('DOLLAR Formula for no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=DOLLAR()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=DOLLAR()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J6', '=DOLLAR(145.322)');
            done();
        });
        it('DOLLAR Formula for alphanumeric inputs->', (done: Function) => {
            helper.edit('J7', '=DOLLAR(10A)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":"#VALUE!","formula":"=DOLLAR(A10)"}');
            done();
        });
        it('DOLLAR Formula having floating number and no decimal arguments->', (done: Function) => {
            helper.edit('J8', '=DOLLAR(145.322)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('$145.32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[9])).toBe('{"value":"$145.32","formula":"=DOLLAR(145.322)"}');
            done();
        });
        it('DOLLAR Formula having whole number and decimal arguments->', (done: Function) => {
            helper.edit('J9', '=DOLLAR(236,1)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('$236.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[9])).toBe('{"value":"$236.0","formula":"=DOLLAR(236,1)"}');
            done();
        });
        it('DOLLAR Formula having floating number and decimal arguments->', (done: Function) => {
            helper.edit('J10', '=DOLLAR(145.322,1)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('$145.3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[9])).toBe('{"value":"$145.3","formula":"=DOLLAR(145.322,1)"}');
            done();
        });
        it('DOLLAR Formula having floating number to be rounded off and decimal arguments->', (done: Function) => {
            helper.edit('J11', '=DOLLAR(173.898,2)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('$173.90');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[9])).toBe('{"value":"$173.90","formula":"=DOLLAR(173.898,2)"}');
            done();
        });
        it('DOLLAR Formula having floating number to be rounded off ->', (done: Function) => {
            helper.edit('J12', '=DOLLAR(173.464,1)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('$173.5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[9])).toBe('{"value":"$173.5","formula":"=DOLLAR(173.464,1)"}');
            done();
        });
        it('DOLLAR Formula with second input having five as decimals value->', (done: Function) => {
            helper.edit('J13', '=DOLLAR(123.123432,5)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('$123.12343');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[9])).toBe('{"value":"$123.12343","formula":"=DOLLAR(123.123432,5)"}');
            done();
        });
        it('DOLLAR Formula with whole number and second input having five decimals value->', (done: Function) => {
            helper.edit('J14', '=DOLLAR(457,5)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('$457.00000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[9])).toBe('{"value":"$457.00000","formula":"=DOLLAR(457,5)"}');
            done();
        });
        it('DOLLAR Formula with negative value as input->', (done: Function) => {
            helper.edit('J15', '=DOLLAR(-123.122,0)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('($123)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[9])).toBe('{"value":"($123)","formula":"=DOLLAR(-123.122,0)"}');
            helper.edit('J16', '=DOLLAR(-236)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('($236.00)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[9])).toBe('{"value":"($236.00)","formula":"=DOLLAR(-236)"}');
            helper.edit('J17', '=DOLLAR(-145.322)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('($145.32)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[9])).toBe('{"value":"($145.32)","formula":"=DOLLAR(-145.322)"}');
            helper.edit('J18', '=DOLLAR(-236,1)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('($236.0)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[9])).toBe('{"value":"($236.0)","formula":"=DOLLAR(-236,1)"}');
            done();
        });
        it('DOLLAR Formula having negative floating number and decimal arguments->', (done: Function) => {
            helper.edit('J19', '=DOLLAR(-145.322,1)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('($145.3)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[9])).toBe('{"value":"($145.3)","formula":"=DOLLAR(-145.322,1)"}');
            done();
        });
        it('DOLLAR Formula having negative floating number to be rounded off and decimal arguments->', (done: Function) => {
            helper.edit('J20', '=DOLLAR(-173.898,2)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('($173.90)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[9])).toBe('{"value":"($173.90)","formula":"=DOLLAR(-173.898,2)"}');
            done();
        });
        it('DOLLAR Formula having negative floating number to be rounded off ->', (done: Function) => {
            helper.edit('J21', '=DOLLAR(-173.464,1)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('($173.5)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[9])).toBe('{"value":"($173.5)","formula":"=DOLLAR(-173.464,1)"}');
            done();
        });
        it('DOLLAR Formula having negative floating number and five as decimal value->', (done: Function) => {
            helper.edit('J22', '=DOLLAR(-123.123432,5)');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('($123.12343)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[21].cells[9])).toBe('{"value":"($123.12343)","formula":"=DOLLAR(-123.123432,5)"}');
            done();
        });
        it('DOLLAR Formula with negative number and second input having five decimals value->', (done: Function) => {
            helper.edit('J23', '=DOLLAR(-457,5)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('($457.00000)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[22].cells[9])).toBe('{"value":"($457.00000)","formula":"=DOLLAR(-457,5)"}');
            done();
        });
        it('DOLLAR Formula with zero as number->', (done: Function) => {
            helper.edit('J24', '=DOLLAR(0)');
            expect(helper.invoke('getCell', [23, 9]).textContent).toBe('$0.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[9])).toBe('{"value":"$0.00","formula":"=DOLLAR(0)"}');
            done();
        });
        it('DOLLAR Formula with zero as number and zero as decimals->', (done: Function) => {
            helper.edit('J25', '=DOLLAR(0,0)');
            expect(helper.invoke('getCell', [24, 9]).textContent).toBe('$0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[24].cells[9])).toBe('{"value":"$0","formula":"=DOLLAR(0,0)"}');
            done();
        });
        it('DOLLAR Formula with zero as number and decimal value as second arguments->', (done: Function) => {
            helper.edit('J26', '=DOLLAR(0,4)');
            expect(helper.invoke('getCell', [25, 9]).textContent).toBe('$0.0000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[25].cells[9])).toBe('{"value":"$0.0000","formula":"=DOLLAR(0,4)"}');
            done();
        });
        it('DOLLAR Formula with negative decimal value as second arguments->', (done: Function) => {
            helper.edit('K1', '=DOLLAR(574,-1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('$570');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"$570","formula":"=DOLLAR(574,-1)"}');
            helper.edit('K2', '=DOLLAR(123.32,-2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('$100');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"$100","formula":"=DOLLAR(123.32,-2)"}');
            helper.edit('K3', '=DOLLAR(,-5)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('$0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"$0","formula":"=DOLLAR(,-5)"}');
            helper.edit('K4', '=DOLLAR(1232,-6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('$0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"$0","formula":"=DOLLAR(1232,-6)"}');
            helper.edit('K5', '=DOLLAR(-4539,-2)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('($4,500)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"($4,500)","formula":"=DOLLAR(-4539,-2)"}');
            helper.edit('K6', '=DOLLAR(-0.123,3)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('($0.123)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"($0.123)","formula":"=DOLLAR(-0.123,3)"}');
            done();
        });
        it('DOLLAR Formula with worst case values as arguments->', (done: Function) => {
            helper.edit('K7', '=DOLLAR(One,2)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"#NAME?","formula":"=DOLLAR(One,2)"}');
            helper.edit('K8', '=DOLLAR(1,Two)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[10])).toBe('{"value":"#NAME?","formula":"=DOLLAR(1,Two)"}');
            helper.edit('K9', '=DOLLAR(a)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[10])).toBe('{"value":"#NAME?","formula":"=DOLLAR(a)"}');
            helper.edit('K10', '=DOLLAR("One",2)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[9].cells[10].formula).toEqual('=DOLLAR("One",2)');
            helper.edit('K11', '=DOLLAR(1,"Two")');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[10].cells[10].formula).toEqual('=DOLLAR(1,"Two")');
            helper.edit('K12', '=DOLLAR("")');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[11].cells[10].formula).toEqual('=DOLLAR("")');
            done();
        });
        it('DOLLAR Formula with empty arguments->', (done: Function) => {
            helper.edit('K13', '=DOLLAR(,)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('$0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[10])).toBe('{"value":"$0","formula":"=DOLLAR(,)"}');
            helper.edit('K14', '=DOLLAR(,3)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('$0.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[10])).toBe('{"value":"$0.000","formula":"=DOLLAR(,3)"}');
            helper.edit('K15', '=DOLLAR(5,)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('$5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[10])).toBe('{"value":"$5","formula":"=DOLLAR(5,)"}');
            helper.edit('K16', '=DOLLAR(0.5,)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('$1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[10])).toBe('{"value":"$1","formula":"=DOLLAR(0.5,)"}');
            done();
        });
        it('DOLLAR Formula with logical values as arguments->', (done: Function) => {
            helper.edit('K17', '=DOLLAR(True,2)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('$1.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[10])).toBe('{"value":"$1.00","formula":"=DOLLAR(True,2)"}');
            helper.edit('K18', '=DOLLAR(False,2)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('$0.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[10])).toBe('{"value":"$0.00","formula":"=DOLLAR(False,2)"}');
            helper.edit('K19', '=DOLLAR(1,true)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('$1.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[10])).toBe('{"value":"$1.0","formula":"=DOLLAR(1,true)"}');
            helper.edit('K20', '=DOLLAR(1,false)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('$1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[10])).toBe('{"value":"$1","formula":"=DOLLAR(1,false)"}');
            helper.edit('K21', '=DOLLAR(TRUE,TRUE)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('$1.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[10])).toBe('{"value":"$1.0","formula":"=DOLLAR(TRUE,TRUE)"}');
            helper.edit('K22', '=DOLLAR(FALSE,FALSE)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('$0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[21].cells[10])).toBe('{"value":"$0","formula":"=DOLLAR(FALSE,FALSE)"}');
            helper.edit('K23', '=DOLLAR("TRUE")');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[22].cells[10].formula).toEqual('=DOLLAR("TRUE")');
            done();
        });
        it('DOLLAR Formula with cell refernces logical values as arguments->', (done: Function) => {
            helper.edit('L1', '=DOLLAR(I2,4)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('$1.0000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":"$1.0000","formula":"=DOLLAR(I2,4)"}');
            helper.edit('L2', '=DOLLAR(I4,3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('$0.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":"$0.000","formula":"=DOLLAR(I4,3)"}');
            helper.edit('L3', '=DOLLAR(I3,I4)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('$1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":"$1","formula":"=DOLLAR(I3,I4)"}');
            helper.edit('L4', '=DOLLAR(I4,I2)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('$0.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"$0.0","formula":"=DOLLAR(I4,I2)"}');
            helper.edit('L5', '=DOLLAR(17,I3)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('$17.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"$17.0","formula":"=DOLLAR(17,I3)"}');
            helper.edit('L6', '=DOLLAR(23,I4)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('$23');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":"$23","formula":"=DOLLAR(23,I4)"}');
            helper.edit('L7', '=DOLLAR(-32,I3)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('($32.0)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":"($32.0)","formula":"=DOLLAR(-32,I3)"}');
            done();
        });
        it('DOLLAR Formula with differnct kind of cell refernce values as arguments->', (done: Function) => {
            helper.edit('L8', '=DOLLAR(A2,2)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":"#VALUE!","formula":"=DOLLAR(A2,2)"}');
            helper.edit('L9', '=DOLLAR(B3,3)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('$41,801.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":"$41,801.000","formula":"=DOLLAR(B3,3)"}');
            helper.edit('L10', '=DOLLAR(C5,2)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('$0.27');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":"$0.27","formula":"=DOLLAR(C5,2)"}');
            helper.edit('L11', '=DOLLAR(D4,7)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('$20.0000000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[11])).toBe('{"value":"$20.0000000","formula":"=DOLLAR(D4,7)"}');
            helper.edit('L12', '=DOLLAR(F4)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('$300.00');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[11])).toBe('{"value":"$300.00","formula":"=DOLLAR(F4)"}');
            helper.edit('L13', '=DOLLAR(I6,1)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('$103.3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":"$103.3","formula":"=DOLLAR(I6,1)"}');
            helper.edit('L14', '=DOLLAR(I8,3)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('($3,221.000)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":"($3,221.000)","formula":"=DOLLAR(I8,3)"}');
            helper.edit('L15', '=DOLLAR(I11,4)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[11])).toBe('{"value":"#VALUE!","formula":"=DOLLAR(I11,4)"}');
            helper.edit('L16', '=DOLLAR(I16,1)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('$12.8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[11])).toBe('{"value":"$12.8","formula":"=DOLLAR(I16,1)"}');
            helper.edit('L17', '=DOLLAR(I17,1)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('$12.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[11])).toBe('{"value":"$12.0","formula":"=DOLLAR(I17,1)"}');
            helper.edit('L18', '=DOLLAR(I19,3)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('$2.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[11])).toBe('{"value":"$2.000","formula":"=DOLLAR(I19,3)"}');
            done();
        });
        it('DOLLAR Formula with cell refernce values as second arguments->', (done: Function) => {
            helper.edit('L19', '=DOLLAR(-32,G2)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('($32.0)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[11])).toBe('{"value":"($32.0)","formula":"=DOLLAR(-32,G2)"}');
            helper.edit('L20', '=DOLLAR(1000,G4)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('$1,000.0000000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[11])).toBe('{"value":"$1,000.0000000","formula":"=DOLLAR(1000,G4)"}');
            helper.edit('L21', '=DOLLAR(153.27,1)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('$153.3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[11])).toBe('{"value":"$153.3","formula":"=DOLLAR(153.27,1)"}');
            helper.edit('L22', '=DOLLAR(I13,G8)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('$119.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[21].cells[11])).toBe('{"value":"$119.000","formula":"=DOLLAR(I13,G8)"}');
            helper.edit('L23', '=DOLLAR(F10,G2)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('$1,210.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[22].cells[11])).toBe('{"value":"$1,210.0","formula":"=DOLLAR(F10,G2)"}');
            done();
        });
        it('DOLLAR Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=DOLLAR($G$5,$G$8)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('$11.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":"$11.000","formula":"=DOLLAR($G$5,$G$8)"}');
            helper.edit('M2', '=DOLLAR(6,$G$8)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('$6.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":"$6.000","formula":"=DOLLAR(6,$G$8)"}');
            helper.edit('M3', '=DOLLAR($F$7,-3)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('$1,000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":"$1,000","formula":"=DOLLAR($F$7,-3)"}');
            done();
        });
        it('DOLLAR Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M4', '=DOLLAR(Sheet2!A3,Sheet1!G2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('$6.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":"$6.0","formula":"=DOLLAR(Sheet2!A3,Sheet1!G2)"}');
            helper.edit('M5', '=DOLLAR(Sheet1!E3,Sheet2!A3)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('$30.000000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":"$30.000000","formula":"=DOLLAR(Sheet1!E3,Sheet2!A3)"}');
            helper.edit('M6', '=DOLLAR(Sheet2!A6,Sheet2!A4)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('$35.000000000000000000000000000000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":"$35.000000000000000000000000000000","formula":"=DOLLAR(Sheet2!A6,Sheet2!A4)"}');
            helper.edit('M7', '=DOLLAR(Sheet1!D6,Sheet1!I10)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('$30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":"$30","formula":"=DOLLAR(Sheet1!D6,Sheet1!I10)"}');
            done();
        });
        it('DOLLAR Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M8', '=DOLLAR(Sheet2!$A$3,Sheet1!$G$2)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('$6.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":"$6.0","formula":"=DOLLAR(Sheet2!$A$3,Sheet1!$G$2)"}');
            helper.edit('M9', '=DOLLAR(Sheet1!$E$3,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('$30.000000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":"$30.000000","formula":"=DOLLAR(Sheet1!$E$3,Sheet2!$A$3)"}');
            helper.edit('M10', '=DOLLAR(Sheet2!$A$4,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('$30.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":"$30.000","formula":"=DOLLAR(Sheet2!$A$4,Sheet2!$A$5)"}');
            helper.edit('M11', '=DOLLAR(Sheet1!$D$6,Sheet1!$I$10)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('$30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[12])).toBe('{"value":"$30","formula":"=DOLLAR(Sheet1!$D$6,Sheet1!$I$10)"}');
            helper.edit('M12', '=DOLLAR(Sheet2!$A$4,$G$2)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('$30.0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[12])).toBe('{"value":"$30.0","formula":"=DOLLAR(Sheet2!$A$4,$G$2)"}');
            helper.edit('M13', '=DOLLAR(E3,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('$30.000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[12])).toBe('{"value":"$30.000","formula":"=DOLLAR(E3,Sheet2!$A$5)"}');
            done();
        });
        it('DOLLAR Formula with text string enclosed in double quotes as arguments->', (done: Function) => {
            helper.edit('M14', '="This is Result = "&DOLLAR(132,0)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('This is Result = $132');
            helper.edit('M15', '="The Dollar "&DOLLAR(83,1)" Price is High"');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('The Dollar $83.0 Price is High');
            done();
        });
        it('DOLLAR Formula with second argument values as cell references that contains DATE value ->', (done: Function) => {
            helper.edit('M16', '=DOLLAR(B3,B2)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('#VALUE!');
            helper.edit('M17', '=DOLLAR(12,B7)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#VALUE!');
            done();
        });
    });
    
    describe('MEDIAN Formula Checking', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'True' }] },
                        { cells: [{ index: 8, value: 'True' }] }, { cells: [{ index: 8, value: 'False' }] },
                        { cells: [{ index: 8, value: 'False' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '""' }] }, { cells: [{ index: 8, value: 'Hello123' }] },
                        { cells: [{ index: 8, value: '124Hello' }] }, { cells: [{ index: 8, value: '@' }] },
                        { cells: [{ index: 8, value: '"32"' }] }, { cells: [{ index: 8, value: '"3"' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: '#DIV/0!' }] }, { cells: [{ index: 8, value: '#NUM!' }] },]
                }, {
                    rows: [
                        { cells: [{ value: '10' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '25' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '32' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Median Formula with cell refernces as arguments ->', (done: Function) => {
            helper.edit('J1', '=MEDIAN(E2:E11)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('17.5');
            helper.edit('J2', '=MEDIAN(E2:E10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            helper.edit('J3', '=MEDIAN(F4)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('300');
            helper.edit('J4', '=MEDIAN(D2:D9,E6,H4,G9)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('20');
            helper.edit('J5', '=MEDIAN(A3:A10)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#NUM!');
            helper.edit('J6', '=MEDIAN(I2:I5)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#NUM!');
            helper.edit('J7', '=MEDIAN(I6:I7)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('104.34');
            done();
        });
        it('Median Formula with basic inputs as arguments->', (done: Function) => {
            helper.edit('J8', '=MEDIAN(5,3,2,7,6)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('5');
            helper.edit('J9', '=MEDIAN(5,3,2,7,6,1)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('4');
            helper.edit('J10', '=MEDIAN(D4,E4,E6,F8,G7)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('15');
            helper.edit('J11', '=MEDIAN(D4,D5,D7,E6,E5,G6)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('17.5');
            helper.edit('J12', '=MEDIAN("1","100","200",10)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('55');
            helper.edit('J13', '=MEDIAN(I8:I10)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('-123');
            helper.edit('J14', '=MEDIAN(I10,1)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('0.5');
            helper.edit('J15', '=MEDIAN(1)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('1');
            done();
        });
        it('MEdian Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J16');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MEDIAN()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MEDIAN()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J16', '=MEDIAN(1)');
            helper.edit('J17', '=MEDIAN("")');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('#VALUE!');
            helper.edit('J18', '=MEDIAN(" ")');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('Median Formula with empty arguments->', (done: Function) => {
            helper.edit('K1', '=MEDIAN(,)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            helper.edit('K2', '=MEDIAN(5,)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('2.5');
            helper.edit('K3', '=MEDIAN(3,6,9,2,)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('3');
            helper.edit('K4', '=MEDIAN(1,,,0)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('0');
            helper.edit('K5', '=MEDIAN(3,6,9,2,)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('3');
            done();
        });
        it('Median Formula with Text and empty cell references as inputs->', (done: Function) => {
            helper.edit('K6', '=MEDIAN(A2:A7)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#NUM!');
            helper.edit('K7', '=MEDIAN(F2:F15)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('305');
            done();
        });
        it('Median Formula with Zero value as inputs->', (done: Function) => {
            helper.edit('K8', '=MEDIAN(0)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('0');
            helper.edit('K9', '=MEDIAN(,0)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('0');
            done();
        });
        it('Median Formula with Text value as inputs->', (done: Function) => {
            helper.edit('K10', '=MEDIAN("32","24",12)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('24');
            helper.edit('K11', '=MEDIAN("Hello","true")');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('#VALUE!');
            helper.edit('K12', '=MEDIAN(I15:I16)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('#NUM!');
            done();
        });
        it('Median Formula with logical value as inputs->', (done: Function) => {
            helper.edit('L1', '=MEDIAN(TRUE,FALSE)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('0.5');
            helper.edit('L2', '=MEDIAN(FALSE)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('0');
            helper.edit('L3', '=MEDIAN(FALSE,true,TRUE,FALSE,false)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('0');
            helper.edit('L4', '=MEDIAN(TRUE,TRUE,TRUE,FALSE)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('1');
            helper.edit('L5', '=MEDIAN(TRUE,32)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('16.5');
            helper.edit('L6', '=MEDIAN("TRUE","FALSE","TRUE")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            helper.edit('L7', '=MEDIAN("FALSE","HI",32)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('#VALUE!');
            helper.edit('L8', '=MEDIAN(I2)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#NUM!');
            helper.edit('L9', '=MEDIAN(I4)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('#NUM!');
            helper.edit('L10', '=MEDIAN(I2,I4,I3,I5,G6)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('10');
            helper.edit('L11', '=MEDIAN(I2:I5)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#NUM!');
            done();
        });
        it('MEDIAN Formula with Error values as arguments->', (done: Function) => {
            helper.edit('L12', '=MEDIAN(I17:I20)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            helper.edit('L13', '=MEDIAN(I18:I20)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#NAME?');
            helper.edit('L14', '=MEDIAN(I19:I20)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L15', '=MEDIAN(I20:I21)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#NUM!');
            done();
        });
        it('MEDIAN Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=MEDIAN($G$5,$G$8)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('7');
            helper.edit('M2', '=MEDIAN($F$2:$F$11)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('305');
            helper.edit('M3', '=MEDIAN($D$3,$E$6,$F$2:$F$8,$H$3,$H$8)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('200');
            helper.edit('M4', '=MEDIAN($G$3:$G$9,E6)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('8.5');
            helper.edit('M5', '=MEDIAN(D3:D9,$E$6)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('20');
            done();
        });
        it('MEDIAN Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M6', '=MEDIAN(Sheet2!A1:A8)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('31');
            helper.edit('M7', '=MEDIAN(Sheet2!A1,Sheet2!A8)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('26');
            helper.edit('M8', '=MEDIAN(Sheet2!B3:B8,Sheet2!A4,Sheet2!A6,Sheet2!A2)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('30');
            helper.edit('M9', '=MEDIAN(Sheet2!A1:A6,Sheet1!F2:F6)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('35');
            helper.edit('M10', '=MEDIAN(Sheet2!A1:A6,Sheet1!F6)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('30');
            helper.edit('M11', '=MEDIAN(Sheet1!F2:F10,Sheet1!G5)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('300');
            done();
        });
        it('MEDIAN Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M12', '=MEDIAN(Sheet2!$A$1:$A$6)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('27.5');
            helper.edit('M13', '=MEDIAN($G$2:$G$10,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('8.5');
            helper.edit('M14', '=MEDIAN(Sheet2!$A$1,Sheet2!$A$8)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('26');
            helper.edit('M15', '=MEDIAN(Sheet2!$B$6:$B$8,Sheet2!$A$4,Sheet2!$A$6,Sheet2!A2)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('30');
            helper.edit('M16', '=MEDIAN(Sheet2!$A$4:$A$6,Sheet1!$F$2:$F$6)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('250');
            helper.edit('M17', '=MEDIAN(Sheet1!$F$3:$F$10,Sheet1!$G$5)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('300');
            done();
        });
    });

    describe('EJ2-850739 -> ROUNDDOWN Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }, { cells: [{ index: 8, value: '#NUM!' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ROUNDDOWN Formula with direct values as numbers arguments ->', (done: Function) => {
            helper.edit('J1', '=ROUNDDOWN(18,0)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('18');
            helper.edit('J2', '=ROUNDDOWN(18.9,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('18');
            helper.edit('J3', '=ROUNDDOWN(3.14159,2)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('3.14');
            helper.edit('J4', '=ROUNDDOWN(3.14159,4)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('3.1415');
            helper.edit('J5', '=ROUNDDOWN(31489.323,-1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('31480');
            helper.edit('J6', '=ROUNDDOWN(31489.323,-3)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('31000');
            helper.edit('J7', '=ROUNDDOWN(31489.323,-5)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            helper.edit('J8', '=ROUNDDOWN(129.99,)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('129');
            done();
        });
        it('ROUNDDOWN Formula with direct values and cell references as boolean arguments ->', (done: Function) => {
            helper.edit('J9', '=ROUNDDOWN(TRUE,0)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('1');
            helper.edit('J10', '=ROUNDDOWN(FALSE,3)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('0');
            helper.edit('J11', '=ROUNDDOWN(TRUE,FALSE)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('1');
            helper.edit('J12', '=ROUNDDOWN(FALSE,TRUE)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('0');
            helper.edit('J13', '=ROUNDDOWN("TRUE",0)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('#VALUE!');
            helper.edit('J14', '=ROUNDDOWN("FALSE",0)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#VALUE!');
            helper.edit('J15', '=ROUNDDOWN(I2,I5)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('1');
            helper.edit('J16', '=ROUNDDOWN(I4,I10)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('0');
            done();
        });
        it('ROUNDDOWN Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J17', '=ROUNDDOWN("hello",2)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('#VALUE!');
            helper.edit('J18', '=ROUNDDOWN(123.32,"hi")');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('#VALUE!');
            helper.edit('J19', '=ROUNDDOWN("123Hulk",2)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('#VALUE!');
            helper.edit('J20', '=ROUNDDOWN(123.32,"Hulk12")');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('#VALUE!');
            helper.edit('J21', '=ROUNDDOWN("123.32",-2)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('100');
            helper.edit('J22', '=ROUNDDOWN("123.45","-3")');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('0');
            done();
        });
        it('ROUNDDOWN Formula with direct values as expression ->', (done: Function) => {
            helper.edit('J23', '=ROUNDDOWN(1+77.26,0)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('78');
            helper.edit('J24', '=ROUNDDOWN(2-34.32,-2)');
            expect(helper.invoke('getCell', [23, 9]).textContent).toBe('0');
            helper.edit('J25', '=ROUNDDOWN(2>5,-1)');
            expect(helper.invoke('getCell', [24, 9]).textContent).toBe('0');
            helper.edit('J26', '=ROUNDDOWN(2<5,1)');
            expect(helper.invoke('getCell', [25, 9]).textContent).toBe('1');
            done();
        });
        it('ROUNDDOWN Formula with different format arguments as input in General formatted cells ->', (done: Function) => {
            helper.edit('K1', '=ROUNDDOWN(I6,1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('103.3');
            helper.edit('K2', '=ROUNDDOWN(I13,-1)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('110.00');
            helper.edit('K3', '=ROUNDDOWN(I16,1)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('$12.70');
            helper.edit('K4', '=ROUNDDOWN(I17,1)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('1.2000E+01');
            helper.edit('K5', '=ROUNDDOWN(I20,0)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('11500%');
            done();
        });
        it('ROUNDDOWN Formula with different format arguments as input in Currency formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['$#,##0.00', 'K6']);
            helper.edit('K6', '=ROUNDDOWN(I6,1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('$103.30');
            helper.invoke('numberFormat', ['$#,##0.00', 'K7']);
            helper.edit('K7', '=ROUNDDOWN(I13,-1)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('$110.00');
            helper.invoke('numberFormat', ['$#,##0.00', 'K8']);
            helper.edit('K8', '=ROUNDDOWN(I16,1)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('$12.70');
            helper.invoke('numberFormat', ['$#,##0.00', 'K9']);
            helper.edit('K9', '=ROUNDDOWN(I17,1)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('$12.00');
            helper.invoke('numberFormat', ['$#,##0.00', 'K10']);
            helper.edit('K10', '=ROUNDDOWN(I20,0)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('$115.00');
            done();
        });
        it('ROUNDDOWN Formula with different format arguments as input in Percentage formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0%', 'K11']);
            helper.edit('K11', '=ROUNDDOWN(I6,1)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('10330%');
            helper.invoke('numberFormat', ['0%', 'K12']);
            helper.edit('K12', '=ROUNDDOWN(I13,-1)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('11000%');
            helper.invoke('numberFormat', ['0%', 'K13']);
            helper.edit('K13', '=ROUNDDOWN(I16,1)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('$12.70');
            helper.invoke('numberFormat', ['0%', 'K14']);
            helper.edit('K14', '=ROUNDDOWN(I17,1)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('1.2000E+01');
            helper.invoke('numberFormat', ['0%', 'K15']);
            helper.edit('K15', '=ROUNDDOWN(I20,0)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('11500%');
            done();
        });
        it('ROUNDDOWN Formula with different format arguments as input in Scientific formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0.0000E+00', 'K16']);
            helper.edit('K16', '=ROUNDDOWN(I6,1)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('1.0330E+02');
            helper.invoke('numberFormat', ['0.0000E+00', 'K17']);
            helper.edit('K17', '=ROUNDDOWN(I13,-1)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('1.1000E+02');
            helper.invoke('numberFormat', ['0.0000E+00', 'K18']);
            helper.edit('K18', '=ROUNDDOWN(I16,1)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('$12.70');
            helper.invoke('numberFormat', ['0.0000E+00', 'K19']);
            helper.edit('K19', '=ROUNDDOWN(I17,1)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('1.2000E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K20']);
            helper.edit('K20', '=ROUNDDOWN(I20,0)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('11500%');
            done();
        });
        it('ROUNDDOWN Formula with different format arguments as input in Number formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['#,##0.00', 'K21']);
            helper.edit('K21', '=ROUNDDOWN(I6,1)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('103.30');
            helper.invoke('numberFormat', ['#,##0.00', 'K22']);
            helper.edit('K22', '=ROUNDDOWN(I13,-1)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('110.00');
            helper.invoke('numberFormat', ['#,##0.00', 'K23']);
            helper.edit('K23', '=ROUNDDOWN(I16,1)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('12.70');
            helper.invoke('numberFormat', ['#,##0.00', 'K24']);
            helper.edit('K24', '=ROUNDDOWN(I17,1)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('12.00');
            helper.invoke('numberFormat', ['#,##0.00', 'K25']);
            helper.edit('K25', '=ROUNDDOWN(I20,0)');
            expect(helper.invoke('getCell', [24, 10]).textContent).toBe('115.00');
            done();
        });
        it('ROUNDDOWN Formula with cell references as arguments ->', (done: Function) => {
            helper.edit('L1', '=ROUNDDOWN(A3,I10)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('#VALUE!');
            helper.edit('L2', '=ROUNDDOWN(B4,I10)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('7/27/2014');
            helper.edit('L3', '=ROUNDDOWN(C6,I10)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L4', '=ROUNDDOWN(F9,-2)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('300');
            helper.edit('L5', '=ROUNDDOWN(I2,I10)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('1');
            helper.edit('L6', '=ROUNDDOWN(I4,I10)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('0');
            helper.edit('L7', '=ROUNDDOWN(I7,-1)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('100');
            helper.edit('L8', '=ROUNDDOWN(I11,0)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            helper.edit('L9', '=ROUNDDOWN(I13,1)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('119.00');
            helper.edit('L10', '=ROUNDDOWN(I15,3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('$119.00');
            helper.edit('L11', '=ROUNDDOWN(I18,1)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('1.7000E+01');
            helper.edit('L12', '=ROUNDDOWN(I20,3)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('11500%');
            done();
        });
        it('ROUNDDOWN Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('L13', '=ROUNDDOWN(D2<E2,2)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('1');
            helper.edit('L14', '=ROUNDDOWN(D2>E2,2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('0');
            helper.edit('L15', '=ROUNDDOWN(D2<=E2,2)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('1');
            helper.edit('L16', '=ROUNDDOWN(D2>=E2,2)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('0');
            helper.edit('L17', '=ROUNDDOWN(D2=E2,2)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('0');
            helper.edit('L18', '=ROUNDDOWN(D2<>E2,2)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('1');
            done();
        });
        it('ROUNDDOWN Formula with expression and cell references as arguments ->', (done: Function) => {
            helper.edit('L19', '=ROUNDDOWN(H4+I6+H10=E8,1)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('0');
            helper.edit('L20', '=ROUNDDOWN(A9+A10=A11,1)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('#VALUE!');
            helper.edit('L21', '=ROUNDDOWN(E8-E9-F10=D6,1)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('0');
            helper.edit('L22', '=ROUNDDOWN(H8-F6<>F4,0)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('1');
            helper.edit('L23', '=ROUNDDOWN(H7+34+D10-F9*A20=0,-1)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('0');
            done();
        });
        it('ROUNDDOWN Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('M1', '=ROUNDDOWN(D5,IF(2>1,TRUE,FALSE))');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('15');
            helper.edit('M2', '=ROUNDDOWN(ROUND(H4,4),2)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('27');
            helper.edit('M3', '=ROUNDDOWN(PRODUCT(D2,2),4)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('20');
            helper.edit('M4', '=AVERAGE(10,20,ROUNDDOWN(H2,-3))');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('10');
            helper.edit('M5', '=ROUNDDOWN(H4,IF(I17>I14,2,3))');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('27');
            helper.edit('M6', '=SUM(ROUNDDOWN(129.99,0),1)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('130');
            helper.edit('M7', '=SUM(ROUNDDOWN(129.99,1),2)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('131.9');
            helper.edit('M8', '=SUM(ROUNDDOWN(129.99,-1),2)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('122');
            helper.edit('M9', '=ROUNDDOWN(D5,IF(2>1,"hello","world"))');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('ROUNDDOWN Formula with Empty arguments as input ->', (done: Function) => {
            helper.edit('M10', '=ROUNDDOWN("","")');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('#VALUE!');
            helper.edit('M11', '=ROUNDDOWN(102.22,"")');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('#VALUE!');
            helper.edit('M12', '=ROUNDDOWN(," ")');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#VALUE!');
            helper.edit('M13', '=ROUNDDOWN("",)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#VALUE!');
            helper.edit('M14', '=ROUNDDOWN(A20,0)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('0');
            helper.edit('M15', '=ROUNDDOWN(F22,C22)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('0');
            done();
        });
        it('ROUNDDOWN Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('M16', '=ROUNDDOWN(1213.32,$I$10)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('1213');
            helper.edit('M17', '=ROUNDDOWN($A$2,3)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#VALUE!');
            helper.edit('M18', '=ROUNDDOWN($H$5,$I$10)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('67');
            helper.edit('M19', '=ROUNDDOWN($I$6,-2)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('100');
            helper.edit('M20', '=ROUNDDOWN($F$9,$I$10)');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('310');
            done();
        });
        it('ROUNDDOWN Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('N1', '=ROUNDDOWN(Sheet1!F2,Sheet2!A3)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('200');
            helper.edit('N2', '=ROUNDDOWN(Sheet2!A2,Sheet1!I10)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('20');
            helper.edit('N3', '=ROUNDDOWN(Sheet1!F2,Sheet1!A3)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('#VALUE!');
            helper.edit('N4', '=ROUNDDOWN(Sheet2!A22,Sheet2!A3)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('0');
            helper.edit('N5', '=ROUNDDOWN(F10,-Sheet2!A1)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('1200');
            done();
        });
        it('ROUNDDOWN Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('N6', '=ROUNDDOWN(Sheet1!$F$2,Sheet1!$I$10)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('200');
            helper.edit('N7', '=ROUNDDOWN(Sheet1!$F$2,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('200');
            helper.edit('N8', '=ROUNDDOWN(Sheet2!$A$2,Sheet1!$I$10)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('20');
            helper.edit('N9', '=ROUNDDOWN(Sheet2!$A$22,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('0');
            helper.edit('N10', '=ROUNDDOWN(F10,-Sheet2!$A$1)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('1200');
            helper.edit('N11', '=ROUNDDOWN($F$10,-Sheet2!A1)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('1200');
            done();
        });
        it('ROUNDDOWN Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('N12', '=ROUNDDOWN(,)');
            expect(helper.invoke('getCell', [11, 13]).textContent).toBe('0');
            helper.edit('N13', '=ROUNDDOWN(2343.456,)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('2343');
            helper.edit('N14', '=ROUNDDOWN(hello,12)');
            expect(helper.invoke('getCell', [13, 13]).textContent).toBe('#NAME?');
            helper.edit('N15', '=ROUNDDOWN(A4,A6)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('#VALUE!');
            helper.edit('N16', '=ROUNDDOWN(I21,2)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('#NUM!');
            done();
        });
        it('ROUNDDOWN Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('O1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ROUNDDOWN()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ROUNDDOWN()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O1', '=ROUNDDOWN(121,0)');
            spreadsheet.selectRange('O2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ROUNDDOWN(12,2,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ROUNDDOWN(12,2,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('O2', '=ROUNDDOWN(12.32,1)');
            done();
        });
    });

    describe('EJ2-854709 -> LOOKUP Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }, { cells: [{ index: 8, value: '#NUM!' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('LOOKUP Formula with direct values as numbers arguments ->', (done: Function) => {
            helper.edit('J1', '=LOOKUP(10,D2:D11,F2:F11)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('200');
            helper.edit('J2', '=LOOKUP(11,D2:D11,F2:F11)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('200');
            helper.edit('J3', '=LOOKUP(70,D2:D11,F2:F11)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('500');
            helper.edit('J4', '=LOOKUP(-232,D2:D11,F2:F11)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#N/A');
            helper.edit('J5', '=LOOKUP(0,I10:I14,H6:H10)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('70');
            helper.edit('J6', '=LOOKUP(-123,I9:I10,E6:E17)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('10');
            helper.edit('J7', '=LOOKUP(103.32,I6:I7,C5:C6)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.266597222');
            helper.edit('J8', '=LOOKUP(1240,F2:F11,G2:G11)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('9');
            done();
        });
        it('LOOKUP Formula with direct values and cell references as boolean arguments ->', (done: Function) => {
            helper.edit('J9', '=LOOKUP(true,I2:I5,F9:F12)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('1210');
            helper.edit('J10', '=LOOKUP(false,I2:I5,F8:F11)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('500');
            helper.edit('J11', '=LOOKUP("TRUE",I2:I5,G2:G5)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#N/A');
            helper.edit('J12', '=LOOKUP("FALSE",I2:I5,G2:G5)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#N/A');
            helper.edit('J13', '=LOOKUP(I3,I2:I5,A2:A5)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('Sports Shoes');
            helper.edit('J14', '=LOOKUP(I4,I2:I5,A2:A5)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('Sandals & Floaters');
            done();
        });
        it('LOOKUP Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J17', '=LOOKUP("Loafers",A2:A11,F2:F11)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('310');
            helper.edit('J18', '=LOOKUP("SNEAKERS",A2:A11,F2:F11)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('800');
            helper.edit('J19', '=LOOKUP("Hello123",I11:I12,H10:H11)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('166');
            helper.edit('J20', '=LOOKUP("Casual SHOES",A2:A11,B2:B11)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('41684');
            helper.edit('J21', '=LOOKUP("Bags",A2:A11,D2:D11)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#N/A');
            helper.edit('J22', '=LOOKUP("loAFERs",A2:A11,G2:G11)');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('6');
            done();
        });
        it('LOOKUP Formula with direct values as expression ->', (done: Function) => {
            helper.edit('J23', '=LOOKUP(20-10,D2:D4,F2:F4)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('200');
            helper.edit('J24', '=LOOKUP(10+10,D2:D11,F2:F11)');
            expect(helper.invoke('getCell', [23, 9]).textContent).toBe('300');
            helper.edit('J25', '=LOOKUP(10*1-5,G2:G11,H2:H11)');
            expect(helper.invoke('getCell', [24, 9]).textContent).toBe('27');
            helper.edit('J26', '=LOOKUP(900/3,F2:F11,G2:G11)');
            expect(helper.invoke('getCell', [25, 9]).textContent).toBe('10');
            done();
        });
        it('LOOKUP Formula with cell references as arguments ->', (done: Function) => {
            helper.edit('K1', '=LOOKUP(A3,A2:A8,B2:B8)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('41801');
            helper.edit('K2', '=LOOKUP(B4,B2:B7,C2:C7)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0.030543981');
            helper.edit('K3', '=LOOKUP(C5,C2:C7,A2:A7)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('Sandals & Floaters');
            helper.edit('K4', '=LOOKUP(D4,D2:D9,E2:E9)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('10');
            helper.edit('K5', '=LOOKUP(F3,F2:F10,E2:E10)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('10');
            helper.edit('K6', '=LOOKUP(F4,E2:E11,D2:D11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('50');
            helper.edit('K7', '=LOOKUP(I3,I2:I5,F2:F6)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('600');
            helper.edit('K8', '=LOOKUP(I11,I11:I12,F10:F11)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('1210');
            helper.edit('K9', '=LOOKUP(I13,F2:F5,G2:G6)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#N/A');
            helper.edit('K10', '=LOOKUP(I16,I15:I16,E10:E11)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('30');
            helper.edit('K11', '=LOOKUP(I14,I13:I14,I15:I16)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('119');
            helper.edit('K12', '=LOOKUP(I20,I17:I20,F8:F11)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('500');
            done();
        });
        it('LOOKUP Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('K13', '=LOOKUP(E4>E5,I2:I5,H2:H5)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('67');
            helper.edit('K14', '=LOOKUP(E4<E5,I2:I5,H2:H5)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('50');
            helper.edit('K15', '=LOOKUP(E4>=E5,I2:I5,H2:H5)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('67');
            helper.edit('K16', '=LOOKUP(E4<=E5,I2:I5,H2:H5)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('50');
            helper.edit('K17', '=LOOKUP(F5=F6,I2:I5,G7:G10)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('3');
            helper.edit('K18', '=LOOKUP(F5<>F6,I2:I5,G8:G11)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('9');
            done();
        });
        it('LOOKUP Formula with expression and cell references, Wildcard as arguments ->', (done: Function) => {
            helper.edit('K19', '=LOOKUP(D2+E11=D8,I2:I5,G2:G5)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('5');
            helper.edit('K20', '=LOOKUP(D2-E11=D8,I2:I5,G2:G5)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('11');
            helper.edit('K21', '=LOOKUP("C*",A2:A11,D2:D11)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('41');
            helper.edit('K22', '=LOOKUP("*s",A2:A11,D2:D11)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('50');
            done();
        });
        it('LOOKUP Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L1', '=LOOKUP(SUM(5,5),H2:H11,F2:F11)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('200');
            helper.edit('L2', '=LOOKUP(COUNT(C2:C11),D2:D11,H2:H11)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('10');
            helper.edit('L3', '=LOOKUP(COUNT(A2:C11),D2:D11,H2:H11)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('70');
            helper.edit('L4', '=SUM(LOOKUP(H10,H8:H11,I8:I11),2000)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('2000');
            helper.edit('L5', '=LOOKUP(AND(20,30),I2:I5,H2:H5)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('50');
            helper.edit('L6', '=LOOKUP(OR(20,"Cas"),I2:I5,H2:H5)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('50');
            helper.edit('L7', '=ROUNDDOWN(LOOKUP(I9,I8:I10,I13:I15),-1)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('30');
            helper.edit('L8', '=LOOKUP(SUM(2,7)+COUNT(G10:G8),D2:D11,E2:E11)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('20');
            helper.edit('L9', '=LOOKUP(MAX(G6,G5),G2:G7,E2:E7)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('10');
            done();
        });
        it('LOOKUP Formula with Empty arguments as input ->', (done: Function) => {
            helper.edit('L10', '=LOOKUP("",B14:B16,C14:C16)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('#N/A');
            helper.edit('L11', '=LOOKUP(12,F4:F8,)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#VALUE!');
            helper.edit('L12', '=LOOKUP(,,)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            helper.edit('L13', '=LOOKUP(12,,G6:G10)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#VALUE!');
            helper.edit('L14', '=LOOKUP(D16,E15:E18,F8:F11)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#N/A');
            helper.edit('L15', '=LOOKUP(F11,F13:F17,G11:G7)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#N/A');
            done();
        });
        it('LOOKUP Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('L16', '=LOOKUP($F$3,F2:F10,E2:E10)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('10');
            helper.edit('L17', '=LOOKUP(F4,$F$2:$F$10,E2:E10)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('10');
            helper.edit('L18', '=LOOKUP(F4,$F$2:$F$10,$E$2:$E$10)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('10');
            helper.edit('L19', '=LOOKUP(11,$G$2:$G$11,$F$2:$F$11)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('310');
            helper.edit('L20', '=LOOKUP($F$5,$F$2:$F$11,$G$2:$G$11)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('10');
            done();
        });
        it('LOOKUP Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M1', '=LOOKUP(Sheet1!H4,E2:E11,F2:F11)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('310');
            helper.edit('M2', '=LOOKUP(Sheet2!A2,E2:E11,F2:F11)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('310');
            helper.edit('M3', '=LOOKUP(F5,Sheet1!F2:F11,Sheet1!G2:G11)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('10');
            helper.edit('M4', '=LOOKUP(Sheet1!F5,Sheet1!F2:F11,Sheet1!G2:G11)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('10');
            helper.edit('M5', '=LOOKUP(Sheet2!A2,Sheet1!E2:E11,Sheet1!F2:F11)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('310');
            done();
        });
        it('LOOKUP Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M6', '=LOOKUP(Sheet2!$A$2,Sheet1!E2:E11,Sheet1!F2:F11)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('310');
            helper.edit('M7', '=LOOKUP(Sheet1!$F$5,Sheet1!F2:F11,Sheet1!G2:G11)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('10');
            helper.edit('M8', '=LOOKUP(Sheet2!$A$2,Sheet1!$E$2:$E$11,Sheet1!F2:F11)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('310');
            helper.edit('M9', '=LOOKUP(Sheet2!$A$2,Sheet1!$E$2:$E$11,Sheet1!$F$2:$F$11)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('310');
            helper.edit('M10', '=LOOKUP(Sheet1!$H$4,E2:E11,F2:F11)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('310');
            helper.edit('M11', '=LOOKUP(Sheet1!$H$4,$E$2:$E$11,$F$2:$F$11)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('310');
            done();
        });
        it('LOOKUP Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M12', '=LOOKUP(,)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#VALUE!');
            helper.edit('M13', '=LOOKUP(,E4:E7,F4:F7)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#N/A');
            helper.edit('M14', '=LOOKUP(Hello,A3:A6,B3:B6)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#NAME?');
            helper.edit('M15', '=LOOKUP(,,)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('#VALUE!');
            helper.edit('M16', '=LOOKUP("#NUM!",D4:D7,E4:E7)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('#NUM!');
            done();
        });
        it('LOOKUP Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LOOKUP()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LOOKUP()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=LOOKUP(12,E5:E9,F5:F10)');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=LOOKUP(,,,,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=LOOKUP(,,,,)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=LOOKUP(12,E5:E9,F5:F10)');
            done();
        });
    });

    describe('EJ2-854712 -> VLOOKUP Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }, { cells: [{ index: 8, value: '#NUM!' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('VLOOKUP Formula with direct values as numbers arguments ->', (done: Function) => {
            helper.edit('J1', '=VLOOKUP(10,D2:F11,2,false)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('20');
            helper.edit('J2', '=VLOOKUP(50,D2:F11,3,false)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('500');
            helper.edit('J3', '=VLOOKUP(600,F2:G11,2,false)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('5');
            helper.edit('J4', '=VLOOKUP(I10,D3:F8,2,false)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#N/A');
            helper.edit('J5', '=VLOOKUP(0,I6:J10,2,false)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            helper.edit('J6', '=VLOOKUP(103.32,I6:I9,1,false)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('103.32');
            helper.edit('J7', '=VLOOKUP(-3221,I8:I11,1,false)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-3221');
            helper.edit('J8', '=VLOOKUP(300,F2:G10,2,false)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('7');
            done();
        });
        it('VLOOKUP Formula with direct values and cell references as boolean arguments ->', (done: Function) => {
            helper.edit('J9', '=VLOOKUP(TRUE,I2:I5,1,false)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('TRUE');
            helper.edit('J10', '=VLOOKUP(FALSE,I2:I5,1,false)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('FALSE');
            helper.edit('J11', '=VLOOKUP("TRUE",I2:I5,1,false)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#N/A');
            helper.edit('J12', '=VLOOKUP("FALSE",I2:I5,1,false)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#N/A');
            helper.edit('J13', '=VLOOKUP(I2,I2:I5,1,I4)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('TRUE');
            helper.edit('J14', '=VLOOKUP(I4,I2:I5,1,I4)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('FALSE');
            helper.edit('J15', '=VLOOKUP(I4,I2:I5,1,"FALSE")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('FALSE');
            helper.edit('J16', '=VLOOKUP(I4,I2:I5,1,"TRUE")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('FALSE');
            done();
        });
        it('VLOOKUP Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J17', '=VLOOKUP("Loafers",A2:F11,4,false)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('31');
            helper.edit('J18', '=VLOOKUP("SNEAKERS",A2:F11,5,false)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('20');
            helper.edit('J19', '=VLOOKUP("Hello123",I11:I12,1,false)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('Hello123');
            helper.edit('J20', '=VLOOKUP("Casual SHOES",A2:B11,2,false)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('41684');
            helper.edit('J21', '=VLOOKUP("Bags",A2:D11,2,false)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#N/A');
            helper.edit('J22', '=VLOOKUP("loAFERs",A2:G11,3,false)');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('0.133935185');
            done();
        });
        it('VLOOKUP Formula with direct values as expression ->', (done: Function) => {
            helper.edit('J23', '=VLOOKUP(20-10,E2:F11,2,false)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('300');
            helper.edit('J24', '=VLOOKUP(10+10,D2:F11,3,false)');
            expect(helper.invoke('getCell', [23, 9]).textContent).toBe('600');
            helper.edit('J25', '=VLOOKUP(10*1-5,G2:H11,2)');
            expect(helper.invoke('getCell', [24, 9]).textContent).toBe('50');
            helper.edit('J26', '=VLOOKUP(900/3,F2:G11,2,false)');
            expect(helper.invoke('getCell', [25, 9]).textContent).toBe('7');
            done();
        });
        it('VLOOKUP Formula with cell references as arguments ->', (done: Function) => {
            helper.edit('K1', '=VLOOKUP(A3,A2:C11,2,false)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('41801');
            helper.edit('K2', '=VLOOKUP(A3,A2:C11,3,false)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0.247592593');
            helper.edit('K3', '=VLOOKUP(A3,A2:C11,1,false)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('Sports Shoes');
            helper.edit('K4', '=VLOOKUP(B6,B2:E11,3,false)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('30');
            helper.edit('K5', '=VLOOKUP(F2,F2:I5,4,false)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('TRUE');
            helper.edit('K6', '=VLOOKUP(F4,F2:I5,4,false)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('FALSE');
            helper.edit('K7', '=VLOOKUP(I6,I6:I10,1,false)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('103.32');
            helper.edit('K8', '=VLOOKUP(I8,I5:I9,1,false)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('-3221');
            helper.edit('K9', '=VLOOKUP(I15,I13:I16,1,false)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('119');
            helper.edit('K10', '=VLOOKUP(I13,I12:I15,1,false)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('119');
            helper.edit('K11', '=VLOOKUP(I18,I16:I18,1,false)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('17');
            helper.edit('K12', '=VLOOKUP(I20,I16:I20,1,false)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('115');
            done();
        });
        it('VLOOKUP Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('K13', '=VLOOKUP(E4>E5,I2:I5,1,false)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('FALSE');
            helper.edit('K14', '=VLOOKUP(E4<E5,I2:I5,1,false)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('TRUE');
            helper.edit('K15', '=VLOOKUP(E4>=E5,I2:I5,1,false)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('FALSE');
            helper.edit('K16', '=VLOOKUP(E4<=E5,I2:I5,1,false)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('TRUE');
            helper.edit('K17', '=VLOOKUP(F5=F6,I2:I5,1,false)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('TRUE');
            helper.edit('K18', '=VLOOKUP(F5<>F6,I2:I5,1,false)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('FALSE');
            done();
        });
        it('VLOOKUP Formula with expression and cell references, Wildcard as arguments ->', (done: Function) => {
            helper.edit('K19', '=VLOOKUP(D2+E11=D8,I2:I5,1,false)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('TRUE');
            helper.edit('K20', '=VLOOKUP(D2-E11=D8,I2:I5,1,false)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('FALSE');
            helper.edit('K21', '=VLOOKUP("C*",A2:D11,4,false)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('10');
            helper.edit('K22', '=VLOOKUP("*C",A2:D11,2,false)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('#N/A');
            helper.edit('K23', '=VLOOKUP("???????",A2:D11,2,false)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('41973');
            helper.edit('K24', '=VLOOKUP("??Shirts",A2:D11,2,false)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('41943');
            done();
        });
        it('VLOOKUP Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L1', '=SUM(VLOOKUP(10,D2:F11,2,FALSE),10)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('30');
            helper.edit('L2', '=VLOOKUP(COUNT(E2:F11),E2:G10,2,false)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('200');
            helper.edit('L3', '=VLOOKUP(AVERAGE(H2:H11),D2:G11,3)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('500');
            helper.edit('L4', '=VLOOKUP(sum(D2,D3),D5:F8,3,false)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('300');
            helper.edit('L5', '=VLOOKUP(NOT(true),I2:I5,1,false)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('FALSE');
            helper.edit('L6', '=VLOOKUP(NOT(false),I2:I5,1,false)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('TRUE');
            helper.edit('L7', '=VLOOKUP(10,D2:E11,count(G2:G3),I4)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('20');
            helper.edit('L8', '=VLOOKUP(SUM(2,5)+COUNT(G10:G8),D2:E11,2,false)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('20');
            helper.edit('L9', '=VLOOKUP(MAX(G6,G4),G2:E7,2,false)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('300');
            done();
        });
        it('VLOOKUP Formula with Empty argument as input ->', (done: Function) => {
            helper.edit('L10', '=VLOOKUP(,,)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('#N/A');
            helper.edit('L11', '=VLOOKUP(,,,)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#N/A');
            helper.edit('L12', '=VLOOKUP(,H2:I11,2,TRUE)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#N/A');
            helper.edit('L13', '=VLOOKUP(10,,2,FALSE)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#N/A');
            helper.edit('L14', '=VLOOKUP(10,D2:J11,2,)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('20');
            helper.edit('L15', '=VLOOKUP(10,D2:E11,,)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('VLOOKUP Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('L16', '=VLOOKUP($D$5,D2:F11,3,I4)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('300');
            helper.edit('L17', '=VLOOKUP($D$5,$D$2:$F$11,3,$I$4)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('300');
            helper.edit('L18', '=VLOOKUP($F$9,$F$2:$G$11,2,$I$5)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('6');
            helper.edit('L19', '=VLOOKUP(D6,$D$2:$H$11,G3,I4)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('70');
            helper.edit('L20', '=VLOOKUP($D$5,$D$2:$H$11,$G$3,$I$5)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('67');
            done();
        });
        it('VLOOKUP Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M1', '=VLOOKUP(Sheet1!H2,E2:F11,2,false)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('300');
            helper.edit('M2', '=VLOOKUP(Sheet2!A2,E2:F11,2,false)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('200');
            helper.edit('M3', '=VLOOKUP(F5,Sheet1!F2:G11,2,Sheet1!I4)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('7');
            helper.edit('M4', '=VLOOKUP(Sheet1!F8,Sheet1!F2:G11,2,False)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('1');
            helper.edit('M5', '=VLOOKUP(Sheet2!A2,Sheet1!E2:F11,2,FALSE)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('200');
            done();
        });
        it('VLOOKUP Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M6', '=VLOOKUP(Sheet1!$H$2,$E$2:$F$11,2,false)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('300');
            helper.edit('M7', '=VLOOKUP(Sheet2!$A$2,$E$2:$F$11,2,$I$4)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('200');
            helper.edit('M8', '=VLOOKUP(Sheet1!$D$5,$D$2:$H$11,$G$3,$I$5)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('67');
            helper.edit('M9', '=VLOOKUP($F$5,Sheet1!$F$2:$G$11,2,Sheet1!$I$4)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('7');
            helper.edit('M10', '=VLOOKUP(Sheet1!$F$8,Sheet1!$F$2:$G$11,2,False)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('1');
            helper.edit('M11', '=VLOOKUP(Sheet2!$A$2,Sheet1!$E$2:$F$11,2,FALSE)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('200');
            done();
        });
        it('VLOOKUP Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M12', '=VLOOKUP(,,,)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#N/A');
            helper.edit('M13', '=VLOOKUP(10,D2:E11,4)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#REF!');
            helper.edit('M14', '=VLOOKUP(20,D2:G11,-1)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#VALUE!');
            helper.edit('M15', '=VLOOKUP(20,D2:G11,0)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('#VALUE!');
            helper.edit('M16', '=VLOOKUP(112,D2:E9,2,true0)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('#NAME?');
            helper.edit('M17', '=VLOOKUP(112,D2:E9,2,false)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#N/A');
            helper.edit('M18', '=VLOOKUP(10,D2:E11,4,true)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('#REF!');
            done();
        });
        it('VLOOKUP Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=VLOOKUP()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=VLOOKUP()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=VLOOKUP(10,D2:F11,2,false)');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=VLOOKUP(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=VLOOKUP(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=VLOOKUP(10,D2:F11,2,false)');
            spreadsheet.selectRange('N3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=VLOOKUP(,,,,,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=VLOOKUP(,,,,,)';
            helper.triggerKeyNativeEvent(13);
            const dialog2: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N3', '=VLOOKUP(10,D2:F11,2,false)');
            done();
        });
    });

    describe('EJ2-854711 -> HLOOKUP Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }, { cells: [{ index: 8, value: '#NUM!' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('HLOOKUP Formula with direct values as numbers arguments ->', (done: Function) => {
            helper.edit('J1', '=HLOOKUP(10,D2:F5,2,false)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('20');
            helper.edit('J2', '=HLOOKUP(20,D2:F5,3,false)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('15');
            helper.edit('J3', '=HLOOKUP(600,F3:G7,2,false)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('300');
            helper.edit('J4', '=HLOOKUP(0,D3:F4,2,false)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#N/A');
            helper.edit('J5', '=HLOOKUP(0,I10:I13,2,false)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('Hello123');
            helper.edit('J6', '=HLOOKUP(103.32,I6:I9,3,false)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('-3221');
            helper.edit('J7', '=HLOOKUP(-3221,I8:I11,3,false)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            helper.edit('J8', '=HLOOKUP(200,D2:G5,2,false)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('600');
            done();
        });
        it('HLOOKUP Formula with direct values and cell references as boolean arguments ->', (done: Function) => {
            helper.edit('J9', '=HLOOKUP(TRUE,I2:I5,1,false)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('TRUE');
            helper.edit('J10', '=HLOOKUP(FALSE,I4:I7,1,false)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('FALSE');
            helper.edit('J11', '=HLOOKUP("TRUE",I2:I5,1,false)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#N/A');
            helper.edit('J12', '=HLOOKUP("FALSE",I4:I7,1,false)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#N/A');
            helper.edit('J13', '=HLOOKUP(I2,G2:I6,5,FALSE)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('103.32');
            helper.edit('J14', '=hLOOKUP(I4,G4:I6,3,FALSE)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('103.32');
            helper.edit('J15', '=HLOOKUP(I2,G2:I6,4,"FALSE")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('FALSE');
            helper.edit('J16', '=HLOOKUP(I2,G2:I6,4,"TRUE")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('FALSE');
            done();
        });
        it('HLOOKUP Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J17', '=HLOOKUP("Loafers",A9:F11,2,false)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('Cricket Shoes');
            helper.edit('J18', '=HLOOKUP("SNEAKERS",A7:F11,5,false)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('T-Shirts');
            helper.edit('J19', '=HLOOKUP("Hello123",I11:I12,1,false)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('Hello123');
            helper.edit('J20', '=HLOOKUP("Casual SHOES",A2:B11,4,false)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('Sandals & Floaters');
            helper.edit('J21', '=HLOOKUP("Bags",A2:D11,2,false)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#N/A');
            helper.edit('J22', '=HLOOKUP("loAFERs",A9:G11,1,false)');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('Loafers');
            done();
        });
        it('HLOOKUP Formula with direct values as expression ->', (done: Function) => {
            helper.edit('J23', '=HLOOKUP(20-10,D2:G5,2,false)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('20');
            helper.edit('J24', '=HLOOKUP(10+10,D2:G5,3,false)');
            expect(helper.invoke('getCell', [23, 9]).textContent).toBe('15');
            helper.edit('J25', '=HLOOKUP(10*1,G2:H5,2,false)');
            expect(helper.invoke('getCell', [24, 9]).textContent).toBe('50');
            helper.edit('J26', '=HLOOKUP(900/3,F4:G5,2,false)');
            expect(helper.invoke('getCell', [25, 9]).textContent).toBe('300');
            done();
        });
        it('HLOOKUP Formula with cell references as arguments ->', (done: Function) => {
            helper.edit('K1', '=HLOOKUP(A3,A3:C11,7,false)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('Loafers');
            helper.edit('K2', '=HLOOKUP(B3,A3:C11,3,false)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('41964');
            helper.edit('K3', '=HLOOKUP(C3,A3:C11,1,false)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0.247592593');
            helper.edit('K4', '=HLOOKUP(D3,B3:E11,3,false)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('15');
            helper.edit('K5', '=HLOOKUP(F3,F3:I5,3,false)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('300');
            helper.edit('K6', '=HLOOKUP(I2,I3:I4,2,false)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('FALSE');
            helper.edit('K7', '=HLOOKUP(I5,I4:I7,4)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('105.36');
            helper.edit('K8', '=HLOOKUP(I6,I6:I9,4)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('-123');
            helper.edit('K9', '=HLOOKUP(I8,I8:I10,3)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('0');
            helper.edit('K10', '=HLOOKUP(I13,I13:I14,2,false)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('32');
            helper.edit('K11', '=HLOOKUP(I15,I15:I16,2,false)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('12.76');
            helper.edit('K12', '=HLOOKUP(I19,I19:I20,2,false)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('115');
            done();
        });
        it('HLOOKUP Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('K13', '=HLOOKUP(E4>E5,I4:I5,1,false)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('FALSE');
            helper.edit('K14', '=HLOOKUP(E4<E5,I2:I5,1,false)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('TRUE');
            helper.edit('K15', '=HLOOKUP(E4>=E5,I4:I5,1,false)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('FALSE');
            helper.edit('K16', '=HLOOKUP(E4<=E5,I2:I5,1,false)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('TRUE');
            helper.edit('K17', '=HLOOKUP(F5=F6,I2:I5,1,false)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('TRUE');
            helper.edit('K18', '=HLOOKUP(F5<>F6,I4:I5,1,false)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('FALSE');
            done();
        });
        it('HLOOKUP Formula with expression and cell references, Wildcard as arguments ->', (done: Function) => {
            helper.edit('K19', '=HLOOKUP(D2+E11=D8,I2:I5,1,false)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('TRUE');
            helper.edit('K20', '=HLOOKUP(D2-E11=D8,I4:I5,1,false)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('FALSE');
            helper.edit('K21', '=HLOOKUP("C*",A2:D11,7,false)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('Running Shoes');
            helper.edit('K22', '=HLOOKUP("*C",A2:D11,2,false)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('#N/A');
            helper.edit('K23', '=HLOOKUP("???????",A9:D11,2,false)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('Cricket Shoes');
            helper.edit('K24', '=HLOOKUP("??Shirts",A11:D13,2,false)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('0');
            done();
        });
        it('HLOOKUP Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L1', '=SUM(HLOOKUP(10,D2:F11,2,FALSE),10)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('30');
            helper.edit('L2', '=HLOOKUP(COUNT(E2:F11),E2:G10,2,false)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('30');
            helper.edit('L3', '=HLOOKUP(AVERAGE(H2:H11),D2:G11,3)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('15');
            helper.edit('L4', '=HLOOKUP(SUM(D2,H2),D5:F8,3,false)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('20');
            helper.edit('L5', '=HLOOKUP(NOT(TRUE),I4:I8,5,false)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('-3221');
            helper.edit('L6', '=HLOOKUP(NOT(FALSE),G2:I6,5,false)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('103.32');
            helper.edit('L7', '=HLOOKUP(10,D2:E11,count(G2:G3),I4)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('20');
            helper.edit('L8', '=HLOOKUP(SUM(2,5)+COUNT(G10:G8),D2:E11,2,false)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('20');
            helper.edit('L9', '=HLOOKUP(MAX(D3,G6),E2:F5,4,false)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('20');
            done();
        });
        it('HLOOKUP Formula with Empty argument as input ->', (done: Function) => {
            helper.edit('L10', '=HLOOKUP(,,)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('#N/A');
            helper.edit('L11', '=HLOOKUP(,,,)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#N/A');
            helper.edit('L12', '=HLOOKUP(,H2:I11,2,TRUE)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#N/A');
            helper.edit('L13', '=HLOOKUP(10,,2,FALSE)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#N/A');
            helper.edit('L14', '=HLOOKUP(10,D2:G5,3,)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('20');
            helper.edit('L15', '=HLOOKUP(10,D2:E11,,)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('HLOOKUP Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('L16', '=HLOOKUP($D$5,D5:F11,3,I4)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('40');
            helper.edit('L17', '=HLOOKUP($D$5,$D$5:$F$11,5,$I$4)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('31');
            helper.edit('L18', '=HLOOKUP($F$9,$F$9:$G$11,2,$I$5)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('1210');
            helper.edit('L19', '=HLOOKUP(D6,$D$6:$H$11,G3,I4)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('41');
            helper.edit('L20', '=HLOOKUP($D$5,$D$5:$H$11,$G$3,$I$5)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('31');
            done();
        });
        it('HLOOKUP Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M1', '=HLOOKUP(Sheet1!H2,D2:F5,2,false)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('20');
            helper.edit('M2', '=HLOOKUP(Sheet2!A2,E2:F11,2,false)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('30');
            helper.edit('M3', '=HLOOKUP(F5,Sheet1!F5:G11,2,Sheet1!I4)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('300');
            helper.edit('M4', '=HLOOKUP(Sheet1!F8,Sheet1!F8:G11,2,False)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('310');
            helper.edit('M5', '=HLOOKUP(Sheet2!A2,Sheet1!E2:F11,2,FALSE)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('30');
            done();
        });
        it('HLOOKUP Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M6', '=HLOOKUP(Sheet1!$H$2,$D$2:$F$11,2,false)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('20');
            helper.edit('M7', '=HLOOKUP(Sheet2!$A$2,$E$2:$F$11,2,$I$4)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('30');
            helper.edit('M8', '=HLOOKUP(Sheet1!$D$5,$D$5:$H$11,$G$3,$I$5)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('31');
            helper.edit('M9', '=HLOOKUP($F$5,Sheet1!$F$5:$G$11,2,Sheet1!$I$4)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('300');
            helper.edit('M10', '=HLOOKUP(Sheet1!$F$8,Sheet1!$F$2:$G$11,2,False)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('600');
            helper.edit('M11', '=HLOOKUP(Sheet2!$A$2,Sheet1!$E$2:$F$11,2,FALSE)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('30');
            done();
        });
        it('HLOOKUP Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M12', '=HLOOKUP(,,,)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#N/A');
            helper.edit('M13', '=HLOOKUP(10,D2:E11,14)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#REF!');
            helper.edit('M14', '=HLOOKUP(20,D2:G11,-1)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#VALUE!');
            helper.edit('M15', '=HLOOKUP(20,D2:G11,0)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('#VALUE!');
            helper.edit('M16', '=HLOOKUP(112,D2:E9,2,true0)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('#NAME?');
            helper.edit('M17', '=HLOOKUP(112,D2:E9,2,false)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#N/A');
            helper.edit('M18', '=HLOOKUP(10,D2:E4,4,true)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('#REF!');
            done();
        });
        it('HLOOKUP Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=HLOOKUP()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=HLOOKUP()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=HLOOKUP(600,F3:G7,2,false)');
            spreadsheet.selectRange('N2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=HLOOKUP(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=HLOOKUP(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=HLOOKUP(600,F3:G7,2,false)');
            spreadsheet.selectRange('N3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=HLOOKUP(,,,,,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=HLOOKUP(,,,,,)';
            helper.triggerKeyNativeEvent(13);
            const dialog2: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N3', '=HLOOKUP(600,F3:G7,2,false)');
            done();
        });
    });

    describe('UI - Interaction', () => {
        let calcObj: any;
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Open circular reference dialog->', (done: Function) => {
            helper.invoke('updateCell', [{ value: '19' }, 'I1']);
            helper.invoke('updateCell', [{ value: '20' }, 'I2']);
            helper.editInUI('=I1+I2+I3', 'I3', true);
            setTimeout(() => {
                helper.setAnimationToNone('.e-control.e-dialog');
                expect(helper.getElement('.e-control.e-dialog')).not.toBeNull();
                calcObj = helper.getInstance().workbookFormulaModule.calculateInstance;
                expect(calcObj.getFormulaInfoTable().size).toBe(0);
                expect(calcObj.getDependentCells().size).toBe(0);
                expect(calcObj.getDependentFormulaCells().size).toBe(0);
                helper.click('.e-control.e-dialog .e-footer-content button:nth-child(1)');
                helper.invoke('closeEdit');
                done();
            });
        });
        it('Editing formula by using circular reference of the dependent formula cells->', (done: Function) => {
            helper.invoke('updateCell', [{ formula: '=SUM(I10+1)' }, 'I5']);
            const sheet: SheetModel = helper.getInstance().sheets[0];
            expect(JSON.stringify(sheet.rows[4].cells[8])).toBe('{"formula":"=SUM(I10+1)","value":1}');
            helper.invoke('updateCell', [{ value: '10' }, 'I10']);
            expect(JSON.stringify(sheet.rows[9].cells[8])).toBe('{"value":10}');
            helper.editInUI('=SUM(I5+2)', 'I10', true, sheet.rows[9].cells[8].value);
            setTimeout(() => {
                expect(JSON.stringify(sheet.rows[9].cells[8])).toBe('{"value":10}');
                const alertDlg: HTMLElement = helper.getElementFromSpreadsheet('.e-validation-error-dlg.e-dialog');
                expect(alertDlg.querySelector('.e-dlg-content').textContent).toBe('We found that you typed a formula with a circular reference.');
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                helper.click('.e-validation-error-dlg.e-dialog .e-footer-content button:nth-child(1)');
                expect(calcObj.getFormulaInfoTable().size).toBe(1);
                const dependentCells: any = calcObj.getDependentCells();
                expect(dependentCells.size).toBe(2);
                expect(dependentCells.get('!0!I10').length).toBe(1);
                expect(dependentCells.get('!0!I5').length).toBe(0);
                expect(calcObj.getDependentFormulaCells().size).toBe(1);
                helper.invoke('closeEdit');
                done();
            });
        });
        it('Calculating formulas which contains circular reference of the dependent cells using calculateNow() ->', (done: Function) => {
            const sheet: SheetModel = helper.getInstance().sheets[0];
            setCell(3, 8, sheet, { formula: '=SUM(I9)' });
            setCell(8, 8, sheet, { formula: '=SUM(I4)' });
            setCell(10, 8, sheet, { formula: '=I11' });
            helper.invoke('calculateNow');
            setTimeout(() => {
                expect(JSON.stringify(sheet.rows[3].cells[8])).toBe('{"formula":"=SUM(I9)","value":0}');
                expect(!!calcObj.getFormulaInfoTable().get('!0!I4')).toBeTruthy();
                const dependentCells: string[] = calcObj.getDependentCells().get('!0!I9');
                expect(dependentCells.length).toBe(1);
                expect(dependentCells[0]).toBe('!0!I4');
                expect(JSON.stringify(sheet.rows[8].cells[8])).toBe('{"formula":"=SUM(I4)","value":"0"}');
                expect(calcObj.getDependentCells().get('!0!I4').length).toBe(0);
                expect(!!calcObj.getFormulaInfoTable().get('!0!I9')).toBeTruthy();
                expect(JSON.stringify(sheet.rows[10].cells[8])).toBe('{"formula":"=I11","value":"0"}');
                expect(calcObj.getDependentCells().get('!0!I11')).toBeUndefined();
                expect(!!calcObj.getFormulaInfoTable().get('!0!I11')).toBeTruthy();
                const alertDlg: HTMLElement = helper.getElementFromSpreadsheet('.e-control.e-dialog');
                expect(alertDlg.querySelector('.e-dlg-content').textContent).toBe('When a formula refers to one or more circular references, this may result in an incorrect calculation.');
                helper.setAnimationToNone('.e-control.e-dialog');
                helper.click('.e-dialog .e-footer-content button:nth-child(1)');
                done();
            });
        });
        it('Changing common circular reference alert dialog content->', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            const sheet: SheetModel = spreadsheet.sheets[0];
            setCell(3, 9, sheet, { formula: '=SUM(J9 + 1)' });
            setCell(8, 9, sheet, { formula: '=SUM(J4 + 2)' });
            setCell(10, 9, sheet, { formula: '=J11' });
            let errorMsg: string = 'Circular reference found in: ';
            spreadsheet.dialogBeforeOpen = (args: DialogBeforeOpenEventArgs): void => {
                expect(args.dialogName).toBe('CircularReferenceDialog');
                expect(args.content).toBe('When a formula refers to one or more circular references, this may result in an incorrect calculation.');
                const dlgInst: any = getComponent(<HTMLElement>args.element, 'dialog');
                if (dlgInst.content === 'When a formula refers to one or more circular references, this may result in an incorrect calculation.') {
                    errorMsg +=  args.cellAddress;
                } else {
                    errorMsg += `, ${args.cellAddress}`;
                }
                args.content = errorMsg;
            };
            spreadsheet.dataBind();
            helper.invoke('calculateNow');
            setTimeout(() => {
                expect(JSON.stringify(sheet.rows[3].cells[9])).toBe('{"formula":"=SUM(J9 + 1)","value":1}');
                expect(!!calcObj.getFormulaInfoTable().get('!0!J4')).toBeTruthy();
                const dependentCells: string[] = calcObj.getDependentCells().get('!0!J9');
                expect(dependentCells.length).toBe(1);
                expect(dependentCells[0]).toBe('!0!J4');
                expect(JSON.stringify(sheet.rows[8].cells[9])).toBe('{"formula":"=SUM(J4 + 2)","value":"0"}');
                expect(calcObj.getDependentCells().get('!0!J4').length).toBe(0);
                expect(!!calcObj.getFormulaInfoTable().get('!0!J9')).toBeTruthy();
                expect(JSON.stringify(sheet.rows[10].cells[9])).toBe('{"formula":"=J11","value":"0"}');
                expect(calcObj.getDependentCells().get('!0!J11')).toBeUndefined();
                expect(!!calcObj.getFormulaInfoTable().get('!0!J11')).toBeTruthy();
                const alertDlg: HTMLElement = helper.getElementFromSpreadsheet('.e-control.e-dialog');
                expect(alertDlg.querySelector('.e-dlg-content').textContent).toBe('Circular reference found in: Sheet1!J9, Sheet1!J11');
                helper.setAnimationToNone('.e-control.e-dialog');
                helper.click('.e-dialog .e-footer-content button:nth-child(1)');
                done();
            });
        });
        it('Canceling the editing circular reference dialog ->', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            spreadsheet.dialogBeforeOpen = (args: DialogBeforeOpenEventArgs): void => {
                args.cancel = true;
                expect(args.dialogName).toBe('CircularReferenceDialog');
                expect(args.cellAddress).toBe('Sheet1!L1');
            };
            spreadsheet.dataBind();
            helper.editInUI('=L1', 'L1', true);
            setTimeout(() => {
                expect(helper.getElementFromSpreadsheet('.e-validation-error-dlg.e-dialog.e-popup-open')).toBeNull();
                expect(JSON.stringify(spreadsheet.sheets[0].rows[0].cells[11])).toBe('{"value":"0","formula":"=L1"}');
                expect(!!calcObj.getFormulaInfoTable().get('!0!L1')).toBeTruthy();
                expect(calcObj.getDependentCells().get('!0!L1')).toBeUndefined();
                expect(calcObj.getDependentFormulaCells().get('!0!L1').size).toBe(0);
                done();
            });
        });
        it('Changing the editing circular reference dialog content ->', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            const customAlertContent: string = 'You have typed the formula with circular reference';
            spreadsheet.dialogBeforeOpen = (args: DialogBeforeOpenEventArgs): void => {
                expect(args.dialogName).toBe('CircularReferenceDialog');
                expect(args.cellAddress).toBe('Sheet1!L1');
                args.content = customAlertContent;
            };
            spreadsheet.dataBind();
            helper.editInUI('=L1+10', 'L1', true, '=L1');
            setTimeout(() => {
                spreadsheet.dialogBeforeOpen = undefined;
                spreadsheet.dataBind();
                const alertDlg: HTMLElement = helper.getElementFromSpreadsheet('.e-validation-error-dlg.e-dialog');
                expect(alertDlg.classList.contains('e-popup-open')).toBeTruthy();
                expect(alertDlg.querySelector('.e-dlg-content').textContent).toBe(customAlertContent);
                expect(JSON.stringify(spreadsheet.sheets[0].rows[0].cells[11])).toBe('{"formula":"=L1","value":"0"}');
                expect(!!calcObj.getFormulaInfoTable().get('!0!L1')).toBeTruthy();
                expect(calcObj.getDependentCells().get('!0!L1')).toBeUndefined();
                expect(calcObj.getDependentFormulaCells().get('!0!L1').size).toBe(0);
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                helper.click('.e-validation-error-dlg.e-dialog .e-footer-content button:nth-child(1)');
                helper.invoke('closeEdit');
                done();
            }, 20);
        });
        it('Selecting formula in dropdown->', (done: Function) => {
            helper.invoke('selectRange', ['J1']);
            helper.triggerKeyNativeEvent(113);
            const editElem: HTMLElement = helper.getCellEditorElement();
            const spreadsheet: any = helper.getInstance();
            spreadsheet.notify('editOperation', { action: 'refreshEditor', value: '=SU', refreshCurPos: true, refreshEditorElem: true });
            helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            setTimeout(() => {
                expect(document.querySelector(`#${helper.id}_ac_popup .e-list-parent.e-ul`).childElementCount).toBe(5);
                helper.click('.e-ddl.e-popup li:nth-child(2)');
                spreadsheet.notify('editOperation', { action: 'refreshEditor', value: '=SUM(H2:H11)', refreshCurPos: true, refreshEditorElem: true });
                helper.triggerKeyNativeEvent(13);
                expect(JSON.stringify(spreadsheet.sheets[0].rows[0].cells[9])).toBe('{"value":554,"formula":"=SUM(H2:H11)"}');
                done();
            });
        });
        it('Selecting sub formula in dropdown->', (done: Function) => {
            helper.invoke('selectRange', ['J2']);
            helper.triggerKeyNativeEvent(113);
            const editElem: HTMLElement = helper.getCellEditorElement();
            editElem.textContent = '=SU';
            helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            setTimeout(() => {
                helper.click('.e-ddl.e-popup li:nth-child(2)');
                editElem.textContent = '=SUM(SU';
                helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                setTimeout(() => {
                    helper.click('.e-ddl.e-popup li:nth-child(1)');
                    helper.getElement('.e-spreadsheet-edit').textContent = '=SUM(SUM(H2:H11))';
                    helper.triggerKeyNativeEvent(13);
                    setTimeout(() => {
                        expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":554,"formula":"=SUM(SUM(H2:H11))"}');
                        done();
                    });
                });
            });
        });
        it('Selecting sub formula in dropdown with list separator->', (done: Function) => {
            helper.invoke('selectRange', ['J2']);
            helper.triggerKeyNativeEvent(113);
            const editElem: HTMLElement = helper.getCellEditorElement();
            editElem.textContent = '=SU';
            helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            setTimeout(() => {
                helper.click('.e-ddl.e-popup li:nth-child(2)');
                editElem.textContent = '=SUM(10,SU';
                helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                setTimeout(() => {
                    helper.click('.e-ddl.e-popup li:nth-child(1)');
                    helper.getElement('.e-spreadsheet-edit').textContent = '=SUM(SUM(H2:H11))';
                    helper.triggerKeyNativeEvent(13);
                    setTimeout(() => {
                        expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":554,"formula":"=SUM(SUM(H2:H11))"}');
                        done();
                    });
                });
            });
        });
        it('Clicking down arrow and up arrow and tab key in formula dropdown->', (done: Function) => {
            helper.invoke('selectRange', ['J3']);
            helper.triggerKeyNativeEvent(113);
            helper.getInstance().notify('editOperation', { action: 'refreshEditor', value: '=SU', refreshCurPos: true, refreshEditorElem: true });
            const editElem: HTMLElement = helper.getCellEditorElement();
            helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            setTimeout(() => {
                helper.triggerKeyNativeEvent(40);
                setTimeout(() => {
                    helper.triggerKeyNativeEvent(38);
                    helper.triggerKeyNativeEvent(40);
                    helper.triggerKeyNativeEvent(9);
                    helper.getInstance().notify('editOperation', { action: 'refreshEditor', value: '=SUM(H2:H11)', refreshCurPos: true, refreshEditorElem: true });
                    helper.triggerKeyNativeEvent(13);
                    setTimeout(() => {
                        expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":554,"formula":"=SUM(H2:H11)"}');
                        done();
                    }, 20);
                }, 20);
            }, 20);
        });
        it('Close name box popup using esc button->', (done: Function) => {
            helper.invoke('selectRange', ['J3']);
            let nameBox: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('#' + helper.id + '_name_box');
            nameBox.click();
            setTimeout(() => {
                helper.triggerKeyEvent('keydown', 27, null, false, false, nameBox);
                done();
            });
        });
        it('Editing after opening suggestion already opened in dropdown->', (done: Function) => {
            helper.invoke('selectRange', ['J4']);
            helper.triggerKeyNativeEvent(113);
            const editElem: HTMLElement = helper.getCellEditorElement();
            editElem.textContent = '=S';
            helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            setTimeout(() => {
                expect(document.querySelector(`#${helper.id}_ac_popup .e-list-parent.e-ul`).childElementCount).toBe(10);
                editElem.textContent = '=SU';
                helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                setTimeout(() => {
                    expect(document.querySelector(`#${helper.id}_ac_popup .e-list-parent.e-ul`).childElementCount).toBe(5);
                    helper.click('.e-ddl.e-popup li:nth-child(2)');
                    helper.getInstance().notify('editOperation', { action: 'refreshEditor', value: '=SUM(H2:H11)', refreshCurPos: true, refreshEditorElem: true });
                    helper.triggerKeyNativeEvent(13);
                    setTimeout(() => {
                        expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"formula":"=SUM(H2:H11)","value":554}');
                        done();
                    });
                });
            });
        });
        it('Defined name editing alert->', (done: Function) => {
            helper.invoke('selectRange', ['J1:J4']);
            let nameBox: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('#' + helper.id + '_name_box');
            nameBox.click();
            nameBox.value = 'Test1';
            helper.triggerKeyEvent('keydown', 13, null, false, false, nameBox);
            helper.invoke('selectRange', ['I1:I3']);
            nameBox.click();
            nameBox.value = 'Test1';
            helper.triggerKeyEvent('keydown', 13, null, false, false, nameBox);
            setTimeout(() => {
                helper.setAnimationToNone('.e-control.e-dialog');
                expect(helper.getElement('.e-control.e-dialog')).not.toBeNull();
                helper.click('.e-control.e-dialog:not(.e-validation-error-dlg) .e-footer-content button:nth-child(1)');
                done();
            });
        });
        it('Deleting sub formula after adding->', (done: Function) => {
            helper.invoke('selectRange', ['K1']);
            helper.triggerKeyNativeEvent(113);
            const editElem: HTMLElement = helper.getCellEditorElement();
            editElem.textContent = '=SU';
            helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            setTimeout(() => {
                helper.click('.e-ddl.e-popup li:nth-child(2)');
                editElem.textContent = '=SUM(S';
                helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                setTimeout(() => {
                    editElem.textContent = '=SUM(';
                    helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                    setTimeout(() => {
                        expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":554,"formula":"=SUM(SUM(H2:H11))"}');
                        helper.invoke('closeEdit');
                        done();
                    });
                });
            });
        });
        it('Cancelling the circular reference error dialog', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            spreadsheet.dialogBeforeOpen = (args: DialogBeforeOpenEventArgs): void => {
                args.cancel = true;
            };
            spreadsheet.dataBind();
            setCell(2, 8, spreadsheet.getActiveSheet(), { formula: '=I1+I2+I3' });
            helper.invoke('calculateNow');
            setTimeout((): void => {
                expect(helper.getElementFromSpreadsheet('.e-dialog.e-popup-open:not(.e-validation-error-dlg)')).toBeNull();
                helper.invoke('selectRange', ['K2']);
                done();
            });
        });
        // it('Selecting formula in dropdown in formula bar->', (done: Function) => {
            // let editorElem: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('.e-formula-bar-panel .e-formula-bar');
            // let e = new MouseEvent('mousedown', { view: window, bubbles: true, cancelable: true });
            // editorElem.dispatchEvent(e);
            // e = new MouseEvent('mouseup', { view: window, bubbles: true, cancelable: true });
            // editorElem.dispatchEvent(e);
            // e = new MouseEvent('click', { view: window, bubbles: true, cancelable: true });
            // editorElem.dispatchEvent(e);
            // const editElem: HTMLElement = helper.getCellEditorElement();
            // editElem.textContent = '=SU';
            // helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
            // setTimeout(() => {
                // helper.click('.e-ddl.e-popup li:nth-child(2)');
                // helper.getElement('.e-spreadsheet-edit').textContent = '=SUM(H2:H11)';
                // helper.triggerKeyNativeEvent(13);
                //expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":554,"formula":"=SUM(H2:H11)"}');
                // done();
            // },30);
        // });
        it('Add defined for whole column', (done: Function) => {
            helper.invoke('selectRange', [getRangeAddress([0, 7, helper.getInstance().sheets[0].rowCount, 7])]);
            setTimeout(() => {
                let nameBox: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('#' + helper.id + '_name_box');
                nameBox.click();
                nameBox.value = '123';
                helper.triggerKeyEvent('keydown', 13, null, false, false, nameBox);
                nameBox.classList.remove('e-name-editing');
                expect(helper.getInstance().definedNames.length).toBe(2);
                expect(helper.getInstance().definedNames[1].name).toBe('123');
                done();
            }, 20);
        });
        it('Cancelling the definename exists dialog error', (done: Function) => {
            helper.invoke('selectRange', ['A5:A7']);
            setTimeout(() => {
                let nameBox: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('#' + helper.id + '_name_box');
                nameBox.click();
                nameBox.value = '123';
                helper.triggerKeyEvent('keydown', 13, null, false, false, nameBox);
                setTimeout(function () {
                    expect(helper.getElementFromSpreadsheet('.e-dialog.e-popup-open:not(.e-validation-error-dlg)')).toBeNull();
                    done();
                });
            }, 20);
        });
        it('Cancelling the definename invalid dialog error', (done: Function) => {
            helper.invoke('selectRange', ['A5:A7']);
            setTimeout(() => {
                let nameBox: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('#' + helper.id + '_name_box');
                nameBox.click();
                nameBox.value = '/';
                helper.triggerKeyEvent('keydown', 13, null, false, false, nameBox);
                setTimeout(function () {
                    expect(helper.getElementFromSpreadsheet('.e-dialog.e-popup-open:not(.e-validation-error-dlg)')).toBeNull();
                    const spreadsheet: Spreadsheet = helper.getInstance();
                    spreadsheet.dialogBeforeOpen = undefined;
                    spreadsheet.dataBind();
                    done();
                });
            }, 20);
        });
    });

    describe('DECIMAL Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('DECIMAL Formula ->', (done: Function) => {
            helper.edit('J1', '=DECIMAL(100,2)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[9])).toBe('{"value":4,"formula":"=DECIMAL(100,2)"}');
            done();
        });
        it('DECIMAL Formula for Binary Values->', (done: Function) => {
            helper.edit('J2', '=DECIMAL(1101,2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('13');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[9])).toBe('{"value":13,"formula":"=DECIMAL(1101,2)"}');
            helper.edit('J3', '=DECIMAL(10011,2)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('19');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[9])).toBe('{"value":19,"formula":"=DECIMAL(10011,2)"}');
            done();
        });
        it('DECIMAL Formula for Octal Values->', (done: Function) => {
            helper.edit('J4', '=DECIMAL(12,8)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[9])).toBe('{"value":10,"formula":"=DECIMAL(12,8)"}');
            helper.edit('J5', '=DECIMAL(4323,8)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('2259');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[9])).toBe('{"value":2259,"formula":"=DECIMAL(4323,8)"}');
            done();
        });
        it('DECIMAL Formula for Decimal(base10) Values->', (done: Function) => {
            helper.edit('J6', '=DECIMAL(3214,10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('3214');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[9])).toBe('{"value":3214,"formula":"=DECIMAL(3214,10)"}');
            helper.edit('J7', '=DECIMAL(10132,10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('10132');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[9])).toBe('{"value":10132,"formula":"=DECIMAL(10132,10)"}');
            done();
        });
        it('DECIMAL Formula for Hexadecimal Values->', (done: Function) => {
            helper.edit('J8', '=DECIMAL("FF",16)');
            expect(helper.getInstance().sheets[0].rows[7].cells[9].formula).toBe('=DECIMAL("FF",16)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('255');
            helper.edit('J9', '=DECIMAL("HELLO",16)');
            expect(helper.getInstance().sheets[0].rows[8].cells[9].formula).toBe('=DECIMAL("HELLO",16)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#NUM!');
            done();
        });
        it('DECIMAL Formula for duotrigesimal Values->', (done: Function) => {
            helper.edit('J10', '=DECIMAL("HELLO",32)');
            expect(helper.getInstance().sheets[0].rows[9].cells[9].formula).toBe('=DECIMAL("HELLO",32)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('18306744');
            helper.edit('J11', '=DECIMAL(1521,32)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[9])).toBe('{"value":37953,"formula":"=DECIMAL(1521,32)"}');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('37953');
            done();
        });
        it('DECIMAL Formula for hexatridecimal  Values->', (done: Function) => {
            helper.edit('J12', '=DECIMAL("HELLO",36)');
            expect(helper.getInstance().sheets[0].rows[11].cells[9].formula).toBe('=DECIMAL("HELLO",36)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('29234652');
            helper.edit('J13', '=DECIMAL(302,36)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[9])).toBe('{"value":3890,"formula":"=DECIMAL(302,36)"}');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('3890');
            done();
        });
        it('DECIMAL Formula for Hexadecimal Values with different radix ->', (done: Function) => {
            helper.edit('J14', '=DECIMAL("FF",2)');
            expect(helper.getInstance().sheets[0].rows[13].cells[9].formula).toBe('=DECIMAL("FF",2)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#NUM!');
            helper.edit('J15', '=DECIMAL("FE",4)');
            expect(helper.getInstance().sheets[0].rows[14].cells[9].formula).toBe('=DECIMAL("FE",4)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#NUM!');
            helper.edit('J16', '=DECIMAL("EF",8)');
            expect(helper.getInstance().sheets[0].rows[15].cells[9].formula).toBe('=DECIMAL("EF",8)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('#NUM!');
            helper.edit('J17', '=DECIMAL("FF",10)');
            expect(helper.getInstance().sheets[0].rows[16].cells[9].formula).toBe('=DECIMAL("FF",10)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('#NUM!');
            helper.edit('J18', '=DECIMAL("FF",16)');
            expect(helper.getInstance().sheets[0].rows[17].cells[9].formula).toBe('=DECIMAL("FF",16)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('255');
            done();
        });
        it('DECIMAL Formula with no inputs->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J19');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=DECIMAL()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=DECIMAL()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J19', '=DECIMAL("1101",2)');
            done();
        });
        it('DECIMAL Formula with no values->', (done: Function) => {
            helper.edit('J20', '=DECIMAL(,)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[9])).toBe('{"value":"#NUM!","formula":"=DECIMAL(,)"}');
            done();
        });
        it('DECIMAL Formula with input having no radix number->', (done: Function) => {
            helper.edit('J21', '=DECIMAL(100,)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[9])).toBe('{"value":"#NUM!","formula":"=DECIMAL(100,)"}');
            done();
        });
        it('DECIMAL Formula with input having only radix number->', (done: Function) => {
            helper.edit('K1', '=DECIMAL(,2)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":0,"formula":"=DECIMAL(,2)"}');
            done();
        });
        it('DECIMAL Formula with input having negative arguments->', (done: Function) => {
            helper.edit('K2', '=DECIMAL(-1011,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#NUM!","formula":"=DECIMAL(-1011,2)"}');
            done();
        });
        it('DECIMAL Formula with input having decimal arguments->', (done: Function) => {
            helper.edit('K3', '=DECIMAL(1011.5,2)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"#NUM!","formula":"=DECIMAL(1011.5,2)"}');
            done();
        });
        it('DECIMAL Formula with invalid radix value->', (done: Function) => {
            helper.edit('K4', '=DECIMAL(1011,0)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#NUM!","formula":"=DECIMAL(1011,0)"}');
            helper.edit('K5', '=DECIMAL(1011,1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"#NUM!","formula":"=DECIMAL(1011,1)"}');
            helper.edit('K6', '=DECIMAL(1011,37)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"#NUM!","formula":"=DECIMAL(1011,37)"}');
            done();
        });
        it('DECIMAL Formula with invalid arguments->', (done: Function) => {
            helper.edit('K7', '=DECIMAL(ACD,2)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"#NAME?","formula":"=DECIMAL(ACD,2)"}');
            helper.edit('K8', '=DECIMAL(101,FF)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[10])).toBe('{"value":"#NAME?","formula":"=DECIMAL(101,FF)"}');
            helper.edit('K9', '=DECIMAL(HELLO,AC)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[10])).toBe('{"value":"#NAME?","formula":"=DECIMAL(HELLO,AC)"}');
            done();
        });
        it('DECIMAL Formula with expression as arguments->', (done: Function) => {
            helper.edit('K10', '=DECIMAL(110,2+H2)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('156');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[10])).toBe('{"value":156,"formula":"=DECIMAL(110,2+H2)"}');
            helper.edit('K11', '=DECIMAL("HELLO+2",36)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('#NUM!');
            expect(helper.getInstance().sheets[0].rows[10].cells[10].formula).toBe('=DECIMAL("HELLO+2",36)');
            helper.edit('K12', '=DECIMAL(E3+2,32)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('98');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[10])).toBe('{"value":98,"formula":"=DECIMAL(E3+2,32)"}');
            done();
        });
        it('DECIMAL Formula with special characters as arguments->', (done: Function) => {
            helper.edit('K13', '=DECIMAL("HELLO+2",36)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('#NUM!');
            expect(helper.getInstance().sheets[0].rows[12].cells[10].formula).toBe('=DECIMAL("HELLO+2",36)');
            helper.edit('K14', '=DECIMAL("Hello@",36)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#NUM!');
            expect(helper.getInstance().sheets[0].rows[13].cells[10].formula).toBe('=DECIMAL("Hello@",36)');
            helper.edit('K15', '=DECIMAL("?WHAT",36)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#NUM!');
            expect(helper.getInstance().sheets[0].rows[14].cells[10].formula).toBe('=DECIMAL("?WHAT",36)');
            done();
        });
        it('DECIMAL Formula with Worst case value as arguments->', (done: Function) => {
            helper.edit('K16', '=DECIMAL(FF,16)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[10])).toBe('{"value":"#NAME?","formula":"=DECIMAL(FF,16)"}');
            helper.edit('K17', '=DECIMAL("One",2)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('#NUM!');
            expect(helper.getInstance().sheets[0].rows[16].cells[10].formula).toBe('=DECIMAL("One",2)');
            helper.edit('K18', '=DECIMAL(100,"2a")');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[17].cells[10].formula).toBe('=DECIMAL(100,"2a")');
            helper.edit('K19', '=DECIMAL(11,FF)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[10])).toBe('{"value":"#NAME?","formula":"=DECIMAL(11,FF)"}');
            done();
        });
        it('DECIMAL Formula with cell Reference as arguments->', (done: Function) => {
            helper.edit('L1', '=DECIMAL(D4,G3)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":10,"formula":"=DECIMAL(D4,G3)"}');
            helper.edit('L2', '=DECIMAL(F4,G6)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('300');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":300,"formula":"=DECIMAL(F4,G6)"}');
            helper.edit('L3', '=DECIMAL(4231,G10)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('7237');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":7237,"formula":"=DECIMAL(4231,G10)"}');
            helper.edit('L4', '=DECIMAL(F10,8)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('648');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":648,"formula":"=DECIMAL(F10,8)"}');
            done();
        });
        it('DECIMAL Formula with different type of cell Reference values as arguments->', (done: Function) => {
            helper.edit('L5', '=DECIMAL(I12,36)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('82988828124');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":82988828124,"formula":"=DECIMAL(I12,36)"}');
            helper.edit('L6', '=DECIMAL(I10,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":0,"formula":"=DECIMAL(I10,2)"}');
            helper.edit('L7', '=DECIMAL(B4,16)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('268359');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":268359,"formula":"=DECIMAL(B4,16)"}');
            helper.edit('L8', '=DECIMAL(I7,32)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(I7,32)"}');
            helper.edit('L9', '=DECIMAL(I8,36)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(I8,36)"}');
            helper.edit('L10', '=DECIMAL(C6,2)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(C6,2)"}');
            helper.edit('L11', '=DECIMAL(I17,16)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('18');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[11])).toBe('{"value":18,"formula":"=DECIMAL(I17,16)"}');
            helper.edit('L12', '=DECIMAL(I16,36)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(I16,36)"}');
            helper.edit('L13', '=DECIMAL(I20,16)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('277');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":277,"formula":"=DECIMAL(I20,16)"}');
            done();
        });
        it('DECIMAL Formula with logical values as arguments->', (done: Function) => {
            helper.edit('L14', '=DECIMAL(TRUE,31)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('890830');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":890830,"formula":"=DECIMAL(TRUE,31)"}');
            helper.edit('L15', '=DECIMAL(FALSE,32)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('16078734');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[11])).toBe('{"value":16078734,"formula":"=DECIMAL(FALSE,32)"}');
            helper.edit('L16', '=DECIMAL(101,TRUE)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(101,TRUE)"}');
            helper.edit('L17', '=DECIMAL(101,FALSE)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(101,FALSE)"}');
            done();
        });
        it('DECIMAL Formula with cell reference logical values as arguments->', (done: Function) => {
            helper.edit('L18', '=DECIMAL(I2,36)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('1389110');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[11])).toBe('{"value":1389110,"formula":"=DECIMAL(I2,36)"}');
            helper.edit('L19', '=DECIMAL(I4,32)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('16078734');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[11])).toBe('{"value":16078734,"formula":"=DECIMAL(I4,32)"}');
            helper.edit('L20', '=DECIMAL(101,I3)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(101,I3)"}');
            helper.edit('L21', '=DECIMAL(101,I5)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[11])).toBe('{"value":"#NUM!","formula":"=DECIMAL(101,I5)"}');
            done();
        });
        it('DECIMAL Formula with string of logical values as arguments->', (done: Function) => {
            helper.edit('L22', '=DECIMAL("TRUE",36)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('1389110');
            expect(helper.getInstance().sheets[0].rows[21].cells[11].formula).toBe('=DECIMAL("TRUE",36)');
            helper.edit('L23', '=DECIMAL("FALSE",36)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('25689038');
            expect(helper.getInstance().sheets[0].rows[22].cells[11].formula).toBe('=DECIMAL("FALSE",36)');
            helper.edit('L24', '=DECIMAL(1011,"TRUE")');
            expect(helper.invoke('getCell', [23, 11]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[23].cells[11].formula).toBe('=DECIMAL(1011,"TRUE")');
            helper.edit('L25', '=DECIMAL("FALSE","FALSE")');
            expect(helper.invoke('getCell', [24, 11]).textContent).toBe('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[24].cells[11].formula).toBe('=DECIMAL("FALSE","FALSE")');
            done();
        });
        it('DECIMAL Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=DECIMAL($G$5,$G$8)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":4,"formula":"=DECIMAL($G$5,$G$8)"}');
            helper.edit('M2', '=DECIMAL(1101,$G$8)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('37');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":37,"formula":"=DECIMAL(1101,$G$8)"}');
            helper.edit('M3', '=DECIMAL($F$7,32)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('8192');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":8192,"formula":"=DECIMAL($F$7,32)"}');
            done();
        });
        it('DECIMAL Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M4', '=DECIMAL(Sheet2!A4,Sheet2!A6)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('105');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":105,"formula":"=DECIMAL(Sheet2!A4,Sheet2!A6)"}');
            helper.edit('M5', '=DECIMAL(Sheet1!D2,Sheet2!A2)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":20,"formula":"=DECIMAL(Sheet1!D2,Sheet2!A2)"}');
            helper.edit('M6', '=DECIMAL(Sheet2!A6,Sheet1!G4)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('26');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":26,"formula":"=DECIMAL(Sheet2!A6,Sheet1!G4)"}');
            helper.edit('M7', '=DECIMAL(Sheet1!F4,Sheet1!G9)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('108');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":108,"formula":"=DECIMAL(Sheet1!F4,Sheet1!G9)"}');
            done();
        });
        it('DECIMAL Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M8', '=DECIMAL(Sheet2!$A$3,Sheet2!$A$6)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":6,"formula":"=DECIMAL(Sheet2!$A$3,Sheet2!$A$6)"}');
            helper.edit('M9', '=DECIMAL(F10,Sheet2!$A$4)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('28830');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":28830,"formula":"=DECIMAL(F10,Sheet2!$A$4)"}');
            helper.edit('M10', '=DECIMAL(Sheet1!$D$2,$H$8)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('14');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":14,"formula":"=DECIMAL(Sheet1!$D$2,$H$8)"}');
            helper.edit('M11', '=DECIMAL($F$10,$G$9)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('294');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[12])).toBe('{"value":294,"formula":"=DECIMAL($F$10,$G$9)"}');
            helper.edit('M12', '=DECIMAL(Sheet1!$F$4,Sheet1!$G$9)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('108');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[12])).toBe('{"value":108,"formula":"=DECIMAL(Sheet1!$F$4,Sheet1!$G$9)"}');
            done();
        });
    });

    describe('SUM Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Decimals' }] }, { cells: [{ index: 8, value: '102.32' }] },
                        { cells: [{ index: 8, value: '105.43' }] }, { cells: [{ index: 8, value: '103.23' }] },
                        { cells: [{ index: 8, value: '1002.2323' }] }, { cells: [{ index: 8, value: '1023.3219' }] },
                        { cells: [{ index: 8, value: '1022.4567' }] }, { cells: [{ index: 8, value: '320.12354' }] },
                        { cells: [{ index: 8, value: '102.45674' }] }, { cells: [{ index: 8, value: '103.32321' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: '-3221' }] }, { cells: [{ index: 8, value: '-1253' }] },
                        { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '119', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '321', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12.56', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '2', format: '0%' }] },
                        { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '12' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '76' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '93' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'ABC' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUM Formula with ranged cell references values as arguments->', (done: Function) => {
            helper.edit('J1', '=SUM(A2:A10)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0');
            helper.edit('J2', '=SUM(B3:B10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('6/28/2816');
            helper.edit('J3', '=SUM(C3:C8)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('7:17:36 AM');
            helper.edit('J4', '=SUM(D2:D11)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('277');
            helper.edit('J5', '=SUM(I2:I6)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('2336.5342');
            helper.edit('J6', '=SUM(I6:I10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('2571.68209');
            helper.edit('J7', '=SUM(I19:I21)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-4474');
            helper.edit('J8', '=SUM(I24:I25)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('$131.56');
            helper.edit('J9', '=SUM(I26:I27)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('2.9000E+01');
            helper.edit('J10', '=SUM(I28:I29)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('11700%');
            helper.edit('J11', '=SUM(I13:I16)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0');
            helper.edit('J12', '=SUM(I13:I29)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('-3756.44');
            done();
        });
        it('SUM Formula with single cell references values as arguments->', (done: Function) => {
            helper.edit('J13', '=SUM(I21)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('0');
            helper.edit('J14', '=SUM(F3)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('600');
            helper.edit('J15', '=SUM(C13)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('0');
            helper.edit('J16', '=SUM(D3,E7,I4,I20,F9)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('-799.77');
            helper.edit('J17', '=SUM(A6:A8,D7,F6,G10)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('352');
            helper.edit('J18', '=SUM(I21,G2,A8:A11)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('1');
            helper.edit('J19', '=SUM(E7,I11,E10,C6,A10)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('SUM Formula with different format arguments as input in General formatted cells ->', (done: Function) => {
            helper.edit('K1', '=SUM(E2:E11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('175');
            helper.edit('K2', '=SUM(I26:I27)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('2.9000E+01');
            helper.edit('K3', '=SUM(I24:I25)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('$131.56');
            helper.edit('K4', '=SUM(I28:I29)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('11700%');
            helper.edit('K5', '=SUM(I2:I10)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('3884.89439');
            done();
        });
        it('SUM Formula with different format arguments as input in Currency formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['$#,##0.00', 'K6']);
            helper.edit('K6', '=SUM(E2:E11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('$175.00');
            helper.invoke('numberFormat', ['$#,##0.00', 'K7']);
            helper.edit('K7', '=SUM(I26:I27)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('$29.00');
            helper.invoke('numberFormat', ['$#,##0.00', 'K8']);
            helper.edit('K8', '=SUM(I24:I25)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('$131.56');
            helper.invoke('numberFormat', ['$#,##0.00', 'K9']);
            helper.edit('K9', '=SUM(I28:I29)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('$117.00');
            helper.invoke('numberFormat', ['$#,##0.00', 'K10']);
            helper.edit('K10', '=SUM(I2:I10)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('$3,884.89');
            done();
        });
        it('SUM Formula with different format arguments as input in Percentage formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0%', 'K11']);
            helper.edit('K11', '=SUM(E2:E11)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('17500%');
            helper.invoke('numberFormat', ['0%', 'K12']);
            helper.edit('K12', '=SUM(I26:I27)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('2.9000E+01');
            helper.invoke('numberFormat', ['0%', 'K13']);
            helper.edit('K13', '=SUM(I24:I25)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('$131.56');
            helper.invoke('numberFormat', ['0%', 'K14']);
            helper.edit('K14', '=SUM(I28:I29)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('11700%');
            helper.invoke('numberFormat', ['0%', 'K15']);
            helper.edit('K15', '=SUM(I2:I10)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('388489%');
            done();
        });
        it('SUM Formula with different format arguments as input in Scientific formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0.0000E+00', 'K16']);
            helper.edit('K16', '=SUM(E2:E11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('1.7500E+02');
            helper.invoke('numberFormat', ['0.0000E+00', 'K17']);
            helper.edit('K17', '=SUM(I26:I27)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('2.9000E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K18']);
            helper.edit('K18', '=SUM(I24:I25)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('$131.56');
            helper.invoke('numberFormat', ['0.0000E+00', 'K19']);
            helper.edit('K19', '=SUM(I28:I29)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('11700%');
            helper.invoke('numberFormat', ['0.0000E+00', 'K20']);
            helper.edit('K20', '=SUM(I2:I10)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('3.8849E+03');
            done();
        });
        it('SUM Formula with different format arguments as input in Number formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['#,##0.00', 'K21']);
            helper.edit('K21', '=SUM(E2:E11)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('175.00');
            helper.invoke('numberFormat', ['#,##0.00', 'K22']);
            helper.edit('K22', '=SUM(I26:I27)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('29.00');
            helper.invoke('numberFormat', ['#,##0.00', 'K23']);
            helper.edit('K23', '=SUM(I24:I25)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('131.56');
            helper.invoke('numberFormat', ['#,##0.00', 'K24']);
            helper.edit('K24', '=SUM(I28:I29)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('117.00');
            helper.invoke('numberFormat', ['#,##0.00', 'K25']);
            helper.edit('K25', '=SUM(I2:I10)');
            expect(helper.invoke('getCell', [24, 10]).textContent).toBe('3,884.89');
            done();
        });
        it('SUM Formula with list of different arguments as input->', (done: Function) => {
            helper.edit('L1', '=SUM(D2:D11,E7,G7,42,"2")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('354');
            helper.edit('L2', '=SUM(D2:D11,E11,G2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('288');
            helper.edit('L3', '=SUM(1,3,4,"a")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#VALUE!');
            helper.edit('L4', '=SUM("1","323",F9:F10,"Hi123","123Hi","H123i")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#VALUE!');
            helper.edit('L5', '=SUM("HI123",123,"123HI")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            helper.edit('L6', '=SUM("1")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('1');
            done();
        });
        it('SUM Formula with logical value as argument->', (done: Function) => {
            helper.edit('L7', '=SUM(1,3,"43",TRUE)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('48');
            helper.edit('L8', '=SUM(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('33');
            helper.edit('L9', '=SUM(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('33');
            helper.edit('L10', '=SUM(TRUE,FALSE)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('1');
            helper.edit('L11', '=SUM("1",TRUE,FALSE,4)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('6');
            helper.edit('L12', '=SUM("TRUE","FALSE")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            helper.edit('L13', '=SUM(I15:I18)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0');
            helper.edit('L14', '=SUM(I15,I17,I16,I18)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('0');
            helper.edit('L15', '=SUM(FALSE)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('0');
            done();
        });
        it('SUM Formula with nested formula as input->', (done: Function) => {
            helper.edit('L16', '=SUM(LEN(D10),LEN(D8),LEN(E10))');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('6');
            helper.edit('L17', '=SUM(GEOMEAN(G2:G6),GEOMEAN(H3:H7))');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('58.20502849');
            helper.edit('L18', '=SUM(COUNT(F16:F20),10)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('10');
            done();
        });
        it('SUM Formula with Expression value as input->', (done: Function) => {
            helper.edit('L19', '=SUM(D2+17)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('27');
            helper.edit('L20', '=SUM(100-D2)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('90');
            helper.edit('L21', '=SUM(10+22*10)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('230');
            helper.edit('L22', '=SUM(H4+I2*10)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('1050.2');
            done();
        });
        it('SUM Formula with worst case value as argument->', (done: Function) => {
            helper.edit('M1', '=SUM(A2:A11)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('0');
            helper.edit('M2', '=SUM(I12,G10)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NAME?');
            helper.edit('M3', '=SUM(,)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('0');
            helper.edit('M4', '=SUM(1,3, ,0)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('4');
            helper.edit('M5', '=SUM(0)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('0');
            helper.edit('M6', '=SUM(1,2,"")');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            helper.edit('M7', '=SUM(I11)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            helper.edit('M8', '=SUM(I12)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#NAME?');
            helper.edit('M9', '=SUM("Hello")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('SUM Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=SUM($F$2:$F$20)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('4720');
            helper.edit('N2', '=SUM($I$4:$I$7,$F$4:$F$7)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('4851.2409');
            helper.edit('N3', '=SUM($I$3:$I$9,$H$8)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('3693.25118');
            done();
        });
        it('SUM Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N4', '=SUM(Sheet2!A1:A10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('356');
            helper.edit('N5', '=SUM(Sheet2!A1:A10,Sheet1!F2:F11)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('5076');
            helper.edit('N6', '=SUM(Sheet1!D1:D10,Sheet2!A2:A11)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('571');
            helper.edit('N7', '=SUM(Sheet1!E2:E11,Sheet1!H2:H11)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('729');
            helper.edit('N8', '=SUM(Sheet2!A5,Sheet2!A2)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('113');
            helper.edit('N9', '=SUM(Sheet1!D5,Sheet1!E2)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('35');
            helper.edit('N10', '=SUM(Sheet1!D5,Sheet2!A3)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('91');
            helper.edit('N11', '=SUM(Sheet2!A5,Sheet1!E3)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('123');
            done();
        });
        it('SUM Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N12', '=SUM(Sheet2!$A$1:$A$6,Sheet2!$C$3:$C$10,Sheet2!$B$12,$D$6)');
            expect(helper.invoke('getCell', [11, 13]).textContent).toBe('296');
            helper.edit('N13', '=SUM(Sheet2!$A$1:$A$10,Sheet1!$F$2:$F$11)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('5076');
            helper.edit('N14', '=SUM(Sheet1!$E$2:$E$11,Sheet1!$H$2:$H$11)');
            expect(helper.invoke('getCell', [13, 13]).textContent).toBe('729');
            helper.edit('N15', '=SUM(Sheet1!$E$2:$E$11)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('175');
            helper.edit('N16', '=SUM(Sheet2!$A$7)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('40');
            helper.edit('N17', '=SUM(Sheet2!$A$5,Sheet1!$E$2)');
            expect(helper.invoke('getCell', [16, 13]).textContent).toBe('113');
            done();
        });
        it('SUM formula with invalid arguments error dialog cases ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N18');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUM()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUM()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N18', '=SUM(10,30,20)');
            expect(helper.invoke('getCell', [17, 13]).textContent).toBe('60');
            done();
        });
    });

    describe('AVERAGE Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Decimals' }] }, { cells: [{ index: 8, value: '102.32' }] },
                        { cells: [{ index: 8, value: '105.43' }] }, { cells: [{ index: 8, value: '103.23' }] },
                        { cells: [{ index: 8, value: '1002.2323' }] }, { cells: [{ index: 8, value: '1023.3219' }] },
                        { cells: [{ index: 8, value: '1022.4567' }] }, { cells: [{ index: 8, value: '320.12354' }] },
                        { cells: [{ index: 8, value: '102.45674' }] }, { cells: [{ index: 8, value: '103.32321' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: '-3221' }] }, { cells: [{ index: 8, value: '-1253' }] },
                        { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '119', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '321', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12.56', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '2', format: '0%' }] },
                        { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '12' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '76' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '93' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'ABC' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('AVERAGE Formula with ranged cell references values as arguments->', (done: Function) => {
            helper.edit('J1', '=AVERAGE(A2:A10)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J2', '=AVERAGE(B3:B10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('7/22/2014');
            helper.edit('J3', '=AVERAGE(C3:C8)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('5:12:56 AM');
            helper.edit('J4', '=AVERAGE(D2:D11)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('27.7');
            helper.edit('J5', '=AVERAGE(I2:I6)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('467.30684');
            helper.edit('J6', '=AVERAGE(I6:I10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('514.336418');
            helper.edit('J7', '=AVERAGE(I19:I21)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('-1491.333333');
            helper.edit('J8', '=AVERAGE(I24:I25)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('$65.78');
            helper.edit('J9', '=AVERAGE(I26:I27)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('1.4500E+01');
            helper.edit('J10', '=AVERAGE(I28:I29)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('5850%');
            helper.edit('J11', '=AVERAGE(I13:I16)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J12', '=AVERAGE(I13:I29)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('-341.4945455');
            done();
        });
        it('AVERAGE Formula with single cell references values as arguments->', (done: Function) => {
            helper.edit('J13', '=AVERAGE(I21)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('0');
            helper.edit('J14', '=AVERAGE(F3)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('600');
            helper.edit('J15', '=AVERAGE(C13)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J16', '=AVERAGE(D3,E7,I4,I20,F9)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('-159.954');
            helper.edit('J17', '=AVERAGE(A6:A8,D7,F6,G10)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('117.3333333');
            helper.edit('J18', '=AVERAGE(I21,G2,A8:A11)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('0.5');
            helper.edit('J19', '=AVERAGE(E7,I11,E10,C6,A10)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('AVERAGE Formula with different format arguments as input in General formatted cells ->', (done: Function) => {
            helper.edit('K1', '=AVERAGE(E2:E11)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('17.5');
            helper.edit('K2', '=AVERAGE(I26:I27)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1.4500E+01');
            helper.edit('K3', '=AVERAGE(I24:I25)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('$65.78');
            helper.edit('K4', '=AVERAGE(I28:I29)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('5850%');
            helper.edit('K5', '=AVERAGE(I2:I10)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('431.6549322');
            done();
        });
        it('AVERAGE Formula with different format arguments as input in Currency formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['$#,##0.00', 'K6']);
            helper.edit('K6', '=AVERAGE(E2:E11)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('$17.50');
            helper.invoke('numberFormat', ['$#,##0.00', 'K7']);
            helper.edit('K7', '=AVERAGE(I26:I27)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('$14.50');
            helper.invoke('numberFormat', ['$#,##0.00', 'K8']);
            helper.edit('K8', '=AVERAGE(I24:I25)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('$65.78');
            helper.invoke('numberFormat', ['$#,##0.00', 'K9']);
            helper.edit('K9', '=AVERAGE(I28:I29)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('$58.50');
            helper.invoke('numberFormat', ['$#,##0.00', 'K10']);
            helper.edit('K10', '=AVERAGE(I2:I10)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('$431.65');
            done();
        });
        it('AVERAGE Formula with different format arguments as input in Percentage formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0%', 'K11']);
            helper.edit('K11', '=AVERAGE(E2:E11)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('1750%');
            helper.invoke('numberFormat', ['0%', 'K12']);
            helper.edit('K12', '=AVERAGE(I26:I27)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('1.4500E+01');
            helper.invoke('numberFormat', ['0%', 'K13']);
            helper.edit('K13', '=AVERAGE(I24:I25)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('$65.78');
            helper.invoke('numberFormat', ['0%', 'K14']);
            helper.edit('K14', '=AVERAGE(I28:I29)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('5850%');
            helper.invoke('numberFormat', ['0%', 'K15']);
            helper.edit('K15', '=AVERAGE(I2:I10)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('43165%');
            done();
        });
        it('AVERAGE Formula with different format arguments as input in Scientific formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0.0000E+00', 'K16']);
            helper.edit('K16', '=AVERAGE(E2:E11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('1.7500E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K17']);
            helper.edit('K17', '=AVERAGE(I26:I27)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('1.4500E+01');
            helper.invoke('numberFormat', ['0.0000E+00', 'K18']);
            helper.edit('K18', '=AVERAGE(I24:I25)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('$65.78');
            helper.invoke('numberFormat', ['0.0000E+00', 'K19']);
            helper.edit('K19', '=AVERAGE(I28:I29)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('5850%');
            helper.invoke('numberFormat', ['0.0000E+00', 'K20']);
            helper.edit('K20', '=AVERAGE(I2:I10)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('4.3165E+02');
            done();
        });
        it('AVERAGE Formula with different format arguments as input in Number formatted cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['#,##0.00', 'K21']);
            helper.edit('K21', '=AVERAGE(E2:E11)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('17.50');
            helper.invoke('numberFormat', ['#,##0.00', 'K22']);
            helper.edit('K22', '=AVERAGE(I26:I27)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('14.50');
            helper.invoke('numberFormat', ['#,##0.00', 'K23']);
            helper.edit('K23', '=AVERAGE(I24:I25)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('65.78');
            helper.invoke('numberFormat', ['#,##0.00', 'K24']);
            helper.edit('K24', '=AVERAGE(I28:I29)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('58.50');
            helper.invoke('numberFormat', ['#,##0.00', 'K25']);
            helper.edit('K25', '=AVERAGE(I2:I10)');
            expect(helper.invoke('getCell', [24, 10]).textContent).toBe('431.65');
            done();
        });
        it('AVERAGE Formula with list of different arguments as input->', (done: Function) => {
            helper.edit('L1', '=AVERAGE(D2:D11,E7,G7,42,"2")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('25.28571429');
            helper.edit('L2', '=AVERAGE(D2:D11,E11,G2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('24');
            helper.edit('L3', '=AVERAGE(1,3,4,"a")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#VALUE!');
            helper.edit('L4', '=AVERAGE("1","323",F9:F10,"Hi123","123Hi","H123i")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#VALUE!');
            helper.edit('L5', '=AVERAGE("HI123",123,"123HI")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            helper.edit('L6', '=AVERAGE("1")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('1');
            done();
        });
        it('AVERAGE Formula with logical value as argument->', (done: Function) => {
            helper.edit('L7', '=AVERAGE(1,3,"43",TRUE)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('12');
            helper.edit('L8', '=AVERAGE(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('11');
            helper.edit('L9', '=AVERAGE(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('11');
            helper.edit('L10', '=AVERAGE(TRUE,FALSE)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('0.5');
            helper.edit('L11', '=AVERAGE("1",TRUE,FALSE,4)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('1.5');
            helper.edit('L12', '=AVERAGE("TRUE","FALSE")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            helper.edit('L13', '=AVERAGE(I15:I18)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L14', '=AVERAGE(I15,I17,I16,I18)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L15', '=AVERAGE(FALSE)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('0');
            done();
        });
        it('AVERAGE Formula with nested formula as input->', (done: Function) => {
            helper.edit('L16', '=AVERAGE(LEN(D10),LEN(D8),LEN(E10))');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('2');
            helper.edit('L17', '=AVERAGE(GEOMEAN(G2:G6),GEOMEAN(H3:H7))');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('29.10251425');
            helper.edit('L18', '=AVERAGE(COUNT(F16:F20),10)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('5');
            done();
        });
        it('AVERAGE Formula with worst case value as argument->', (done: Function) => {
            helper.edit('M1', '=AVERAGE(A2:A11)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#DIV/0!');
            helper.edit('M2', '=AVERAGE(I12,G10)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NAME?');
            helper.edit('M3', '=AVERAGE(,)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('0');
            helper.edit('M4', '=AVERAGE(1,3, ,0)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('1');
            helper.edit('M5', '=AVERAGE(0)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('0');
            helper.edit('M6', '=AVERAGE(1,2,"")');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            helper.edit('M7', '=AVERAGE(I11)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            helper.edit('M8', '=AVERAGE(I12)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#NAME?');
            helper.edit('M9', '=AVERAGE("Hello")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#VALUE!');
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('M10');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGE()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGE()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M10', '=AVERAGE(0)');
            done();
        });
        it('AVERAGE Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=AVERAGE($F$2:$F$20)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('472');
            helper.edit('N2', '=AVERAGE($I$4:$I$7,$F$4:$F$7)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('606.4051125');
            helper.edit('N3', '=AVERAGE($I$3:$I$9,$H$8)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('461.6563975');
            done();
        });
        it('AVERAGE Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N4', '=AVERAGE(Sheet2!A1:A10)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('44.5');
            helper.edit('N5', '=AVERAGE(Sheet2!A1:A10,Sheet1!F2:F11)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('282');
            helper.edit('N6', '=AVERAGE(Sheet1!D1:D10,Sheet2!A2:A11)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('35.6875');
            helper.edit('N7', '=AVERAGE(Sheet1!E2:E11,Sheet1!H2:H11)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('36.45');
            helper.edit('N8', '=AVERAGE(Sheet2!A5,Sheet2!A2)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('56.5');
            helper.edit('N9', '=AVERAGE(Sheet1!D5,Sheet1!E2)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('17.5');
            helper.edit('N10', '=AVERAGE(Sheet1!D5,Sheet2!A3)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('45.5');
            helper.edit('N11', '=AVERAGE(Sheet2!A5,Sheet1!E3)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('61.5');
            done();
        });
        it('AVERAGE Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N12', '=AVERAGE(Sheet2!$A$1:$A$6,Sheet2!$C$3:$C$10,Sheet2!$B$12,$D$6)');
            expect(helper.invoke('getCell', [11, 13]).textContent).toBe('42.28571429');
            helper.edit('N13', '=AVERAGE(Sheet2!$A$1:$A$10,Sheet1!$F$2:$F$11)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('282');
            helper.edit('N14', '=AVERAGE(Sheet1!$E$2:$E$11,Sheet1!$H$2:$H$11)');
            expect(helper.invoke('getCell', [13, 13]).textContent).toBe('36.45');
            helper.edit('N15', '=AVERAGE(Sheet1!$E$2:$E$11)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('17.5');
            helper.edit('N16', '=AVERAGE(Sheet2!$A$7)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('40');
            helper.edit('N17', '=AVERAGE(Sheet2!$A$5,Sheet1!$E$2)');
            expect(helper.invoke('getCell', [16, 13]).textContent).toBe('56.5');
            done();
        });
    });

    describe('COUNT Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: '42' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNT Formula with ranged cell references values as arguments->', (done: Function) => {
            helper.edit('J1', '=COUNT(A2:A10)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0');
            helper.edit('J2', '=COUNT(B2:B10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('9');
            helper.edit('J3', '=COUNT(C2:C9)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('8');
            helper.edit('J4', '=COUNT(D3:D10)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('8');
            helper.edit('J5', '=COUNT(I17:I18)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('2');
            helper.edit('J6', '=COUNT(I15:I16)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('2');
            helper.edit('J7', '=COUNT(I19:I20)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('2');
            helper.edit('J8', '=COUNT(I13:I14)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('2');
            helper.edit('J9', '=COUNT(I2:I5)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0');
            helper.edit('J10', '=COUNT(A13:E16)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('0');
            helper.edit('J11', '=COUNT(I2:I20)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('11');
            done();
        });
        it('COUNT Formula with single cell references values as arguments->', (done: Function) => {
            helper.edit('J12', '=COUNT(A4)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('0');
            helper.edit('J13', '=COUNT(F6)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('1');
            helper.edit('J14', '=COUNT(C19)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('0');
            helper.edit('J15', '=COUNT(G5,F14,F10,E13,E9)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('3');
            done();
        });
        it('COUNT Formula with list of different arguments as input->', (done: Function) => {
            helper.edit('J16', '=COUNT(D2:D11,E7,G7,42,"2")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('14');
            helper.edit('J17', '=COUNT(D2:D11,E7,G7)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('12');
            helper.edit('J18', '=COUNT(1,3,4,"a")');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('3');
            helper.edit('J19', '=COUNT("1","323",F9:F10,"Hi123","123Hi","H123i")');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('4');
            helper.edit('J20', '=COUNT("HI123",123,"123HI")');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('1');
            done();
        });
        it('COUNT Formula with logical value as argument->', (done: Function) => {
            helper.edit('K1', '=COUNT(1,3,"43",TRUE)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('4');
            helper.edit('K2', '=COUNT(TRUE,FALSE,"32")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('3');
            helper.edit('K3', '=COUNT("TRUE","FALSE","TRUE")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0');
            helper.edit('K4', '=COUNT(32,2/7/2023,"123","FALSE")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('3');
            helper.edit('K5', '=COUNT(I3,I5,E6)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('1');
            helper.edit('K6', '=COUNT(I2:I5,F7:F8,A6:A9)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('2');
            done();
        });
        it('COUNT Formula with worst case value as argument->', (done: Function) => {
            helper.edit('K7', '=COUNT(,)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('2');
            helper.edit('K8', '=COUNT( " ")');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('0');
            helper.edit('K9', '=COUNT(1,,2)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('3');
            helper.edit('K10', '=COUNT(A12:H14)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('0');
            helper.edit('K11', '=COUNT(I9:I12)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('0');
            helper.edit('K12', '=COUNT(0)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('1');
            helper.edit('K12', '=COUNT(1,2,3,,,,,,,)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('10');
            done();
        });
        it('COUNT Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('L1', '=COUNT($D$2:$H$11)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('50');
            helper.edit('L2', '=COUNT(32,$F$9,$A$10,$E$14)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('2');
            helper.edit('L3', '=COUNT($C$3:$C$10,$E$5)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('9');
            done();
        });
        it('COUNT Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L4', '=COUNT(Sheet2!A1:A10)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('9');
            helper.edit('L5', '=COUNT(Sheet2!A2:B5,Sheet1!G3:G10)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('12');
            helper.edit('L6', '=COUNT(Sheet1!B2:B9,Sheet2!A3:A9)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('15');
            helper.edit('L7', '=COUNT(Sheet1!A2:B10,Sheet1!H3:H9)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('16');
            helper.edit('L8', '=COUNT(Sheet2!A5)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('1');
            done();
        });
        it('COUNT Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('L9', '=COUNT(Sheet2!$A$1:$A$6,Sheet2!$C$3:$C$10,Sheet2!$B$12,$D$6)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('7');
            helper.edit('L10', '=COUNT(Sheet1!$B$3:$B$10,Sheet2!$A$2:$A$8)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('15');
            helper.edit('L11', '=COUNT(Sheet2!$A$3:$B$5,Sheet1!$G$3:$G$10)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('11');
            helper.edit('L12', '=COUNT(Sheet1!$A$2:$B$10)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('9');
            helper.edit('L13', '=COUNT(Sheet2!$A$7)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('1');
            helper.edit('L14', '=COUNT(Sheet1!$A$6)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('0');
            done();
        });
    });

    describe('Base module cases I->', () => { 
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Date formula with month > 12 and day > 31->', (done: Function) => {
            helper.edit('K7', '=DATE(2022,25,33)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('2/2/2024');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"45324","formula":"=DATE(2022,25,33)","format":"m/d/yyyy","formattedText":"2/2/2024"}');
            done();
        });
    });

    describe('Base module cases - II->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Formula with #DIV/0! as formula->', (done: Function) => {
            helper.edit('I1', '=#DIV/0!');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('#DIV/0!');
            expect(helper.getInstance().sheets[0].rows[0].cells[8].formula).toEqual('=#DIV/0!');
            expect(helper.getInstance().sheets[0].rows[0].cells[8].value).toEqual('#DIV/0!');
            done();
        });
        it('Formula with #NAME? as formula->', (done: Function) => {
            helper.edit('I2', '=#NAME?');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('#NAME?');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toEqual('=#NAME?');
            expect(helper.getInstance().sheets[0].rows[1].cells[8].value).toEqual('#NAME?');
            done();
        });
        it('Formula with - as formula->', (done: Function) => {
            helper.edit('I3', '=-');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].formula).toEqual('=-');
            expect(helper.getInstance().sheets[0].rows[2].cells[8].value).toEqual('');
            done();
        });
        it('Formula with value inside in []->', (done: Function) => {
            helper.edit('I4', '=[1+5+3]');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('9');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].formula).toEqual('=[1+5+3]');
            expect(helper.getInstance().sheets[0].rows[3].cells[8].value).toEqual('9');
            done();
        });
        it('Formula with value inside in [] for defined name reference->', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Test', refersTo: 'H2:H5'});
            helper.edit('I5', '=SUM([Test])');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('154');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].formula).toEqual('=SUM([Test])');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].value).toEqual(154);
            done();
        });
        it('Formula with #N/A as formula->', (done: Function) => {
            helper.edit('I6', '=#N/A');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].formula).toEqual('=#N/A');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].value).toEqual('invalid expression');
            done();
        });
        it('Formula with []  and {} ->', (done: Function) => {
            helper.edit('I7', '=SUM([{1+5}])');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('6');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].formula).toEqual('=SUM([{1+5}])');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].value).toEqual(6);
            done();
        });
    });

    describe('EJ2-819414 - Testing defined names in data binding cases->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                definedNames: [{ name: 'Profit', refersTo: '=F2:F11' }],
                sheets: [{ ranges: [{ dataSource: defaultData }] }]
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Verify that the scope defaults to Workbook when not explicitly set->', (done: Function) => {
            expect(helper.getInstance().definedNames.length).toBe(1);
            expect(helper.getInstance().definedNames[0].name).toBe('Profit');
            expect(helper.getInstance().definedNames[0].refersTo).toBe('=Sheet1!F2:F11');
            expect(helper.getInstance().definedNames[0].scope).toBe('Workbook');
            done();
        });
    });

    describe('COUNTIFS Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNTIFS Formula with operators as criteria ->', (done: Function) => {
            helper.edit('J1', '=COUNTIFS(D2:D11,"<25",E2:E11,"<30")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('4');
            helper.edit('J2', '=COUNTIFS(D2:D11,">35",E2:E11,">25")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('1');
            helper.edit('J3', '=COUNTIFS(D2:D11,"<="&G6,H2:H11,"<="&G6)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('1');
            helper.edit('J4', '=COUNTIFS(D2:D11,">="&E2,F2:F11,">="&H10)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('8');
            helper.edit('J5', '=COUNTIFS(F2:F11,"<>300")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('7');
            helper.edit('J6', '=COUNTIFS(E2:E10,D4,G2:G10,13)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('1');
            helper.edit('J7', '=COUNTIFS(E2:E11,"<20",F2:F11,">200")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('4');
            helper.edit('J8', '=COUNTIFS(E2:E11,">"&H9,F2:F11,">100")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('2');
            helper.edit('J9', '=COUNTIFS(D2:D11,">20",H2:H11,"<>"&G6)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('5');
            helper.edit('J10', '=COUNTIFS(H2:H11,"=10",D2:D11,"=10")');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('1');
            done();
        });
        it('COUNTIFS Formula with wildcard * as criteria* ->', (done: Function) => {
            helper.edit('J11', '=COUNTIFS(D2:D11,"2*")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0');
            helper.edit('J12', '=COUNTIFS(D2:D11,"0*")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('0');
            helper.edit('J13', '=COUNTIFS(A2:A11,"C*")');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('2');
            helper.edit('J14', '=COUNTIFS(A2:A11,"*es")');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('5');
            helper.edit('J15', '=COUNTIFS(A2:A11,"s*ers")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('2');
            done();
        });
        it('COUNTIFS Formula with wildcard ? as criteria ->', (done: Function) => {
            helper.edit('J16', '=COUNTIFS(D2:D11,"?0")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('0');
            helper.edit('J17', '=COUNTIFS(D2:D11,"1?")');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('0');
            helper.edit('J18', '=COUNTIFS(A2:A11,"???????Shoes")');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('3');
            helper.edit('J19', '=COUNTIFS(A2:A11,"???????")');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('1');
            helper.edit('J20', '=COUNTIFS(A2:A11,"<>????????")');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('8');
            done();
        });
        it('COUNTIFS Formula with different kind of value as criteria ->', (done: Function) => {
            helper.edit('K1', '=COUNTIFS(D2:D10,10,E2:E10,20)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('1');
            helper.edit('K2', '=COUNTIFS(D2:D10,"20",G2:G10,">"2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('3');
            helper.edit('K3', '=COUNTIFS(E2:E11,G6,D2:D11,D6)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('1');
            helper.edit('K4', '=COUNTIFS(H2:H11,"<>"&G6,D2:D11,"<>"&E6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('9');
            helper.edit('K5', '=COUNTIFS(A2:A11,"*"&A6,D2:D11,30)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('1');
            helper.edit('K6', '=COUNTIFS(A2:A11,A6&"*",D2:D11,30)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('1');
            helper.edit('K7', '=COUNTIFS(A2:A11,"Casual Shoes",D2:D11,10)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('1');
            done();
        });
        it('COUNTIFS Formula with experssion as criteria ->', (done: Function) => {
            helper.edit('K8', '=COUNTIFS(H2:H11,">"&G6+13,F2:F11,">"&D7+100)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('8');
            helper.edit('K9', '=COUNTIFS(F2:F11,">"&H10-66)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('10');
            done();
        });
        it('COUNTIFS Formula with worst case value as argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('K10');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=COUNTIFS(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=COUNTIFS(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K10', '=COUNTIFS(D2:D11,"<25",E2:E11,"<30")');
            helper.edit('K11', '=COUNTIFS(,"*e")');
            const dialog2: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('K11', '=COUNTIFS(D2:D11,"<25",E2:E11,"<30")');
            helper.edit('K12', '=COUNTIFS(E2:E9,)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('0');
            helper.edit('K13', '=COUNTIFS(A2:A11,,H4:H9,)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('#VALUE!');
            helper.edit('K14', '=COUNTIFS(A3:A14,"",D4:D14,"=20")');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#VALUE!');
            helper.edit('K15', '=COUNTIFS(F3:F11,"300",H3:H13,">50")');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#VALUE!');
            helper.edit('K16', '=COUNTIFS(F3:F11,"300",H3:H13,">50")');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#VALUE!');
            helper.edit('K19', '=COUNTIFS(Q4:Q12,)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('0');
            helper.edit('K20', '=COUNTIFS(Q4:Q12,"")');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('9');
            done();
        });
        it('COUNTIFS Formula with text,empty,number value as range and * or <>* as criteria->', (done: Function) => {
            helper.edit('L1', '=COUNTIFS(A2:A10,"*")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('9');
            helper.edit('L2', '=COUNTIFS(E2:E11,"*",F2:F11,"*")');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('0');
            helper.edit('L3', '=COUNTIFS(P2:P10,"*")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('0');
            helper.edit('L4', '=COUNTIFS(A2:A10,"<>*")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('0');
            helper.edit('L5', '=COUNTIFS(D2:D9,"<>*",G2:G9,"<>*")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('8');
            helper.edit('L6', '=COUNTIFS(P2:P10,"<>*")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('9');
            helper.edit('L7', '=COUNTIFS(Q1:Q7,)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('0');
            helper.edit('L8', '=COUNTIFS(P1:P7,"",Q1:Q7,"")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('7');
            done();
        });
        it('COUNTIFS Formula with different formatted value as arguments->', (done: Function) => {
            helper.edit('L9', '=COUNTIFS(I6:I8,"<0",E5:E7,">15")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('1');
            helper.edit('L10', '=COUNTIFS(I15:I16,I16)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('1');
            helper.edit('L11', '=COUNTIFS(I17:I18,">=12",I19:I20,">0")');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('2');
            helper.edit('L12', '=COUNTIFS(I19:I20,115,I13:I14,32)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('1');
            helper.edit('L13', '=COUNTIFS(I2:I20,">"&E2)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('9');
            helper.edit('L14', '=COUNTIFS(I9:I10,"#VALUE!")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('1');
            done();
        });
        it('COUNTIFS Formula with Logical value as arguments->', (done: Function) => {
            helper.edit('L15', '=COUNTIFS(I2:I5,"TRUE")');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('2');
            helper.edit('L16', '=COUNTIFS(I2:I5,"FALSE",F2:F5,300)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('2');
            helper.edit('L17', '=COUNTIFS(I2:I5,TRUE,D2:D5,">8")');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('2');
            helper.edit('L18', '=COUNTIFS(I2:I5,FALSE)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('2');
            helper.edit('L19', '=COUNTIFS(I2:I3,I2,G2:G3,">0",E2:E3,"<35")');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('2');
            helper.edit('L20', '=COUNTIFS(I2:I3,I3)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('2');
            done();
        });
        it('COUNTIFS Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=COUNTIFS($D$2:$D$10,10,$E$2:$E$10,20)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('1');
            helper.edit('M2', '=COUNTIFS($D$2:$D$11,">="&$E$2,$F$2:$F$11,">="&$H$10)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('8');
            helper.edit('M3', '=COUNTIFS($H$2:$H$11,">"&$E$2)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('8');
            done();
        });
        it('COUNTIFS Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M4', '=COUNTIFS(Sheet1!A2:A10,"S*",Sheet1!D2:D10,">10")');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('3');
            helper.edit('M5', '=COUNTIFS(Sheet2!A2:A5,">2",Sheet2!A6:A9,">10")');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('4');
            helper.edit('M6', '=COUNTIFS(Sheet2!A1:A8,"<10")');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('3');
            helper.edit('M7', '=COUNTIFS(G2:G11,">="&Sheet2!A5)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('9');
            helper.edit('M8', '=COUNTIFS(Sheet1!G2:G11,Sheet2!A5)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('1');
            helper.edit('M9', '=COUNTIFS(Sheet1!D2:D5,">10",Sheet2!A6:A9,">10")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('3');
            helper.edit('M10', '=COUNTIFS(Sheet1!D2:D11,">"&Sheet1!E2,Sheet1!F2:F11,">"&Sheet1!G10)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('5');
            done();
        });
        it('COUNTIFS Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M11', '=COUNTIFS(Sheet2!$A$1:$A$8,Sheet2!$A$1)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('1');
            helper.edit('M12', '=COUNTIFS(Sheet2!$A$1:$A$8,"<10")');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('3');
            helper.edit('M13', '=COUNTIFS(G2:G11,">="&Sheet2!$A$5)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('9');
            helper.edit('M14', '=COUNTIFS(Sheet1!$G$2:$G$11,Sheet2!A3)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('1');
            helper.edit('M15', '=COUNTIFS(Sheet2!$A$1:$A$8,">="&Sheet1!$G$6)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('5');
            helper.edit('M16', '=COUNTIFS(Sheet1!$E$2:$E$11,">"&Sheet1!$E$5)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('2');
            helper.edit('M17', '=COUNTIFS(Sheet1!$G$2:$G$11,Sheet2!$A$5)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('1');
            helper.edit('M18', '=COUNTIFS(Sheet1!$D$2:$D$5,">10",Sheet2!$A$6:$A$9,">10")');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('3');
            helper.edit('M19', '=COUNTIFS(Sheet1!$D$2:$D$11,">"&Sheet1!E2,Sheet1!$F$2:$F$11,">"&Sheet1!G10)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('5');
            helper.edit('M20', '=COUNTIFS(Sheet1!$D$2:$D$11,">"&Sheet1!$E$3,Sheet1!$F$2:$F$11,">"&Sheet1!$G$9)');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('4');
            done();
        });
        it('COUNTIFS Formula with Nested formula as arguments ->', (done: Function) => {
            helper.edit('N1', '=COUNTIFS(A2:A11,"C*",D2:D11,SUM(7,3))');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('1');
            helper.edit('N2', '=COUNTIFS(E2:E11,COUNT(E2:E11),F2:F11,SUM(150,150))');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('1');
            helper.edit('N3', '=COUNTIFS(D2:D11,AVERAGE(E2:E9))');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('0');
            helper.edit('N4', '=COUNTIFS(D2:D11,LEN(H2)+8)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('1');
            helper.edit('N5', '=COUNTIFS(E2:E8,10,F2:F8,MEDIAN(F4:F7))');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('1');
            done();
        });
        it('COUNTIFS formula with cell references like string argument as input->', (done: Function) => {
            helper.edit('N6', '=COUNTIFS(Sheet1!G5:G6,G5,Sheet2!A8:A9,"q1")');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('1');
            helper.edit('N7', '=COUNTIFS(Sheet1!G5:G6,G6,Sheet2!A8:A9,"Q2")');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('1');
            done();
        });
        it('COUNTIFS formula with Nested DATE Formula as input->', (done: Function) => {
            helper.edit('N8', '=COUNTIFS(H2:H7,">5",B2:B7,">"&DATE(2014,4,3))');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('5');
            done();
        });
        it('COUNTIFS formula with improper range as input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N9');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=COUNTIFS(H2:H11,D2,D2:D11)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=COUNTIFS(H2:H11,D2,D2:D11)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N9', '=COUNTIFS(H2:H11,D2,D2:D11,E8)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('1');
            done();
        });
    });

    describe('COUNTBLANK Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNTBLANK Formula with range as argument ->', (done: Function) => {
            helper.edit('J1', '=COUNTBLANK(A2:A12)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('1');
            helper.edit('J2', '=COUNTBLANK(D2:D13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('2');
            helper.edit('J3', '=COUNTBLANK(M2:M10)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('9');
            done();
        });
        it('COUNTBLANK Formula with single range as argument ->', (done: Function) => {
            helper.edit('J4', '=COUNTBLANK(B8)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            helper.edit('J5', '=COUNTBLANK(A8)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            helper.edit('J6', '=COUNTBLANK(P8)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('1');
            done();
        });
        it('COUNTBLANK Formula with worst case value as argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=COUNTBLANK()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=COUNTBLANK()';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J7', '=COUNTBLANK(B2:B10)');
            helper.edit('J8', '=COUNTBLANK("")');
            const dialog2: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J8', '=COUNTBLANK(B2:B10)');
            helper.edit('J9', '=COUNTBLANK(,)');
            const dialog3: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog3.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J9', '=COUNTBLANK(B2:B10)');
            helper.edit('J10', '=COUNTBLANK(H4,F7)');
            const dialog4: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog4.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J10', '=COUNTBLANK(B2:B10))');
            helper.edit('J11', '=COUNTBLANK(H3:H10,F3:F9)');
            const dialog5: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog5.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J11', '=COUNTBLANK(B2:B10)');
            done();
        });
        it('COUNTBLANK Formula with different range value of argument->', (done: Function) => {
            helper.edit('J12', '=COUNTBLANK(A2:A12)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('1');
            helper.edit('J13', '=COUNTBLANK(B3:B13)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('2');
            helper.edit('J14', '=COUNTBLANK(C3:C11)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('0');
            helper.edit('J15', '=COUNTBLANK(I2:I5)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('0');
            helper.edit('J16', '=COUNTBLANK(I15:I16)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('0');
            helper.edit('J17', '=COUNTBLANK(I17:I18)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('0');
            helper.edit('J18', '=COUNTBLANK(I19:I20)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('0');
            helper.edit('J19', '=COUNTBLANK(I2:I20)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('0');
            helper.edit('J20', '=COUNTBLANK(A2:I15)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('32');
            done();
        });
        it('COUNTBLANK Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('K1', '=COUNTBLANK($A$5:$A$14)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('3');
            helper.edit('K2', '=COUNTBLANK($D$6:$G$14)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('12');
            helper.edit('K3', '=COUNTBLANK($M$7)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('1');
            done();
        });
        it('COUNTBLANK Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('K4', '=COUNTBLANK(Sheet2!A1:A11)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('2');
            helper.edit('K5', '=COUNTBLANK(Sheet2!A10)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('1');
            helper.edit('K6', '=COUNTBLANK(Sheet1!A2:A10)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('0');
            helper.edit('K7', '=COUNTBLANK(Sheet1!A2)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0');
            done();
        });
        it('COUNTBLANK Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('K8', '=COUNTBLANK(Sheet1!$C$2:$C$12)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('1');
            helper.edit('K9', '=COUNTBLANK(Sheet1!$D$2)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('0');
            helper.edit('K10', '=COUNTBLANK(Sheet2!$A$2:$A$12)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('3');
            helper.edit('K11', '=COUNTBLANK(Sheet2!$A$6)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('0');
            done();
        });
    });

    describe('UI - Interaction', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Update defined names method with changed as true->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.updateDefinedNames({name: 'test'}, 'Price Deatils', [1,5], true, [5,1], {index: 0});
            setTimeout(() => {
                expect(helper.getInstance().definedNames.length).toBe(0);
                done();
            });
        });
        it('Update defined names method with changed as false->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.updateDefinedNames({name: 'test'}, 'Price Deatils', [15], false, [5], {index: 0});
            setTimeout(() => {
                expect(helper.getInstance().definedNames.length).toBe(0);
                done();
            });
        });
        it('Refresh named range method testing->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.refreshNamedRange({ sheet: { name: 'Sheet!' }, modelType: "Row", isInsert: true, definedNames: { name: 'Test' } });
            setTimeout(() => {
                expect(helper.getInstance().definedNames.length).toBe(0);
                done();
            });
        });
        it('Update data container method testing for active selected cell->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.updateDataContainer([0,0], { value: 20, sheetId: 1, visible: true });
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[0].value.innerText).toBeUndefined();
                done();
            });
        });
        it('Update data container method testing for cell with no data in a row->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.updateDataContainer([0,10], { value: 20, sheetId: 1, visible: true });
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[10].value).toBeUndefined();
                done();
            });
        });
        it('Update data container method testing for cell with no data in a column->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.updateDataContainer([12,0], { value: 20, sheetId: 1, visible: true });
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[10].value).toBeUndefined();
                done();
            });
        });
        it('Add defined name method testing->', (done: Function) => {
            helper.getInstance().workbookFormulaModule.addDefinedName({name: 'Test', refersTo: 'E2:E5', scope: 'Workbook'}, true, 1, true)
            setTimeout(() => {
                let definedNames: DefineNameModel[] = helper.getInstance().definedNames;
                expect(definedNames.length).toBe(1);
                expect(definedNames[0].name).toBe('Test');
                done();
            });
        });
        it('Clearalluniqueformulavalue method testing->', (done: Function) => {
            helper.invoke('selectRange', ['I1']);
            helper.invoke('updateCell', [{ value: '10' }, 'I4']);
            helper.invoke('updateCell', [{ formula: '=UNIQUE(H2:H5)' }, 'I1']);
            helper.getInstance().workbookFormulaModule.clearAllUniqueFormulaValue();
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[8].formula).toBe('=UNIQUE(H2:H5)');
                expect(helper.getInstance().sheets[0].rows[0].cells[8].value).toBe('#SPILL!');
                done();
            });
        });
    });

    describe('UI - Interaction for delete the formula value referenced row', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }], rows: [{ cells: [{ index: 9, formula: '=H10&H11'  } ,  { format: '##0.0E+0', value: '10'   }] },
        { cells: [{ index: 9, formula: '=H9^H10' }] }, { cells: [{ index: 9, formula: '=H8<H9' }] }  ] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Apply delete with operator "&" and delete the formula value referenced row->', (done: Function) => {
            expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toBe('=H10&H11');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].value).toBe('16655');
            helper.invoke('selectRange', ['A11']);
            helper.invoke('delete', [10, 10, 'Row']);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toBe('=H10&#REF!');
                expect(helper.getInstance().sheets[0].rows[0].cells[9].value).toBe('#REF!');
                done();
            });
        });
        it('Apply delete with operator "^" and delete the formula value referenced row->', (done: Function) => {
            helper.invoke('selectRange', ['A10']);
            expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toBe('=H9^H10');
            expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toBe('5.728852639234935e+242');
            helper.invoke('delete', [9, 9, 'Row']);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toBe('=H9^#REF!');
                expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toBe('#REF!');
                done();
            });
        });
        it('Apply delete with operator "<" and delete the formula value referenced row->', (done: Function) => {
            helper.invoke('selectRange', ['A9']);
            expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toBe('=H8<H9');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('TRUE');
            helper.invoke('delete', [8, 8, 'Row']);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toBe('=H8<#REF!');
                expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('#REF!');
                done();
            });
        });
        // it('Checking scientific custom number format value', (done: Function) => {  // scientific custom format issue. needs to fix.
        //     helper.invoke('selectRange', ['K1']);
        //     expect(helper.invoke('getCell', [0, 10]).textContent).toBe('10.0E+0');
        //     expect(helper.getInstance().sheets[0].rows[0].cells[10].format).toBe('##0.0E+0');
        //     done();
        // });
        // it('Apply scientific number format ', (done: Function) => {
        //     helper.getElement('#'+helper.id+'_number_format').click();
        //     helper.getElement('#'+helper.id+'_Scientific').click();
        //     expect(helper.invoke('getCell', [0, 10]).textContent).toBe('1.00E+01');
        //     expect(helper.getInstance().sheets[0].rows[0].cells[10].format).toBe('0.00E+00');
        //     done();
        // });
    });

    describe('IF Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Decimals' }] }, { cells: [{ index: 8, value: '102.32' }] },
                        { cells: [{ index: 8, value: '105.43' }] }, { cells: [{ index: 8, value: '103.23' }] },
                        { cells: [{ index: 8, value: '1002.2323' }] }, { cells: [{ index: 8, value: '1023.3219' }] },
                        { cells: [{ index: 8, value: '1022.4567' }] }, { cells: [{ index: 8, value: '320.12354' }] },
                        { cells: [{ index: 8, value: '102.45674' }] }, { cells: [{ index: 8, value: '103.32321' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: '-3221' }] }, { cells: [{ index: 8, value: '-1253' }] },
                        { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '119', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '321', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12.56', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '2', format: '0%' }] },
                        { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '12' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '76' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '93' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'ABC' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('IF formula with second and third arguments as empty->', (done: Function) => {
            helper.edit('J1', '=IF(E1>10,,"F")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0');
            helper.edit('J2', '=IF(E1<10,"T",)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            helper.edit('J3', '=IF(E1>10, ,)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=IF(,,)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            helper.edit('J5', '=IF(H2>5,,)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            done();
        });
        it('IF formula with nested T formula has input having numerical values->', (done: Function) => {
            helper.edit('J6', '=IF(T(F2)=F2,F2,"FALSE")');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('FALSE');
            helper.edit('J7', '=IF(T(F2)<>F2,F2,"FALSE")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('200');
            done();
        });
        it('IF formula with nested T formula has input having alphabet values->', (done: Function) => {
            helper.edit('J8', '=IF(T(A2)=A2,A2,"F")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('Casual Shoes');
            helper.edit('J9', '=IF(T(A2)<>A2,A2,"F")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('F');
            done();
        });
        it('IF formula with nested EXACT formula has input having boolean conditions->', (done: Function) => {
            helper.edit('J10', '=IF(EXACT(E2,D3)=TRUE,1,0)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('1');
            helper.edit('J11', '=IF(EXACT(E2,D5)=FALSE,1,0)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#VALUE!');
            helper.edit('J12', '=IF(EXACT()=FALSE,1,0)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#VALUE!');
            helper.edit('J13', '=IF(EXACT(E2,D5)<>FALSE,0,1)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('IF formula with nested PROPER formula has input having alphabet values->', (done: Function) => {
            helper.edit('J14', '=IF(A11=PROPER(A11),"T","F")');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('T');
            helper.edit('J15', '=IF(A11<>PROPER(A11),"T","F")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('F');
            helper.edit('J16', '=IF(PROPER(A9)<>PROPER(A8),"YES","NO")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('YES');
            done();
        });
        it('IF formula with logical test values as string ->', (done: Function) => {
            helper.edit('K1', '=IF(A9="Loafers",10,20)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('10');
            helper.edit('K2', '=IF(A9="LoaFerS",10,20)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('10');
            helper.edit('K3', '=IF(A9="LoaFerS","HELLO","BYE")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('HELLO');
            helper.edit('K4', '=IF(A9<>"Loafers","HELLO","BYE")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('BYE');
            helper.edit('K5', '=IF(A9<>"Loafers",TRUE,FALSE)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('FALSE');
            helper.edit('K6', '=IF(A9<>"Loafers",10,20)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('20');
            done();
        });
        it('IF formula with logical test values as numbers with operator ->', (done: Function) => {
            helper.edit('K7', '=IF(H8=14,10,20)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('10');
            helper.edit('K8', '=IF(H7=66,"YeS","NaH")');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('YeS');
            helper.edit('K9', '=IF(H6=10,TRUE,FALSE)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('FALSE');
            helper.edit('K10', '=IF(H8<>14,10,20)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('20');
            helper.edit('K11', '=IF(H7<>66,"YeS","NaH")');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('NaH');
            helper.edit('K12', '=IF(H6<>10,TRUE,FALSE)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('TRUE');
            done();
        });
        it('IF formula with logical test values as numbers with operators ->', (done: Function) => {
            helper.edit('K13', '=IF(H7>46,"YeS","NaH")');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('YeS');
            helper.edit('K14', '=IF(H6>10,TRUE,FALSE)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('TRUE');
            helper.edit('K15', '=IF(H8<18,10,20)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('10');
            helper.edit('K16', '=IF(H7<76,"YeS","NaH")');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('YeS');
            helper.edit('K17', '=IF(H8>=14,10,20)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('10');
            helper.edit('K18', '=IF(H6>=80,TRUE,FALSE)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('FALSE');
            helper.edit('K19', '=IF(H7<=66,"YeS","NaH")');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('YeS');
            helper.edit('K20', '=IF(H6<=10,TRUE,FALSE)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('FALSE');
            done();
        });
        it('IF formula with logical test values with Logical arguments as input ->', (done: Function) => {
            helper.edit('L1', '=IF(I16=TRUE,TRUE,FALSE)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('TRUE');
            helper.edit('L2', '=IF(I16<>TRUE,TRUE,FALSE)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('FALSE');
            helper.edit('L3', '=IF(I16=I15,G11,E11)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('9');
            helper.edit('L4', '=IF(I16<>I15,G11,E11)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('10');
            done();
        });
        it('IF formula with logical test values as expression ->', (done: Function) => {
            helper.edit('L5', '=IF(D2*G2+D3=D6,"PASS","FAIL")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('PASS');
            helper.edit('L6', '=IF(D2*G2+D3<D6,"PASS","FAIL")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('FAIL');
            helper.edit('L7', '=IF(E6+E8/G2*G8=60,H2,E2+E4)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('35');
            helper.edit('L8', '=IF(E6+E8/G2*G8<>60,H2+20,E2+E4)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('30');
            done();
        });
        it('IF formula with logical test values as AND and OR as nested formula ->', (done: Function) => {
            helper.edit('L9', '=IF(AND(H4>20,H4<55),"Y","N")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('Y');
            helper.edit('L10', '=IF(AND(H4<20,H4>55),"Y","N")');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('N');
            helper.edit('L11', '=IF(OR(E4=15,E3=30),"Y","N")');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('Y');
            helper.edit('L12', '=IF(OR(E4<>15,E3<>30),"Y","N")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('N');
            done();
        });
        it('IF formula with result conditions as empty arguments ->', (done: Function) => {
            helper.edit('L13', '=IF(H2>5,,)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0');
            helper.edit('L14', '=IF(H2>20,10)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('FALSE');
            helper.edit('L15', '=IF(,,TRUE)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('TRUE');
            helper.edit('L16', '=IF(H2=12,"e",)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('0');
            helper.edit('L17', '=IF(1=1,R20,Q20)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('0');
            done();
        });
        it('IF formula with Worst cases as arguments ->', (done: Function) => {
            helper.edit('L18', '=IF(A2="Casual Shoes",Hi,Bye)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('#NAME?');
            helper.edit('L19', '=IF(,1,)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('0');
            helper.edit('L20', '=IF(B4="","Y")');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('FALSE');
            helper.edit('L21', '=IF(J4="",,)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('0');
            done();
        });
        it('IF Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=IF($H$2>5,H3,H4)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('50');
            helper.edit('M2', '=IF($H$2<$H$6,H3,H4)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('50');
            helper.edit('M3', '=IF(D2>D3,$G$4,G7)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('13');
            helper.edit('M4', '=IF($D$2>$D$3,G4,$G$7)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('13');
            helper.edit('M5', '=IF($D$4=$E$2,$I$4,$H$6)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('103.23');
            done();
        });
        it('IF Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M6', '=IF(Sheet1!D3>Sheet1!D6,Sheet2!A4,Sheet2!A6)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('35');
            helper.edit('M7', '=IF(Sheet1!D3<Sheet1!D6,Sheet2!A4,Sheet2!A6)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('30');
            helper.edit('M8', '=IF(Sheet2!A7<>Sheet2!A6,Sheet2!A2,Sheet2!A10)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('20');
            helper.edit('M9', '=IF(Sheet2!A7<=Sheet2!A6,Sheet2!A2,Sheet2!A1)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('12');
            helper.edit('M10', '=IF(Sheet1!D6>Sheet1!D8,Sheet1!G5,Sheet1!G10)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('11');
            done();
        });
        it('IF Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M11', '=IF(Sheet1!$D$2>Sheet1!$D$5,Sheet2!A4,Sheet2!A6)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('35');
            helper.edit('M12', '=IF(Sheet1!D2>Sheet1!D5,Sheet2!$A$4,Sheet2!$A$3)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('76');
            helper.edit('M13', '=IF(Sheet2!$A$2>Sheet2!$A$5,Sheet1!$E$4,Sheet1!$E$3)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('30');
            helper.edit('M14', '=IF(Sheet2!$A$2>Sheet2!$A$5,Sheet2!$A$4,Sheet2!$A$7)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('40');
            helper.edit('M15', '=IF(Sheet1!$D$2=Sheet1!$G$6,Sheet1!$F$4,Sheet1!$F$7)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('300');
            helper.edit('M16', '=IF(Sheet1!$D$2<>Sheet1!$G$6,Sheet1!$F$4,Sheet1!$F$7)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('800');
            done();
        });
        it('IF formula with Condition enclosed with double quotes->', (done: Function) => {
            helper.edit('M17', '=IF(I15="TRUE",10,20)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('20');
            helper.edit('M18', '=IF(I17="FALSE",10,20)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('20');
            helper.edit('M19', '=IF(G10="12",10,20)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('20');
            helper.edit('M20', '=IF(20="20",10,11)');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('11');
            helper.edit('M21', '=IF(A9="Loafers",0,2)');
            expect(helper.invoke('getCell', [20, 12]).textContent).toBe('0');
            helper.edit('M22', '=IF(A9="LoAfers",0,2)');
            expect(helper.invoke('getCell', [21, 12]).textContent).toBe('0');
            helper.edit('M23', '=IF(C20="",10,20)');
            expect(helper.invoke('getCell', [22, 12]).textContent).toBe('10');
            helper.edit('M24', '=IF(A9="",0,2)');
            expect(helper.invoke('getCell', [23, 12]).textContent).toBe('2');
            done();
        });
        it('IF formula with invalid arguments error dialog cases ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=IF()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=IF()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=IF(D2=H2,1,2)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('1');
            done();
        });
    });

    describe('CR-Issues ->', () => {
        describe('I311951, I309076, FB24295, FB23944 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ rows: [{ cells: [{ value: '25' }] }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Formula with percentage not working and formula parsing issue', (done: Function) => {
                helper.edit('A2', '=A1*5%');
                const inst: Spreadsheet = helper.getInstance();
                expect(inst.sheets[0].rows[1].cells[0].formula).toEqual('=A1*5%');
                expect(inst.sheets[0].rows[1].cells[0].value).toEqual('1.25');
                expect(inst.getCell(1, 0).textContent).toEqual('1.25');
                helper.invoke('selectRange', ['A2']);
                setTimeout(() => {
                    expect(helper.getElement('#' + helper.id + '_formula_input').value).toEqual('=A1*5%');
                    helper.invoke('selectRange', ['A3']);
                    setTimeout(() => {
                        helper.edit('A3', '=425/25*-1');
                        expect(inst.sheets[0].rows[2].cells[0].formula).toEqual('=425/25*-1');
                        expect(inst.sheets[0].rows[2].cells[0].value).toEqual('-17');
                        expect(inst.getCell(2, 0).textContent).toEqual('-17');
                        setTimeout((): void => {
                            expect(helper.getElement('#' + helper.id + '_formula_input').value).toEqual('=425/25*-1');
                            done();
                        });
                    });
                });
            });

            it('Count value is not calculated properly in aggregate when selected range contains zero value', (done: Function) => {
                helper.edit('B1', '0');
                helper.invoke('selectRange', ['A1:B1']);
                helper.click('#' + helper.id + '_aggregate');
                expect(helper.getElement('#' + helper.id + '_aggregate-popup ul li').textContent).toBe('Count: 2');
                done();
            });

            it('Formula popup not displayed on cell in the bottom of the sheet', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                spreadsheet.selectRange('C21');
                spreadsheet.startEdit();
                const editElem: HTMLElement = helper.getCellEditorElement();
                editElem.textContent = '=s';
                helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                setTimeout(()=>{
                    const popup: Element = helper.getElement('#' + helper.id + '_ac_popup');
                    // expect(Math.abs(popup.getBoundingClientRect().bottom - editElem.getBoundingClientRect().top)).toBeLessThan(3);
                    setTimeout(()=>{
                        done();
                    }, 100);
                });
            });
            it('IFERROR formula does not return the expected result that contains comma in the value.', (done: Function) => {
                helper.edit('A1', 'Hello, World');
                helper.edit('D1', '=IFERROR(INDEX(Sheet1!A1:A100,MATCH(Sheet1!A1,Sheet1!A1:A100,0))," ")');
                expect(helper.getInstance().sheets[0].rows[0].cells[3].value).toBe('Hello, World');
                helper.edit('A2', 'Hello World');
                helper.edit('D2', '=IFERROR(INDEX(Sheet1!A1:A100,MATCH(Sheet1!A2,Sheet1!A1:A100,0))," ")');
                expect(helper.getInstance().sheets[0].rows[1].cells[3].value).toBe('Hello World');
                helper.edit('A3', 'Hello, World 1');
                helper.edit('D3', '=IFERROR(INDEX(Sheet1!A1:A100,MATCH(Sheet1!A3,Sheet1!A1:A100,0))," ")');
                expect(helper.getInstance().sheets[0].rows[2].cells[3].value).toBe('Hello, World 1');
                helper.edit('A4', 'Hello, World, Good, Bye');
                helper.edit('D4', '=IFERROR(INDEX(Sheet1!A1:A100,MATCH(Sheet1!A4,Sheet1!A1:A100,0))," ")');
                expect(helper.getInstance().sheets[0].rows[3].cells[3].value).toBe('Hello, World, Good, Bye');
                helper.edit('A5', '');
                helper.edit('D5', '=IFERROR(INDEX(Sheet1!A1:A100,MATCH(Sheet1!A5,Sheet1!A1:A100,0)),"cannot be found")');
                expect(helper.getInstance().sheets[0].rows[4].cells[3].value).toBe('cannot be found');
                helper.edit('A6', 'Casual,Shoes');
                helper.edit('D6', '=IF(2<5,INDEX(A1:A10,6),"sorry,bye")');
                expect(helper.getInstance().sheets[0].rows[5].cells[3].value).toBe('Casual,Shoes');
                helper.edit('D7', '=IF(2>5,INDEX(A1:A10,6),"sorry,bye")');
                expect(helper.getInstance().sheets[0].rows[6].cells[3].value).toBe('sorry,bye');
                helper.edit('D8', '=CONCATENATE(INDEX(A1:A10,1),"Bye")');
                expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toBe('Hello, WorldBye');
                helper.edit('D9', '=LEN(INDEX(A1:A10,1))');
                expect(helper.getInstance().sheets[0].rows[8].cells[3].value).toBe(12);
                helper.edit('D10', '=EXACT(INDEX(A1:A10,1),"Hello, World")');
                expect(helper.getInstance().sheets[0].rows[9].cells[3].value).toBeTruthy();
                done();
            });
        });
        describe('I261427 ->', () => {
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ rows: [{ cells: [{ value: '1' }] }] }, { rows: [{ cells: [{ value: '2' }] }] }, { rows: [{ cells: [{ formula:
                        '=Sheet1!A1+Sheet2!A1' }] }] }], activeSheetIndex: 2 }, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            it('Cross tab formula issue', (done: Function) => {
                const target: HTMLElement = helper.getElement().querySelectorAll('.e-sheet-tab .e-toolbar-item')[1];
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[2].rows[0].cells[0].formula).toEqual('=Sheet1!A1+Sheet2!A1');
                expect(spreadsheet.sheets[2].rows[0].cells[0].value).toEqual('3');
                helper.triggerMouseAction('contextmenu', { x: target.getBoundingClientRect().left + 20, y:
                    target.getBoundingClientRect().top + 10 }, null, target);
                setTimeout(() => {
                    helper.getElement('#' + helper.id + '_cmenu_delete_sheet').click();
                    setTimeout(() => {
                        helper.getElement('.e-footer-content .e-btn.e-primary').click();
                        setTimeout(() => {
                            expect(spreadsheet.sheets[1].rows[0].cells[0].formula).toEqual('=SHEET1!A1+#REF!A1');
                            expect(spreadsheet.sheets[1].rows[0].cells[0].value).toEqual('#REF!');
                            done();
                        }, 10);
                    });
                });
            });
        });
        describe('I288646, I296410, I305593, I314883, EJ2-63933 ->', () => {
            const model: SpreadsheetModel = { sheets: [{ rows: [{ cells: [{  value: '10' }, { value: '20' }, { index: 8, formula: '=H1' }] }, { cells: [{ formula: '=ROUNDUP(10.6)' },
            { index: 4, formula: '=INT(10.2)' }, { formula: '=SUMPRODUCT(A1:B1)' }, { index: 8, formula: '=H2' }] }] }] };
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(model, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Include the unsupported formula (ROUNDUP, INT, SUMPRODUCT)', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[1].cells[0].formula).toBe('=ROUNDUP(10.6)');
                expect(spreadsheet.sheets[0].rows[1].cells[0].value.toString()).toBe('11');
                expect(helper.invoke('getCell', [1, 0]).textContent).toBe('11');
                expect(spreadsheet.sheets[0].rows[1].cells[4].formula).toBe('=INT(10.2)');
                expect(spreadsheet.sheets[0].rows[1].cells[4].value.toString()).toBe('10');
                expect(helper.invoke('getCell', [1, 4]).textContent).toBe('10');
                expect(spreadsheet.sheets[0].rows[1].cells[5].formula).toBe('=SUMPRODUCT(A1:B1)');
                expect(spreadsheet.sheets[0].rows[1].cells[5].value.toString()).toBe('30');
                expect(helper.invoke('getCell', [1, 5]).textContent).toBe('30');
                done();
            });

            it('Circular reference dialog opens multiple times when deleting column', (done: Function) => {
                helper.setAnimationToNone(`#${helper.id}_contextmenu`);
                helper.openAndClickCMenuItem(0, 5, [7], null, true);
                setTimeout(() => {
                    expect(document.querySelectorAll('.e-dialog').length).toBe(0);
                    done();
                });
            });

            it('Calculation issue while applying the formula =(B2+B3)^2', (done: Function) => {
                helper.edit('B2', '1');
                helper.edit('B3', '5.00%');
                helper.edit('B4', '=(B2+B3)^2');
                helper.edit('B5', '=(B2+B3)^(1/3)');
                helper.edit('B6', '=POWER((B2+B3),2)');
                helper.edit('B7', '=POWER((B2+B3),1/3)');
                helper.edit('B8', '=(3^2)^(2)');
                expect(helper.invoke('getCell', [3, 1]).textContent).toBe('110.25%');
                expect(helper.invoke('getCell', [4, 1]).textContent).toBe('101.64%');
                expect(helper.invoke('getCell', [5, 1]).textContent).toBe('1.1025');
                expect(helper.invoke('getCell', [6, 1]).textContent).toBe('1.016396357');
                expect(helper.invoke('getCell', [7, 1]).textContent).toBe('81');
                done();
            });

            // it('Formula dependent cell not updated after destroy', (done: Function) => {
            //     helper.edit('C1', 'Test');
            //     setTimeout(() => {
            //         helper.invoke('destroy');
            //         new Spreadsheet(model, '#' + helper.id);
            //         setTimeout(() => {
            //             setTimeout(() => {
            //                 expect(helper.getInstance().sheets[0].rows[0].cells[2]).toBeUndefined();
            //                 expect(helper.invoke('getCell', [0, 2]).textContent).toBe('');
            //                 helper.edit('B1', '30');
            //                 expect(helper.invoke('getCell', [1, 5]).textContent).toBe('40');
            //                 expect(helper.getInstance().sheets[0].rows[1].cells[5].value).toBe(40);
            //                 done();
            //             });
            //         });
            //     });
            // });
        });
        describe('I312700 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ rows: [{ cells: [{ formula: '=COUNTIF(AR1:AT1,"=10")' }, { index: 4, formula: '=SUMIF(AR1:AT1,"=10")' },
                        { index: 43, value: '10' }, { value: '5' }, { value: '10' }] }], columns: [{ index: 1, width: 120 }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Improve the formulas with the range greater than AA and countif, countifs, sumif, sumifs formula with this ranges', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[0].cells[0].formula).toBe('=COUNTIF(AR1:AT1,"=10")');
                expect(spreadsheet.sheets[0].rows[0].cells[0].value.toString()).toBe('2');
                expect(helper.invoke('getCell', [0, 0]).textContent).toBe('2');
                expect(spreadsheet.sheets[0].rows[0].cells[4].formula).toBe('=SUMIF(AR1:AT1,"=10")');
                expect(spreadsheet.sheets[0].rows[0].cells[4].value.toString()).toBe('20');
                expect(helper.invoke('getCell', [0, 4]).textContent).toBe('20');
                done();
            });
            it('SF-422696 -> SUMIFS formula not working if the criteria contains both operator and a cell range', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: 'Residential' }, 'B1']);
                helper.invoke('updateCell', [{ value: 'Residential' }, 'B2']);
                helper.invoke('updateCell', [{ value: 'Residential' }, 'B3']);
                helper.invoke('updateCell', [{ value: '1' }, 'C1']);
                helper.invoke('updateCell', [{ value: '2' }, 'C2']);
                helper.invoke('updateCell', [{ value: '3' }, 'C3']);
                helper.invoke('updateCell', [{ formula: '=SUMIFS(C1:C3,B1:B3,"="&B1)' }, 'D1']);
                const cell: any = spreadsheet.sheets[0].rows[0].cells[3];
                const cellEle: HTMLElement = helper.invoke('getCell', [0, 3]);
                expect(cell.formula).toBe('=SUMIFS(C1:C3,B1:B3,"="&B1)');
                expect(cell.value).toBe(6);
                expect(cellEle.textContent).toBe('6');
                helper.invoke('updateCell', [{ value: 'Residential 1' }, 'B2']);
                expect(cell.value).toBe(4);
                expect(cellEle.textContent).toBe('4');
                helper.invoke('updateCell', [{ formula: '=SUMIFS(C1:C3,B1:B3,"<>"&Sheet1!B1)' }, 'D1']);
                expect(cell.value).toBe(2);
                expect(cellEle.textContent).toBe('2');
                helper.invoke('updateCell', [{ value: 'Residential 2' }, 'B3']);
                expect(cell.value).toBe(5);
                expect(cellEle.textContent).toBe('5');
                helper.invoke('updateCell', [{ value: 'Residential 1' }, 'B4']);
                helper.invoke('updateCell', [{ value: '4' }, 'C4']);
                helper.invoke('updateCell', [{ formula: '=SUMIFS(C1:C4,B1:B4,"<>"Sheet1!B1,B1:B4,"<>"&B3)' }, 'D1']);
                expect(cell.value).toBe(6);
                expect(cellEle.textContent).toBe('6');
                helper.invoke('updateCell', [{ formula: '=SUMIFS(C1:C4, B1:B4 , "Residential")' }, 'D1']);
                expect(cell.value).toBe(1);
                expect(cellEle.textContent).toBe('1');
                helper.invoke('updateCell', [{ formula: '=COUNTIFS(B1:B4,"<>"&Sheet1!B1)' }, 'D1']);
                expect(cell.value).toBe(3);
                expect(cellEle.textContent).toBe('3');
                helper.invoke('updateCell', [{ formula: '=COUNTIFS(B1:B4,"="Sheet1!B2)' }, 'D1']);
                expect(cell.formula).toBe('=COUNTIFS(B1:B4,"="Sheet1!B2)');
                expect(cell.value).toBe(2);
                expect(cellEle.textContent).toBe('2');
                helper.invoke('updateCell', [{ formula: '=AVERAGEIFS(C1:C4,B1:B4,"<>"Sheet1!B2)' }, 'D1']);
                expect(cell.formula).toBe('=AVERAGEIFS(C1:C4,B1:B4,"<>"Sheet1!B2)');
                expect(cell.value).toBe(2);
                expect(cellEle.textContent).toBe('2');
                helper.invoke('updateCell', [{ formula: '=AVERAGEIFS(C1:C4,B1:B4,"="&Sheet1!B2)' }, 'D1']);
                expect(cell.formula).toBe('=AVERAGEIFS(C1:C4,B1:B4,"="&Sheet1!B2)');
                expect(cell.value).toBe(3);
                expect(cellEle.textContent).toBe('3');
                done();
            });
            it('SF-422232 -> OR operation in SUMIFS formula', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,B1:B4,{"Residential","Residential 1"}))' }, 'D2']);
                const cell: any = spreadsheet.sheets[0].rows[1].cells[3];
                const cellEle: HTMLElement = helper.invoke('getCell', [1, 3]);
                expect(cell.value).toBe(7);
                expect(cellEle.textContent).toBe('7');
                helper.invoke('updateCell', [{ formula: '=SUM(AVERAGEIFS(C1:C4,B1:B4,{"Residential 2","Residential 1"}))' }, 'D2']);
                expect(cell.value).toBe(6);
                expect(cellEle.textContent).toBe('6');
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,B1:B4,{"Residential";"Residential 2"}))' }, 'D2']);
                expect(cell.value).toBe(4);
                expect(cellEle.textContent).toBe('4');
                helper.invoke('updateCell', [{ formula: '=AVERAGE(AVERAGEIFS(C1:C4, B1:B4, {"Residential", "Residential 2"}))' }, 'D2']);
                expect(cell.value).toBe('2');
                expect(cellEle.textContent).toBe('2');
                helper.invoke('updateCell', [{ value: 'Residential 3' }, 'B4']);
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,B1:B4,{"Residential 1","Residential 2","Residential 3"}))' }, 'D2']);
                expect(cell.value).toBe(9);
                expect(cellEle.textContent).toBe('9');
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,B1:B4,{"<>Residential 1","=Residential 2"}))' }, 'D2']);
                expect(cell.value).toBe(11);
                expect(cellEle.textContent).toBe('11');
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,B1:B4, {"Residential"}))' }, 'D2']);
                expect(cell.formula).toBe('=SUM(SUMIFS(C1:C4,B1:B4, {"Residential"}))');
                expect(cell.value).toBe(1);
                expect(cellEle.textContent).toBe('1');
                helper.invoke('updateCell', [{ value: '33' }, 'F1']);
                helper.invoke('updateCell', [{ value: '45' }, 'F2']);
                helper.invoke('updateCell', [{ value: '28' }, 'F3']);
                helper.invoke('updateCell', [{ value: '25' }, 'F4']);
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,F1:F4,{33,28}))' }, 'D2']);
                expect(cell.value).toBe(4);
                expect(cellEle.textContent).toBe('4');
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,F1:F4,{"25","45"}))' }, 'D2']);
                expect(cell.value).toBe(6);
                expect(cellEle.textContent).toBe('6');
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,F1:F4, {">20","<30"}))' }, 'D2']);
                expect(cell.value).toBe(17);
                expect(cellEle.textContent).toBe('17');
                helper.invoke('updateCell', [{ formula: '=AVERAGE(AVERAGEIFS(C1:C4,F1:F4, {">30","<50"}))' }, 'D2']);
                expect(cell.value).toBe('2');
                expect(cellEle.textContent).toBe('2');
                helper.invoke('updateCell', [{ value: 'TRUE' }, 'G1']);
                helper.invoke('updateCell', [{ value: 'FALSE' }, 'G3']);
                helper.invoke('updateCell', [{ value: 'TRUE' }, 'G4']);
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,G1:G4,{"=TRUE","<>FALSE"}))' }, 'D2']);
                expect(cell.value).toBe(12);
                expect(cellEle.textContent).toBe('12');
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(C1:C4,G1:G4,{TRUE,FALSE}))' }, 'D2']);
                expect(cell.value).toBe(8);
                expect(cellEle.textContent).toBe('8');
                helper.invoke('updateCell', [{ formula: '=AVERAGE(SUMIFS(C1:C4, G1:G4, {"=TRUE", "<>FALSE"}))' }, 'D2']);
                expect(cell.value).toBe('6');
                expect(cellEle.textContent).toBe('6');
                done();
            });
        });
        describe('CR-Issue-EJ2-870831->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [{ ranges: [{ dataSource: defaultData }] },
                    {
                        rows: [
                            { cells: [{ value: '1' }] }, { cells: [{ value: '2' }] }, { cells: [{ value: '3' }] },
                            { cells: [{ value: '4' }] }, { cells: [{ value: '5' }] }, { cells: [{ value: '6' }] },
                            { cells: [{ value: '7' }] }, { cells: [{ value: '8' }] }, { cells: [{ value: '9' }] }]
                    },
                    {}]
                }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('The formula calculation is not working as expected when using the defined names that were added through the method', (done: Function) => {
                helper.getInstance().addDefinedName({ refersTo: "='Sheet1'!H2", name: "test_1", scope: "Sheet1" });
                expect(helper.getInstance().definedNames.length).toBe(1);
                setTimeout(() => {
                    expect(helper.getInstance().definedNames[0].name).toBe('test_1');
                    helper.getInstance().selectRange('I2');
                    helper.getInstance().editModule.startEdit();
                    helper.getInstance().editModule.editCellData.value = '=test_1';
                    helper.getInstance().editModule.endEdit();
                    const value1: string = (helper.getInstance().sheets[0].rows[1].cells[7].value).toString();
                    const value2: string = (helper.getInstance().sheets[0].rows[1].cells[8].value).toString();
                    expect(value1).toEqual(value2);
                    helper.getInstance().activeSheetIndex = 1;
                    helper.getInstance().dataBind();
                    setTimeout(() => {
                        helper.getInstance().selectRange('I2');
                        helper.getInstance().editModule.startEdit();
                        helper.getInstance().editModule.editCellData.value = '=test_1';
                        helper.getInstance().editModule.endEdit();
                        expect(helper.getInstance().sheets[1].rows[1].cells[8].value).toBe('#NAME?');
                        helper.getInstance().activeSheetIndex = 0;
                        helper.getInstance().dataBind();
                    });
                    done();
                });
            });
            it('To check whether the defined name reference is available after sheet rename', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.triggerMouseAction('dblclick', null, helper.getElementFromSpreadsheet('.e-sheet-tab .e-toolbar-items'), helper.getElementFromSpreadsheet('.e-sheet-tab .e-active .e-text-wrap'));
                let editorElem: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('.e-sheet-tab .e-sheet-rename');
                editorElem.click();
                editorElem.value = 'Hello';
                helper.triggerKeyNativeEvent(13, false, false, editorElem);
                setTimeout(() => {
                    expect(spreadsheet.definedNames[0].refersTo).toBe("='Hello'!H2");
                    expect(spreadsheet.definedNames[0].scope).toBe("Hello");
                    helper.getInstance().selectRange('K2');
                    helper.getInstance().editModule.startEdit();
                    helper.getInstance().editModule.editCellData.value = '=test_1';
                    helper.getInstance().editModule.endEdit();
                    expect(spreadsheet.sheets[0].rows[1].cells[10].value).toBe("10");
                    done();
                });
            });
            it('Deletion of defined Names through public method', (done: Function) => {
                helper.invoke('delete', [0]);
                expect(helper.getInstance().definedNames.length).toBe(0);
                setTimeout(() => {
                    helper.getInstance().selectRange('J2');
                    helper.getInstance().editModule.startEdit();
                    helper.getInstance().editModule.editCellData.value = '=test_1';
                    helper.getInstance().editModule.endEdit();
                    expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toBe('#NAME?');
                    done();
                });
            });
        });
        describe('EJ2-66373, EJ2-69543 ->', () => {
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{
                        rows: [
                            { cells: [{ value: '1' }, { value: '1' }, { value: '' }, { value: '1' }, { formula: '=MEDIAN(A1:D1)' }]},
                            { cells: [{ value: '2' }, { value: '2' }, { value: 'Text' }, { value: '' }, { formula: '=MEDIAN(A2:D2)' }]},
                            { cells: [{ value: '3' }, { value: '3' }, { value: '1' }, { value: '2' }, { formula: '=MEDIAN(A3:D3)' }]},
                            { cells: [{ value: 'Text' }, { value: '4' }, { value: '2' }, { value: 'Text' }, { formula: '=MEDIAN(A4:D4)' }]},
                            { cells: [{ value: '4' }, { value: '4' }, { value: '3' }, { value: '3' }, { formula: '=MEDIAN(A5:D5)' }]},
                            { cells: [{ value: '' }, { value: 'Text' }, { value: '4' }, { value: '4' }, { formula: '=MEDIAN(A6:D6)' }]},
                            { cells: [{ value: '5' }, { value: '' }, { value: '5' }, { value: '5' }, { formula: '=MEDIAN(A7:D7)' }]},
                            { cells: [{ formula: '=MEDIAN(A1:A7)' }, { formula: '=MEDIAN(B1:B7)' }, { formula: '=MEDIAN(C1:C7)' }, { formula: '=MEDIAN(D1:D7)' }]},
                        ]
                    }, {
                        rows: [
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A1:D1)' }]},
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A2:D2)' }]},
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A3:D3)' }]},
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A4:D4)' }]},
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A5:D5)' }]},
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A6:D6)' }]},
                            { cells: [{ index: 4, formula: '=MEDIAN(Sheet1!A7:D7)' }]},
                            { cells: [{ formula: '=MEDIAN(Sheet1!A1:A7)' }, { formula: '=MEDIAN(Sheet1!B1:B7)' }, { formula: '=MEDIAN(Sheet1!C1:C7)' }, { formula: '=MEDIAN(Sheet1!D1:D7)' }]},
                        ]
                    }] }, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            it('Page becomes unresponsive after provide Median formula with String and Numbers', (done: Function) => {
                expect(helper.getInstance().sheets[0].rows[0].cells[4].value).toBe(1);
                expect(helper.getInstance().sheets[0].rows[1].cells[4].value).toBe(2);
                expect(helper.getInstance().sheets[0].rows[2].cells[4].value).toBe(2.5);
                expect(helper.getInstance().sheets[0].rows[3].cells[4].value).toBe(3);
                expect(helper.getInstance().sheets[0].rows[4].cells[4].value).toBe(3.5);
                expect(helper.getInstance().sheets[0].rows[5].cells[4].value).toBe(4);
                expect(helper.getInstance().sheets[0].rows[6].cells[4].value).toBe(5);
                expect(helper.getInstance().sheets[0].rows[7].cells[0].value).toBe(3);
                expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toBe(3);
                expect(helper.getInstance().sheets[0].rows[7].cells[2].value).toBe(3);
                expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toBe(3);
                helper.getElement().querySelectorAll('.e-sheet-tab .e-toolbar-item')[1].click();
                setTimeout(() => {
                    expect(helper.getInstance().sheets[1].rows[0].cells[4].value).toBe(1);
                    expect(helper.getInstance().sheets[1].rows[1].cells[4].value).toBe(2);
                    expect(helper.getInstance().sheets[1].rows[2].cells[4].value).toBe(2.5);
                    expect(helper.getInstance().sheets[1].rows[3].cells[4].value).toBe(3);
                    expect(helper.getInstance().sheets[1].rows[4].cells[4].value).toBe(3.5);
                    expect(helper.getInstance().sheets[1].rows[5].cells[4].value).toBe(4);
                    expect(helper.getInstance().sheets[1].rows[6].cells[4].value).toBe(5);
                    expect(helper.getInstance().sheets[1].rows[7].cells[0].value).toBe(3);
                    expect(helper.getInstance().sheets[1].rows[7].cells[1].value).toBe(3);
                    expect(helper.getInstance().sheets[1].rows[7].cells[2].value).toBe(3);
                    expect(helper.getInstance().sheets[1].rows[7].cells[3].value).toBe(3);
                    done();
                });
            });
            it('Returns as #SPILL! when pass =UNIQUE formula as a parameter to computeExpression method', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(B1:B5)'))).toBe('["1","2","3","4"]');
                expect(spreadsheet.computeExpression('=UNIQUE(B1)')).toBe('1');
                expect(spreadsheet.computeExpression('=UNIQUE(11)')).toBe('11');
                expect(spreadsheet.computeExpression('=UNIQUE("11")')).toBe('11');
                expect(spreadsheet.computeExpression('=UNIQUE(true)')).toBe('TRUE');
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(B1:C8)'))).toBe('["1","0","2","Text","3","1","4","2","4","3","Text","4","0","5","3","3"]');
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(A1:B8,C1:D8)'))).toBe('["1","1","2","2","3","3","Text","4","4","4","0","Text","5","0"]');
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(A1:A8,B1:C8)'))).toBe('["1","2","3","Text","4","0","5","3"]');
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(A1:A3)'))).toBe('["1","2","3"]');
                expect(spreadsheet.computeExpression('=UNIQUE(A4)')).toBe('Text');
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(Sheet2!E1:E6)'))).toBe('["1","2","2.5","3","3.5","4"]');
                expect(JSON.stringify(spreadsheet.computeExpression('=UNIQUE(Sheet1!D1:D8)'))).toBe('["1","0","2","Text","3","4","5"]');
                done();
            });
        });
        describe('I296802, F162534 ->', () => {
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ rows: [{ cells: [{ index: 3, value: '100' }, { value: '50' }, { formula: '=D1+E1' }] }],
                    selectedRange: 'D1:D1' }] }, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            it('formula dependency not updated issue', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[0].cells[5].value).toEqual('150');
                helper.invoke('insertColumn', [4]);
                setTimeout((): void => {
                    expect(spreadsheet.sheets[0].rows[0].cells[6].formula).toEqual('=D1+F1');
                    expect(spreadsheet.sheets[0].rows[0].cells[6].value).toEqual('150');
                    helper.edit('F1', '100');
                    expect(spreadsheet.sheets[0].rows[0].cells[6].value).toEqual('200');
                    expect(helper.invoke('getCell', [0, 6]).textContent).toEqual('200');
                    setTimeout((): void => {
                        done();
                    }, 10);
                });
            });
        });
        describe('I305406, I280608, I296710, I257045, I274819, I282974, I288646 ->', () => {
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet({}, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            // it('Formula selection support while editing the formula range, Highlight reference selection in formula and formula reference selection issue', (done: Function) => {
                // const spreadsheet: Spreadsheet = helper.getInstance();
                // helper.invoke('startEdit');
                // setTimeout((): void => {
                    // const editor: HTMLElement = helper.getElement('#' +helper.id + '_edit');
                    // spreadsheet.notify('editOperation', { action: 'refreshEditor', value: '=SUM(', refreshCurPos: true, refreshEditorElem: true });
                    // let cell: HTMLElement = helper.invoke('getCell', [0, 1]);
                    // helper.triggerMouseAction(
                        // 'mousedown', { x: cell.getBoundingClientRect().left + 1, y: cell.getBoundingClientRect().top + 1 }, null,
                        // cell);
                    // helper.triggerMouseAction(
                        // 'mouseup', { x: cell.getBoundingClientRect().left + 1, y: cell.getBoundingClientRect().top + 1 }, document,
                        // cell);
                    // setTimeout((): void => {
                        // expect(editor.textContent).toEqual('=SUM(B1');
                        // spreadsheet.notify('editOperation', { action: 'refreshEditor', value: '=SUM(A3', refreshCurPos: true, refreshEditorElem: true });
                       //  helper.triggerKeyEvent('keydown', 51, null, null, null, editor);
                        // helper.triggerKeyEvent('keyup', 51, null, null, null, editor);
                        // cell = helper.invoke('getCell', [2, 0]);
                        // expect(cell.classList).toContain('e-formularef-selection');
                        // expect(cell.classList).toContain('e-vborderright');
                        // expect(cell.classList).toContain('e-vborderbottom');
                        // done();
                    // },30);
                // },30);
            // });
        });
        describe('I293654, I296802, I307653, I264424, I298789, I300031 ->', () => {
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ name: 'Cover', rows: [{ index: 5, height: 30, cells: [{ colSpan: 8, formula: '=Lookup!B1', style:
                { fontWeight: 'bold', textAlign: 'center', verticalAlign: 'middle' } }] }, { index: 7, cells: [{ colSpan: 6, value:
                'Company No.12345678' }] }, { cells: [{ colSpan: 4, formula: '=IF(Lookup!B3="ABRIDGED",IF(IF(Lookup!B4="",FALSE,TRUE),"Directors'
                + "'" + '","Director' + "'" + 's")&" Report and "&IF(Lookup!B5="Audited","Audited","Unaudited")&" Abridged Accounts",IF(IF(Lookup!B4="",FALSE,TRUE),"Directors'
                + "'" + '","Director' + "'" + 's")&" Report and "&IF(Lookup!B5="Audited","Audited","Unaudited")&" Accounts")' }] }, { cells: [{ formula:
                '=TEXT(Lookup!B6,"dd MMMM yyyy")' }, { index: 3, value: '37087.58' }, { value: '38767.36' }, { wrap: true, formula:
                '=IF(OR(AND(ABS(D10)>ABS(E10),D10<0),AND(ABS(D10)<=ABS(E10),E10<0)),-1*(IF(D10=0,((ABS(E10)-ABS(D10))/1)*100,((ABS(E10)-ABS(D10))/ABS(D10))*100)),IF(D10=0,((ABS(E10)-ABS(D10))/1)*100,((ABS(E10)-ABS(D10))/ABS(D10))*100))'
                }] }, { cells: [{ formula: '=1-0/0' }] }, { cells: [{ formula: '=(10-3)/1' }] }] }, { name: 'Lookup', rows: [{ cells: [{ value: 'CLIENTNAME' },
                { value: 'Example Limited Company' }] }, { cells: [{ value: 'REGISTRATIONNUMBER' }, { value: '12345678' }] }, { cells: [{ value: 'ACCOUNT' }] }, { cells: [{ value: 'DIRECTOR2' },
                { value: 'abc' }] }, { cells: [{ value: 'AUDITED' }, { value: 'Audited' }] }, { cells: [{ value: 'PERIODEND' }, { value: '9/1/2019' }] }] }] }, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            it('Opening the attached pre formatted excel file it is giving errors in the last two rows though the formula is correct and date format is also correct', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[5].cells[0].value).toBe('Example Limited Company');
                expect(helper.invoke('getCell', [5, 0]).textContent).toBe('Example Limited Company');
                expect(spreadsheet.sheets[0].rows[8].cells[0].value).toBe("Directors' Report and Audited Accounts");
                expect(helper.invoke('getCell', [8, 0]).textContent).toBe("Directors' Report and Audited Accounts");
                expect(spreadsheet.sheets[0].rows[9].cells[0].value).toBe('September 1, 2019');
                expect(helper.invoke('getCell', [9, 0]).textContent).toBe('September 1, 2019');
                expect(spreadsheet.sheets[0].rows[9].cells[5].value).toBe('4.529225147610062');
                expect(helper.invoke('getCell', [9, 5]).textContent).toBe('4.529225148');
                expect(spreadsheet.sheets[0].rows[10].cells[0].value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [10, 0]).textContent).toBe('#DIV/0!');
                expect(spreadsheet.sheets[0].rows[11].cells[0].value).toBe('7');
                expect(helper.invoke('getCell', [11, 0]).textContent).toBe('7');
                done();
            });
        });
        describe('FB23112, EJ2-60666, EJ2-939665 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Match function is not working for cell reference', (done: Function) => {
                helper.edit('I2', 'Running Shoes');
                helper.edit('I3', '=Match(I2, A2:A11)');
                expect(helper.invoke('getCell', [2, 8]).textContent).toBe('7');
                expect(helper.getInstance().sheets[0].rows[2].cells[8].value).toBe(7);
                done();
            });

            it('Editing formula is not working after sheets updated dynamically', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                spreadsheet.sheets = [{}, {}];
                spreadsheet.dataBind();
                setTimeout(() => {
                    helper.edit('B1', '=A1');
                    expect(spreadsheet.sheets[0].rows[0].cells[1].value).toBe('0');
                    expect(spreadsheet.sheets[0].rows[0].cells[1].formula).toBe('=A1');
                    expect(helper.invoke('getCell', [0, 1]).textContent).toBe('0');
                    done();
                });
            });
            it('CONCAT formula is not working properly with the nested TEXT formula', (done: Function) => {
                helper.edit('J2', '=CONCAT(TEXT("100000","$#,##0")," Test")');
                helper.edit('J3', '=TEXT("100000","$#,##0")');
                expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toBe('$100,000 Test');
                expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('$100,000');
                done();
            });
        });
        describe('fb23644, fb23650 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ rows: [{ cells: [{ value: '1' }] }, { cells: [{ value: '2' }] }, { cells: [{ value: '3' }] }, { cells:
                        [{ value: '5' }] }, { cells: [{ formula: '=SUM(A1:A4)' }] }], selectedRange: 'A4' }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Dependent cells not updated for loaded JSON using openFromJson method', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[4].cells[0].value.toString()).toEqual('11');
                helper.invoke('refresh');
                setTimeout((): void => {
                    helper.edit('A4', '10');
                    expect(spreadsheet.sheets[0].rows[4].cells[0].value.toString()).toEqual('16');
                    setTimeout((): void => {
                        helper.invoke('selectRange', ['A5:A5']);
                        done();
                    });
                });
            });
            it('Cell with inserted function is not properly copied and pasted (Formula range reference not proper on pasted cell)', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[4].cells[1]).toBeUndefined();
                helper.invoke('copy').then((): void => {
                    helper.invoke('paste', ['B5']);
                    setTimeout((): void => {
                        expect(spreadsheet.sheets[0].rows[4].cells[1].value.toString()).toEqual('0');
                        expect(spreadsheet.sheets[0].rows[4].cells[1].formula).toEqual('=SUM(B1:B4)');
                        expect(helper.invoke('getCell', [4, 1]).textContent).toEqual('0');
                        helper.invoke('paste', ['C4']);
                        setTimeout((): void => {
                            expect(spreadsheet.sheets[0].rows[3].cells[2].value).toEqual('#REF!');
                            expect(spreadsheet.sheets[0].rows[3].cells[2].formula).toEqual('=SUM(#REF!)');
                            expect(helper.invoke('getCell', [3, 2]).textContent).toEqual('#REF!');
                            done();
                        });
                    });
                });
            });
        });
        describe('fb24848 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ rows: [{ cells: [{ value: '1' }, { index: 4, value: 'Tom' }] }, { cells: [{ value: '2' }, { index: 4,
                        value: 'John' }] }, { cells: [{ value: '5' }, { index: 4, value: 'Jane' }] }, { index: 4, cells: [{ formula:
                        '=INDEX(A1:A3,MATCH("Tom",E1:E3,0),1)' }, { index: 4, formula: '=INDEX(A1:A3,SUM(A1:A1),1)' }] }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('"#REF!" error when combining functions with each over', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[4].cells[0].value).toEqual('1');
                expect(helper.invoke('getCell', [4, 0]).textContent).toEqual('1');
                expect(spreadsheet.sheets[0].rows[4].cells[4].value).toEqual('1');
                expect(helper.invoke('getCell', [4, 4]).textContent).toEqual('1');
                helper.edit('A1', '3');
                setTimeout((): void => {
                    expect(spreadsheet.sheets[0].rows[4].cells[0].value.toString()).toEqual('3');
                    expect(helper.invoke('getCell', [4, 0]).textContent).toEqual('3');
                    expect(spreadsheet.sheets[0].rows[4].cells[4].value.toString()).toEqual('5');
                    expect(helper.invoke('getCell', [4, 4]).textContent).toEqual('5');
                    done();
                });
            });
        });
        describe('I325908, SF-734277 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ rows: [{ cells: [{ value: '0' }, { index: 4, value: '10' }] }, { cells: [{ formula:
                        '=IF($A1<>0,$A1*E$1,"0,00")' }, {formula: '=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B9)"),"View customer profile")'},
                        {formula: '=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B16)"),"#VALUE!")'},{formula: '=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B15)"),"Create target groups")'},
                        {formula: '=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B13)"),"Export of push tokens")'}] }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('IF formula false value with "," inside scenario', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[1].cells[0].value).toEqual('0,00');
                expect(helper.invoke('getCell', [1, 0]).textContent).toEqual('0,00');
                helper.edit('A1', '10');
                setTimeout((): void => {
                    expect(spreadsheet.sheets[0].rows[1].cells[0].value).toEqual('100');
                    expect(helper.invoke('getCell', [1, 0]).textContent).toEqual('100');
                    done();
                });
            });

            it('EJ2-965650 -> A #NAME? error occurs when using the IFERROR formula with an unrecognized or unknown function in it', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[1].cells[1].formula).toBe('=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B9)"),"View customer profile")');
                expect(spreadsheet.sheets[0].rows[1].cells[2].formula).toBe('=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B16)"),"#VALUE!")');
                expect(spreadsheet.sheets[0].rows[1].cells[3].formula).toBe('=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B15)"),"Create target groups")');
                expect(spreadsheet.sheets[0].rows[1].cells[4].formula).toBe('=IFERROR(__xludf.DUMMYFUNCTION("GOOGLETRANSLATE(B13)"),"Export of push tokens")');
                expect(spreadsheet.sheets[0].rows[1].cells[1].value).not.toBe('#NAME?');
                expect(spreadsheet.sheets[0].rows[1].cells[2].value).not.toBe('#NAME?');
                expect(spreadsheet.sheets[0].rows[1].cells[3].value).not.toBe('#NAME?');
                expect(spreadsheet.sheets[0].rows[1].cells[4].value).not.toBe('#NAME?');
                expect(spreadsheet.sheets[0].rows[1].cells[1].value).toBe('View customer profile');
                expect(spreadsheet.sheets[0].rows[1].cells[2].value).toBe('#VALUE!');
                expect(spreadsheet.sheets[0].rows[1].cells[3].value).toBe('Create target groups');
                expect(spreadsheet.sheets[0].rows[1].cells[4].value).toBe('Export of push tokens');
                done();
            });
            it('EJ2-965650 -> A #NAME? error occurs when using the IFERROR formula with an unrecognized or unknown function in it', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.edit('C13', '10');
                helper.edit('C14', '=IFERROR(SUM(C13,5), TEST(D4))');
                const rows: RowModel[] = spreadsheet.sheets[0].rows;
                expect(rows[13].cells[2].formula).toBe('=IFERROR(SUM(C13,5), TEST(D4))');
                expect(rows[13].cells[2].value).toBe('15');
                helper.edit('C15', '=SUM(IFERROR(C13, DEMO(10)),IFERROR(SUM(DEMO(10), 10), C13))+10');
                expect(rows[14].cells[2].formula).toBe('=SUM(IFERROR(C13, DEMO(10)),IFERROR(SUM(DEMO(10), 10), C13))+10');
                expect(rows[14].cells[2].value).toBe('30');
                helper.edit('C16', '=AVERAGE(iferror(C13, DEMO(10)),iferror(ABS(SUM(DEMO(10), 10)), C13), 22)');
                expect(rows[15].cells[2].formula).toBe('=AVERAGE(iferror(C13, DEMO(10)),iferror(ABS(SUM(DEMO(10), 10)), C13), 22)');
                expect(rows[15].cells[2].value).toBe('14');
                helper.edit('C13', '22');
                expect(rows[13].cells[2].value).toBe('27');
                expect(rows[14].cells[2].value).toBe('54');
                expect(rows[15].cells[2].value).toBe('22');
                helper.edit('C13', '#DIV/0!');
                expect(rows[13].cells[2].value).toBe('#NAME?');
                expect(rows[14].cells[2].value).toBe('#NAME?');
                expect(rows[15].cells[2].value).toBe('#NAME?');
                done();
            });
        });
        describe('SF-362961 ->', () => {
            let spreadsheet: any;
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ name: 'Report Output', rows: [{ index: 1, cells:
                        [{ formula: '=IFS(NonOtherUQE!A1=0,"",NonOtherUQE!A1="Others","",TRUE,NonOtherUQE!A1)' }, { index: 3, formula: '=IFS(ClientData!E1=0,"",ClientData!E1="Others","",TRUE,ClientData!E1)' },
                            { formula: '=IF($D2="","",IFERROR(IF(SUMIF(ClientData!D1:D3,$A4,ClientData!C1:C3)=0,"0",SUMIF(ClientData!D1:D3,$A4,ClientData!C1:C3)),"0"))' }] }] },
                        { name: 'ClientData', rows: [{ cells: [{ index: 2, value: '100' }, { value: 'EY Adj 1' }, { formula: '=UNIQUE(ClientData!D1:D3)' }] },
                        { cells: [{ value: 'EY Adj 2' }, { value: '1,000.00' }, { value: '150' }, { value: 'EY Adj 2' }] }, { cells: [{ index: 1, value: '-2,000.00' }, { value: '200' }, { value: 'Others' }] },
                        { index: 5, cells: [{ index: 6, formula: '=C6' }] }, { cells: [{ index: 6, formula: '=D5' }] }, { index: 100, cells: [{ formula: '=SUM(C1:C2)' }] }] },
                        { name: 'NonOtherUQE' }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Inserting row not properly updated the cell references in other sheets', (done: Function) => {
                spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[1].cells[3].value).toEqual('EY Adj 1');
                expect(spreadsheet.sheets[0].rows[1].cells[4].value).toEqual('0');
                spreadsheet.activeSheetIndex = 1;
                spreadsheet.dataBind();
                setTimeout((): void => {
                    expect(spreadsheet.sheets[0].rows[1].cells[3].value).toEqual('EY Adj 1');
                    expect(spreadsheet.sheets[0].rows[1].cells[4].value).toEqual('0');
                    helper.invoke('insertRow');
                    setTimeout((): void => {
                        expect(spreadsheet.sheets[0].rows[1].cells[3].formula).toEqual('=IFS(ClientData!E2=0,"",ClientData!E2="Others","",TRUE,ClientData!E2)');
                        expect(spreadsheet.sheets[0].rows[1].cells[3].value).toBeNull();
                        expect(spreadsheet.sheets[0].rows[1].cells[4].formula).toEqual('=IF($D2="","",IFERROR(IF(SUMIF(ClientData!D2:D4,$A4,ClientData!C2:C4)=0,"0",SUMIF(ClientData!D2:D4,$A4,ClientData!C2:C4)),"0"))');
                        expect(spreadsheet.sheets[0].rows[1].cells[4].value).toBeNull();
                        done();
                    });
                });
            });
            it('saveAsJson formula calculation for not calculated formula cell and #value error checking', (done: Function) => {
                expect(spreadsheet.sheets[0].rows[1].cells[0].value).toEqual('0');
                expect(spreadsheet.sheets[1].rows[101].cells[0].value).toBeNull();
                // saveAsJson operation codes are used to replicate the case, since CI will not compatible with Worker task so invoking getStringifyObject method directly.
                const skipProps: string[] = ['dataSource', 'startCell', 'query', 'showFieldAsHeader'];
                for (let i: number = 0, sheetCount: number = spreadsheet.sheets.length; i < sheetCount; i++) {
                    spreadsheet.workbookSaveModule.getStringifyObject(spreadsheet.sheets[i], skipProps, i);
                }
                expect(spreadsheet.sheets[0].rows[1].cells[0].value).toEqual('0');
                expect(spreadsheet.sheets[1].rows[101].cells[0].value).toEqual(250);
                done();
            });
            it('External copy/paste and SUMIF formula calculation value is not proper', (done: Function) => {
                expect(getCell(4, 2, spreadsheet.sheets[1])).toBeNull();
                helper.invoke('updateCell', [{ formula: '=SUMIF(ClientData!$D$2:$D$4,$A3,ClientData!$B$2:$B$4)' }, 'C5']);
                expect(spreadsheet.sheets[1].rows[4].cells[2].value).toEqual(1000);
                done();
            });
            it('Referenced cells are not updated while updating the UNIQUE formula value', (done: Function) => {
                expect(getCell(5, 2, spreadsheet.sheets[1])).toBeNull();
                expect(spreadsheet.sheets[1].rows[6].cells[6].formula).toEqual('=C7');
                expect(spreadsheet.sheets[1].rows[6].cells[6].value).toEqual('0');
                expect(spreadsheet.sheets[1].rows[7].cells[6].formula).toEqual('=D6');
                expect(spreadsheet.sheets[1].rows[7].cells[6].value).toEqual('0');
                helper.invoke('updateCell', [{ formula: '=UNIQUE(C2:D4)' }, 'C6']);
                expect(spreadsheet.sheets[1].rows[5].cells[2].value).toEqual('100');
                expect(spreadsheet.sheets[1].rows[6].cells[6].value).toEqual('150');
                expect(spreadsheet.sheets[1].rows[7].cells[6].value).toEqual('EY Adj 1');
                done();
            });
        });
        describe('EJ2-57075, EJ2-60798, EJ2-962607 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{       rows: [
                        {
                          cells: [
                            { value: '10' },
                            { value: '10' },
                            { formula: '=SUMIF(A1:A2,"10",B1)' },
                            { value: 'Apple' },
                            { value: 'Fruit' },
                            { formula: '=IF(D1="NA",E1,Concat(D1:E1))' },
                            { formula: '=IF(""=" ","","WO 8012-01-00004")' },
                            { formula: '=IF(""="","WO 8012-01-00004","")' }
                          ],
                        },
                        { cells: [{ value: '10' }, { value: '10' }] },
                      ], }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('SUMIF calculation while criteriaRange is greater than Sum range', (done: Function) => {
                expect(helper.getInstance().sheets[0].rows[0].cells[2].value.toString()).toEqual('20');
                done();
            });
            it('Concat two string inside if formula is not working', (done: Function) => {
                const cell: CellModel = helper.getInstance().sheets[0].rows[0].cells[5];
                expect(cell.value).toBe('AppleFruit');
                expect(helper.invoke('getCell', [0, 5]).textContent).toBe('AppleFruit');
                helper.edit('D1', 'NA');
                expect(cell.value).toBe('Fruit');
                expect(helper.invoke('getCell', [0, 5]).textContent).toBe('Fruit');
                done();
            });
            it('IF formula returns incorrect result in Spreadsheet', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[0].cells[6].value).toBe('WO 8012-01-00004');
                expect(spreadsheet.sheets[0].rows[0].cells[6].formula).toBe('=IF(""=" ","","WO 8012-01-00004")');
                expect(spreadsheet.sheets[0].rows[0].cells[7].value).toBe('WO 8012-01-00004');
                expect(spreadsheet.sheets[0].rows[0].cells[7].formula).toBe('=IF(""="","WO 8012-01-00004","")');
                done();
            });
        });
        describe('EJ2-57684 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    {
                        sheets: [{
                            rows: [
                                {
                                    cells: [
                                        { value: '10', format: '#,##0.00' },
                                        { value: '10', format: '#,##0.00' },
                                        { formula: '=-(1-(1-ABS(Q21))^12)' },
                                        { formula: '=-(2-(1+3))^12' },
                                        { formula: '=-(1^12)' },
                                    ],
                                },
                            ],
                        }],
                    }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Aggregates not calculated properly for custom number formatted values', (done: Function) => {
                helper.invoke('selectRange', ['A1:B1']);
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Sum: 20.00')
                done();
            });

            it('EJ2-963802 -> Spreadsheet hangs when calculating formulas containing a negative sign combined with the power operators', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                expect(spreadsheet.sheets[0].rows[0].cells[2].formula).toBe('=-(1-(1-ABS(Q21))^12)');
                expect(spreadsheet.sheets[0].rows[0].cells[3].formula).toBe('=-(2-(1+3))^12');
                expect(spreadsheet.sheets[0].rows[0].cells[4].formula).toBe('=-(1^12)');
                expect(spreadsheet.sheets[0].rows[0].cells[2].value).toBe('0');
                expect(spreadsheet.sheets[0].rows[0].cells[3].value).toBe('4096');
                expect(spreadsheet.sheets[0].rows[0].cells[4].value).toBe('-1');
                expect(helper.invoke('getCell', [0, 2]).textContent).toBe('0');
                expect(helper.invoke('getCell', [0, 3]).textContent).toBe('4096');
                expect(helper.invoke('getCell', [0, 4]).textContent).toBe('-1');
                done();
            });
        });
        describe('EJ2-58254, EJ2-59388, EJ2-60324, EJ2-70132 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    {
                        sheets: [
                            {
                                ranges: [{ dataSource: defaultData }]
                            },
                            {
                                rows: [
                                    { cells: [{ value: '11' }]},
                                    { cells: [{ value: '22' }]},
                                    { cells: [{ value: '33' }]},
                                    { cells: [{ value: '44' }]},
                                    { cells: [{ value: '55' }]}
                                ]
                            }
                        ]
                    }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Aggregates not calculated properly for date formatted values', (done: Function) => {
                helper.invoke('selectRange', ['B2:B3']);
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Sum: 7/27/2128');
                helper.invoke('selectRange', ['C2:C3']);
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Sum: 5:31:04 PM');
                helper.invoke('selectRange', ['A2:A3']);
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Count: 2');
                helper.invoke('selectRange', ['D2:D3']);
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Sum: 30');
                helper.invoke('selectRange', ['A2:B5']);
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Sum: 167296');
                helper.invoke('selectRange', ['B2:B3']);
                helper.getElement('#' + helper.id + '_aggregate').click();
                let Element:NodeListOf<HTMLElement> = document.querySelectorAll("#spreadsheet_aggregate-popup li");
                expect(Element[0].textContent).toBe('Count: 2');
                expect(Element[2].textContent).toBe('Avg: 4/13/2014');
                expect(Element[3].textContent).toBe('Min: 2/14/2014');
                expect(Element[4].textContent).toBe('Max: 6/11/2014');
                Element[0].click();
                expect(helper.getElement('#' + helper.id + '_aggregate').textContent).toBe('Count: 2');
                done();
            });
            it('When using the dollar formula with a single argument, an error occurs', (done: Function) => {
                helper.edit('I2', '=DOLLAR(H2)');
                expect(helper.invoke('getCell', [1, 8]).textContent).toBe('$10.00');
                expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8].value)).toBe('"$10.00"');
                helper.edit('I2', '=DOLLAR(H2,3)');
                expect(helper.invoke('getCell', [1, 8]).textContent).toBe('$10.000');
                expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8].value)).toBe('"$10.000"');
                done();
            });
            it('Sum of decimal numbers with three decimal places is formatted to two decimal places', (done: Function) => {
                helper.edit('J1', '1.001');
                helper.edit('J2', '2.002');
                helper.edit('J3', '=SUM(J1:J2)');
                expect(helper.invoke('getCell', [2, 9]).textContent).toBe('3.003');
                expect(getCell(2, 9, helper.getInstance().sheets[0]).value).toBe('3.003');
                done();
            });
            it('Spreadsheet supported formulas are not working as expected', (done: Function) => {
                helper.edit('K1', '=AVERAGEIF(D2:D4, ">10", E2:E4)');
                helper.edit('K2', '=SUMIF(D2:D4, ">10", E2:E4)');
                helper.edit('M1', '=AVERAGEIF(L2:L11,">10")');
                helper.edit('M2', '=AVERAGEIF(A2:A11,"=100")');
                helper.edit('M3', '=AVERAGEIF(H2:H11, ">200")');
                helper.edit('M4', '=AVERAGEIF(G2:G11, "=test")');
                helper.edit('M5', '=AVERAGEIF(G2:G11, "")');
                helper.edit('M6', '=AVERAGEIF(A2:A11, "=Loafers")');
                helper.edit('M7', '=AVERAGEIF(Sheet1!A1:A5, "")');
                helper.edit('M8', '=AVERAGEIF(Sheet1!A1:A5, "=test")');
                helper.edit('M9', '=AVERAGEIFS(L2:L5,R2:R5,">70",S2:S5,"<90")');
                helper.edit('M10', '=AVERAGEIFS(A2:A5,P2:P5,">70",Q2:Q5,"<90")');
                helper.edit('M11', '=AVERAGEIFS(D2:D5,G2:G5,">5",H2:H5,"<25")');
                helper.edit('M12', '=AVERAGEIFS(D2:D5,G2:G5,"=test",H2:H5,"=test1")');
                helper.edit('M13', '=AVERAGEIFS(D2:D5,G2:G5,"",H2:H5,"")');
                helper.edit('M14', '=AVERAGEIFS(D2:D5,A2:A5,">70",B2:B5,"<90")');
                expect(helper.invoke('getCell', [0, 10]).textContent).toBe('22.5');
                expect(parseFloat(getCell(0, 10, helper.getInstance().sheets[0]).value)).toEqual(22.5);
                expect(helper.invoke('getCell', [1, 10]).textContent).toBe('45');
                expect(parseFloat(getCell(1, 10, helper.getInstance().sheets[0]).value)).toEqual(45);
                expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(0, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(1, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(2, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(3, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [4, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(4, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(5, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(6, 12, helper.getInstance().sheets[0]).value).toEqual('#DIV/0!');
                expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(7, 12, helper.getInstance().sheets[0]).value).toEqual('#DIV/0!');
                expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(8, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [9, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(9, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [10, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(10, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [11, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(11, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(12, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#DIV/0!');
                expect(getCell(13, 12, helper.getInstance().sheets[0]).value).toBe('#DIV/0!');
                done();
            });
        });
        describe('EJ2-49597, I327667, EJ2-53137, EJ2-51869, EJ2-51868, EJ2-47753, EJ2-49475, EJ2-56722, EJ2-48147, Ej2-54448, EJ2-68201->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }],  
                rows: [{ index: 13, cells: [{ value: '1' }] }, { cells: [{ value: '2' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '4' }] }, {cells: [{ }]}, { cells: [{ formula: '=SUM(A14:A17)' }] },
                { cells: [{ }] }, { cells: [{ value: '1'}, { value: '1'}] }, { cells:  [{ value: '2'}, { value: '1'}] },
                { cells: [{ value: '3'}, { value: '1'}] }, { cells: [{ value: '-5'},{ value: '-1'}] },
                { cells: [{ value: '-6'}, { value: '-1'}] }, { cells: [{ value: '-7'}, { value: '-1'}] },
                { cells: [{ }] }, { cells: [{ value: '1' }, { value: '1.25' }, { value: '1500' }, { formula: '=A28*C28' }, { formula: '=B28*C28' }, { formula: '=E28*A28' }] }, 
                { cells: [{ value: '1' }, { value: '' }, { value: '2000' }, { formula: '=A29*C29' }, { formula: '=B28*C29' }, { formula: '=E29*A29' }] }, 
                { cells: [{ value: '1' }, { value: '' }, { value: '1750' }, { formula: '=A30*C30' }, { formula: '=B28*C30' }, { formula: '=E30*A30' }] },
                { cells: [{ index: 5, formula: '=SUM(F21:F30)' }] }
            ],selectedRange: 'A15' } ] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy'); 
            });
            it('EJ2-49597 - Formula dependent cells not updated while clear the value using DELETE key', (done: Function) => {
                helper.triggerKeyNativeEvent(46);
                expect(helper.invoke('getCell', [14, 0]).value).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[18].cells[0].value).toBe(8);
                done();
            });
            it('I327667 - MATCH function doesnot work properly', (done: Function) => {
                helper.invoke('updateCell', [{ value: 'Jeanette Pamplin' }, 'A12']);
                helper.invoke('updateCell', [{ value: 'Jeanette Pamplin' }, 'H3']);
                helper.invoke('updateCell', [{ formula: '=Match(H3,A2:A30)' }, 'H4']);
                expect(helper.getInstance().sheets[0].rows[3].cells[7].value).toBe(11);
                done();
            });
            it('I327667 - Match formula does not throw error when finding value is not present', (done: Function) => {
                helper.invoke('updateCell', [{ value: 'A' }, 'M1']);
                helper.invoke('updateCell', [{ formula: '=Match(M1,N1:N10)' }, 'M3']);
                expect(helper.getInstance().sheets[0].rows[2].cells[12].value).toBe('#N/A');
                done();
            });
            it('EJ2-53137 - MAX function throws error->', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=MAX(K1,K10)' }, 'I1']);
                expect(helper.getInstance().sheets[0].rows[0].cells[8].formula).toBe('=MAX(K1,K10)');
                expect(helper.getInstance().sheets[0].rows[0].cells[8].value).toBe('0');
                done();
            });
            it('EJ2-51869 - Need to avoid rounding decimal values while adding decimal values->', (done: Function) => {
                helper.invoke('selectRange', ['J1:J5']);
                helper.getElement('#' + helper.id + '_number_format').click();
                helper.getElement('#' + helper.id + '_number_format-popup .e-item:nth-child(2)').click();
                helper.invoke('updateCell', [{ value: '100000.50' }, 'J1']);
                helper.invoke('updateCell', [{ value: '1.00' }, 'J2']);
                helper.invoke('updateCell', [{ formula: '=SUM(J1:J2)' }, 'J3']);
                expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toBe('=SUM(J1:J2)');
                expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('100001.5');
                done();
            });
            it('EJ2-51868 - Spreadsheet formula throws #value error->', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=(I3+I7)*-1' }, 'I2']);
                expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toBe('=(I3+I7)*-1');
                expect(helper.getInstance().sheets[0].rows[1].cells[8].value).toBe('0');
                done();
            });
            it('EJ2-47753 - Dependent cells not updated for loaded JSON using openFromJson method', (done: Function) => {
                expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('100001.5');
                helper.invoke('refresh');
                setTimeout(() => {
                    helper.invoke('selectRange', ['J2']);
                    helper.invoke('updateCell', [{ value: '2.00' }, 'J2']);
                    expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('100002.5');
                    done();
                });
            });
            it('EJ2-49475 - nested IF formula issue in spreadsheet', (done: Function) => {
                helper.invoke('selectRange', ['C21']);
                helper.invoke('updateCell', [{ formula: '=IF(SUMIF(A21:A26,"<0",B21:B26)<0,1,2)' }, 'C21']);
                expect(helper.getInstance().sheets[0].rows[20].cells[2].value).toBe('1');
                helper.invoke('updateCell', [{ value: '13' }, 'D21']);
                helper.invoke('updateCell', [{ formula: '=IF(D1="","None",IF(D1>10,"Pass","Fail"))' }, 'E21']);
                expect(helper.getInstance().sheets[0].rows[20].cells[4].value).toBe('Pass');
                done();
            });
            it('EJ2-68201 - IF formula issue with cell referred with lowerCase value', (done: Function) => {
                helper.edit('D6','true');
                helper.edit('F6','ONE');
                helper.edit('G6','TWO');
                helper.invoke('updateCell', [{ formula: '=IF(D6,F6,G6)' }, 'D10']);
                expect(helper.getInstance().sheets[0].rows[9].cells[3].value).toBe('ONE');
                done();
            });
            it('EJ2-56722 - Cascading cell values does not get updated properly for imported file->', (done: Function) => {
                expect(helper.getInstance().sheets[0].rows[30].cells[5].value).toBe('6562.5');
                helper.invoke('updateCell', [{ value: '2' }, 'A29']);
                expect(helper.getInstance().sheets[0].rows[28].cells[3].value).toBe('4000');
                expect(helper.getInstance().sheets[0].rows[28].cells[5].value).toBe('5000');
                expect(helper.getInstance().sheets[0].rows[30].cells[5].value).toBe('9062.5');
                done();
            });
            it('EJ2-48147 - Formula suggestion box not showed for last cells', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                spreadsheet.sheets[0].topLeftCell = 'A40'
                spreadsheet.dataBind();
                setTimeout(() => {
                    spreadsheet.selectRange('C42');
                    spreadsheet.startEdit();
                    const editElem: HTMLElement = helper.getCellEditorElement();
                    editElem.textContent = '=s';
                    helper.triggerKeyEvent('keyup', 83, null, null, null, editElem);
                    setTimeout(() => {
                        let popUpElem: HTMLElement = helper.getElement('.e-popup-open .e-dropdownbase');
                        expect(popUpElem.firstElementChild.childElementCount).toBe(10);
                        helper.triggerKeyNativeEvent(13);
                        done();
                    });
                });
            });
            it('Ej2-54448 - When data is save as json , values parameter are not available->', (done: Function) => {
                const json: object = { Workbook: { sheets: [{ rows: [{ cells: [{ value: '1' }] }, { cells: [{ value: '2' }] },
                { cells: [{ value: '3' }] }, { cells: [{ value: '4' }] }, { cells: [{ value: '5' }] }, 
                {index: 84, cells: [{ formula: '=SUM(A1:A5)' }] }] }],  selectedRange: 'A85'  }  }
                const spreadsheet: Spreadsheet = helper.getInstance();
                spreadsheet.openFromJson({ file: json});
                setTimeout(() => {
                    spreadsheet.sheets[0].topLeftCell = 'A80'
                    spreadsheet.dataBind();
                    setTimeout(() => {
                        expect(helper.getInstance().sheets[0].rows[84].cells[0].value).toBe(15);
                        done();
                    });
                });
            });
            it('EJ2-63297 - String concatenation formula not works properly when the formula contains space with string value->', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=A85 & "test"' }, 'A86']);
                const sheet: SheetModel = helper.getInstance().sheets[0];
                expect(sheet.rows[85].cells[0].value).toBe('15test');
                helper.invoke('updateCell', [{ formula: '=A85&"test"' }, 'A87']);
                expect(sheet.rows[86].cells[0].value).toBe('15test');
                helper.invoke('updateCell', [{ formula: '=A85 & " test"' }, 'A88']);
                expect(sheet.rows[87].cells[0].value).toBe('15 test');
                done();
            });
        });
        describe('EJ2-46382->', () => {
            const model: SpreadsheetModel = { sheets: [{ rows: [{ cells: [{ value: '1' }] }, { cells: [{ value: '2' }] }, { cells: [{ value: '3' }] }, { cells:
                [{ value: '4' }] }, { cells: [{ value: '5' }] }, { cells: [{ formula: '=SUM(A1:A5)' }] }], selectedRange: 'A5' }] };
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet(model, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            it('Formula dependent cells not updated after destroy the spreadsheet', (done: Function) => {
                helper.invoke('updateCell', [{ value: 'Formula' }, 'B1']);
                helper.invoke('destroy');
                setTimeout(() => {
                    new Spreadsheet(model, '#' + helper.id);
                    setTimeout(() => {
                        helper.invoke('updateCell', [{ value: '10' }, 'A5']);
                        expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toBe(20);
                        expect(helper.invoke('getCell', [0, 2]).textContent).toBe('');
                        done();
                    });
                });
            });
            it('Spreadsheet getting hanged while inserting SMALL formula that refers empty valued cells', (done: Function) => {
                helper.edit('D1', '=SMALL(A1:A10,5)');
                expect(helper.getInstance().sheets[0].rows[0].cells[3].formula).toBe('=SMALL(A1:A10,5)');
                expect(helper.getInstance().sheets[0].rows[0].cells[3].value).toBe(5);
                expect(helper.invoke('getCell', [0, 3]).textContent).toBe('5');
                helper.edit('A7', 'text1');
                helper.edit('A8', 'text2');
                helper.edit('A11', '0');
                helper.edit('A12', '');
                helper.edit('D2', '=SMALL(A6:A12,1)');
                expect(helper.getInstance().sheets[0].rows[1].cells[3].formula).toBe('=SMALL(A6:A12,1)');
                expect(helper.getInstance().sheets[0].rows[1].cells[3].value).toBe(0);
                expect(helper.invoke('getCell', [1, 3]).textContent).toBe('0');
                done();
            });
        });
        describe('EJ2-52160, EJ2-56672, EJ2-71484', () => {
            let rows: RowModel[];
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [{ rows: [
                        { cells: [{ }] },
                        { cells: [{ value: 'Entity 1' }, { value: '100' }, { value: '200' }, { value: '300' }] },
                        { cells: [{ value: 'Entity 1' }] },
                        { cells: [{ value: 'Entity 2' }, { value: '100' }, { value: '200' }, { value: '300' }] },
                        { cells: [{ value: 'Entity 1' }] },
                        { cells: [{ value: 'Entity 3' }, { value: '300' }, { value: '400' }, { value: '500' }] },
                        { cells: [{ value: 'Entity 4' }, { value: '1' }, { value: '3' }, { value: '5' }] },
                        { cells: [{ value: 'Entity 5' }, { value: '2' }, { value: '4' }, { value: '6' }] },
                        { cells: [{ value: 'Entity 2' }] },
                        { cells: [{ value: 'Entity 3' }] },
                        {  cells: [{ }]},
                        {  cells: [{ value: 'cat' }, { formula: '=UNIQUE(A12:A100)' }, { formula: '=IFS(B12=0,"null",TRUE,B12)' } ]},
                        {  cells: [{ value: 'dog' } ]},
                        {  cells: [{ value: 'lion' } ]},
                        {  cells: [{ value: 'tiger' } ]}
                    ] }]
                }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('EJ2-52160 - UNIQUE function on multiple columns doesnot work properly', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=UNIQUE(A1:D10)' }, 'G2']);
                expect(helper.getInstance().sheets[0].rows[1].cells[6].formula).toBe('=UNIQUE(A1:D10)');
                expect(helper.getInstance().sheets[0].rows[1].cells[6].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[1].cells[7].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[1].cells[8].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[2].cells[6].value).toBe('Entity 1');
                expect(helper.getInstance().sheets[0].rows[9].cells[6].value).toBe('Entity 3');
                expect(helper.getInstance().sheets[0].rows[9].cells[7].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[9].cells[8].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[9].cells[9].value).toBe('0');
                done();
            });
            it('EJ2-56672 - To refresh the all dependent cells for a formula that refers another formula cell->', (done: Function) => {
                rows = helper.getInstance().sheets[0].rows;
                expect(rows[11].cells[1].formula).toBe('=UNIQUE(A12:A100)');
                expect(rows[11].cells[2].formula).toBe('=IFS(B12=0,"null",TRUE,B12)');
                expect(rows[11].cells[1].value).toBe('cat');
                expect(rows[12].cells[1].value).toBe('dog');
                expect(rows[13].cells[1].value).toBe('lion');
                expect(rows[14].cells[1].value).toBe('tiger');
                expect(rows[15].cells[1].value).toBeUndefined;
                expect(rows[11].cells[2].value).toBe('cat');
                helper.invoke('autoFill', ['C13:C20', 'C12', 'Down', 'FillWithoutFormatting']);
                expect(rows[12].cells[2].value).toBe('dog');
                expect(rows[13].cells[2].value).toBe('lion');
                expect(rows[14].cells[2].value).toBe('tiger');
                expect(rows[15].cells[2].value).toBeUndefined; 
                expect(rows[16].cells[2].value).toBeUndefined;
                helper.invoke('updateCell', [{ value: 'hippo' }, 'A15']);
                expect(rows[14].cells[1].value).toBe('hippo');
                expect(rows[14].cells[2].value).toBe('hippo');
                done();
            });
            it('EJ2-56672 - Unique formula cell value throws #spill error on refresh ->', (done: Function) => {
                expect(rows[11].cells[1].formula).toBe('=UNIQUE(A12:A100)');
                expect(rows[11].cells[1].value).toBe('cat');
                helper.getInstance().refresh();
                setTimeout(() => {
                    expect(rows[11].cells[1].value).toBe('cat');
                    done();
                });
            });
            it('EJ2-71484 - The IFERROR formula returns a #Value result while performing operations on string values ->', (done: Function) => {
                helper.edit('L1', '=IFERROR(A12/A13,"ERROR")');
                helper.edit('L2', '=IFERROR(A2/B2,"ERROR")');
                helper.edit('L3', '=IFERROR(B2/A2,"ERROR")');
                helper.edit('L4', '=IFERROR(H3/H4,"ERROR")');
                helper.edit('L5', '=IFERROR(B1/B2,"ERROR")');
                helper.edit('L6', '=IFERROR(B2/B1,"ERROR")');
                helper.edit('L7', '=IFERROR(A1/B1,"ERROR")');
                helper.edit('L8', '=IFERROR(A2/B2,)');
                helper.edit('L9', '=IFERROR(A2/B2,TRUE)');
                helper.edit('L10', '=IFERROR(,"ERROR")');
                helper.edit('L11', '=IFERROR(,)');
                helper.edit('L12', '=IFERROR(10/5,)');
                helper.edit('L13', '=IFERROR(B2+C2,"ERROR")');
                helper.edit('L14', '=IFERROR(C2-B2,"ERROR")');
                helper.edit('L15', '=IFERROR(B8*C8,"ERROR")');
                helper.edit('L16', '=IFERROR(A2+B2,"ERROR")');
                helper.edit('L17', '=IFERROR(A4-B4,"ERROR")');
                helper.edit('L18', '=IFERROR(A8*B8,"ERROR")');
                helper.edit('L19', '=IFERROR(B13,"ERROR")');
                helper.edit('L20', '=IFERROR(B14,"ERROR")');
                helper.edit('L21', '=IFERROR(ADD,"ERROR")');
                helper.edit('L22', '=IFERROR("ADD","ERROR")');
                helper.edit('M1', 'B2');
                helper.edit('L23', '=IFERROR(M1,"ERROR")');
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[0].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[1].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[2].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[3].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[4].cells[11].value).toBe('0');
                    expect(helper.getInstance().sheets[0].rows[5].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[6].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[7].cells[11].value).toBe('0');
                    expect(helper.getInstance().sheets[0].rows[8].cells[11].value).toEqual('TRUE');
                    expect(helper.getInstance().sheets[0].rows[9].cells[11].value).toBe('0');
                    expect(helper.getInstance().sheets[0].rows[10].cells[11].value).toBe('0');
                    expect(helper.getInstance().sheets[0].rows[11].cells[11].value).toBe('2');
                    expect(helper.getInstance().sheets[0].rows[12].cells[11].value).toBe('300');
                    expect(helper.getInstance().sheets[0].rows[13].cells[11].value).toBe('100');
                    expect(helper.getInstance().sheets[0].rows[14].cells[11].value).toBe('8');
                    expect(helper.getInstance().sheets[0].rows[15].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[16].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[17].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[18].cells[11].value).toBe('dog');
                    expect(helper.getInstance().sheets[0].rows[19].cells[11].value).toBe('lion');
                    expect(helper.getInstance().sheets[0].rows[20].cells[11].value).toBe('ERROR');
                    expect(helper.getInstance().sheets[0].rows[21].cells[11].value).toBe('ADD');
                    expect(helper.getInstance().sheets[0].rows[22].cells[11].value).toBe('B2');
                    done();
                });
            });
        });
        describe('EJ2-42389, EJ2-49476, EJ2-49549->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [{ rows: [{ cells: [{ value: '4' }] }, { cells: [{ value: '5' }] }, { cells: [{ }] }, { cells: [{ value: '10' }] }, {cells: [{ value: '20'}] }, { cells: [{ value: '30'}] } ] }, 
                    { rows: [{ cells: [{ index: 1, value: '4' }, { index: 3, value: '1' }, { value: '3' }] }, { cells: [{ index: 1, value: '5'}, { index: 3, value: '2' }, { value: '2' }] }, 
                    { cells: [{ index: 3, value: '3' }, { value: '1'}] }, { cells: [{ value: '20'}, { index: 3, value: '2' }, { value: '5' }] }, { cells: [{ value: '202'}, { index: 3, value: '1' }, { value: '1' }] }, 
                    { cells: [{ value: '202'}, { index: 3, value: '5' }, { value: '8' }] } ] }, 
                    { rows: [{ cells: [{ formula:'=(sheet1!a2*sheet2!b2)+(sheet1!a1/sheet2!b1)' }] }] }], activeSheetIndex: 2 }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('EJ2-42389 - Cross tab formula issue', (done: Function) => {
                expect(helper.getInstance().sheets[2].rows[0].cells[0].formula).toBe('=(sheet1!a2*sheet2!b2)+(sheet1!a1/sheet2!b1)');
                expect(helper.getInstance().sheets[2].rows[0].cells[0].value).toBe('26');
                helper.invoke('updateCell', [{ value: '25' }, 'Z25']);
                helper.invoke('updateCell', [{ formula: '=sum(a1:a4)+sheet3!z25' }, 'B1']);
                expect(helper.getInstance().sheets[2].rows[0].cells[1].formula).toBe('=sum(a1:a4)+sheet3!z25');
                expect(helper.getInstance().sheets[2].rows[0].cells[1].value).toBe('51');
                helper.invoke('updateCell', [{ value: '25' }, 'B2']);
                helper.invoke('updateCell', [{ formula: '=(b2*25%)+(sheet3!Z25*1.125)' }, 'C1']);
                expect(helper.getInstance().sheets[2].rows[0].cells[2].formula).toBe('=(b2*25%)+(sheet3!Z25*1.125)');
                expect(helper.getInstance().sheets[2].rows[0].cells[2].value).toBe('34.375');
                done();
            });
            it('EJ2-49476 - improve the UI level formula enhancements for cross tab formula support in spraedsheet', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=B5+Sheet1!A5+Sheet1!A6+Sheet2!A5' }, 'A5']);
                expect(helper.getInstance().sheets[2].rows[4].cells[0].formula).toBe('=B5+Sheet1!A5+Sheet1!A6+Sheet2!A5');
                expect(helper.getInstance().sheets[2].rows[4].cells[0].value).toBe('252');
                helper.invoke('updateCell', [{ value: '444' }, 'B6']);
                helper.invoke('updateCell', [{ formula: '=B6+Sheet1!A5+Sheet1!A6' }, 'A6']);
                expect(helper.getInstance().sheets[2].rows[5].cells[0].formula).toBe('=B6+Sheet1!A5+Sheet1!A6');
                expect(helper.getInstance().sheets[2].rows[5].cells[0].value).toBe('494');
                helper.invoke('updateCell', [{ formula: '=B6+Sheet1!A5+Sheet2!A5' }, 'A7']);
                expect(helper.getInstance().sheets[2].rows[6].cells[0].formula).toBe('=B6+Sheet1!A5+Sheet2!A5');
                expect(helper.getInstance().sheets[2].rows[6].cells[0].value).toBe('666');
                helper.invoke('updateCell', [{ formula: '=(B6+Sheet1!A5)' }, 'A8']);
                expect(helper.getInstance().sheets[2].rows[7].cells[0].formula).toBe('=(B6+Sheet1!A5)');
                expect(helper.getInstance().sheets[2].rows[7].cells[0].value).toBe('464');
                helper.invoke('updateCell', [{ formula: '=(Sheet1!A5+B6)' }, 'A9']);
                expect(helper.getInstance().sheets[2].rows[8].cells[0].formula).toBe('=(Sheet1!A5+B6)');
                expect(helper.getInstance().sheets[2].rows[8].cells[0].value).toBe('464');
                helper.invoke('updateCell', [{ formula: '=(Sheet1!A5+B6)' }, 'A10']);
                expect(helper.getInstance().sheets[2].rows[9].cells[0].formula).toBe('=(Sheet1!A5+B6)');
                expect(helper.getInstance().sheets[2].rows[9].cells[0].value).toBe('464');
                helper.invoke('updateCell', [{ formula: '=Sheet2!A5+A5' }, 'A11']);
                expect(helper.getInstance().sheets[2].rows[10].cells[0].formula).toBe('=Sheet2!A5+A5');
                expect(helper.getInstance().sheets[2].rows[10].cells[0].value).toBe('454');
                helper.invoke('updateCell', [{ formula: '=Sheet1!A5+B6' }, 'A12']);
                expect(helper.getInstance().sheets[2].rows[11].cells[0].formula).toBe('=Sheet1!A5+B6');
                expect(helper.getInstance().sheets[2].rows[11].cells[0].value).toBe('464');
                done();
            });
            it('EJ2-49549 - Deleting a whole row on sheet that references other sheets changes values to #REF!-Issue 1', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=IF(SUMIF(Sheet2!$D1:$D6,">3",Sheet2!$E1:$E6)>3,1)' }, 'A14']);
                helper.invoke('updateCell', [{ formula: '=SUM(Sheet2!D1:E1)' }, 'C14']);
                helper.invoke('updateCell', [{ formula: '=IF(Sheet2!D1>0,1,0)' }, 'D14']);
                helper.invoke('updateCell', [{ value: '5' }, 'D15']);
                expect(helper.getInstance().sheets[2].rows[14].cells[3].value).toBe(5);
                helper.invoke('delete', [14, 14, 'Row']);
                setTimeout(function () {
                    expect(helper.getInstance().sheets[2].rows[13].cells[0].value).toBe('1');
                    expect(helper.getInstance().sheets[2].rows[13].cells[2].value).toBe(4);
                    expect(helper.getInstance().sheets[2].rows[13].cells[3].value).toBe('1');
                    done();
                });
            });
            it('DAYS formula returns NAN value for string formatted date value', (done: Function) => {
                helper.edit('F1', '=DAYS("7/24/1969", "7/16/1969")');
                const cellEle: HTMLElement = helper.invoke('getCell', [0, 5]);
                const cell: any = helper.getInstance().getActiveSheet().rows[0].cells[5];
                expect(cell.value).toBe(8);
                expect(cellEle.textContent).toBe('8');
                helper.edit('E1', '7/24/1969');
                helper.edit('E2', '7/16/1969');
                helper.edit('F1', '=DAYS(E1,E2)');
                expect(cell.value).toBe(8);
                expect(cellEle.textContent).toBe('8');
                helper.edit('F1', '=DAYS(8, 4)');
                expect(cell.value).toBe(4);
                expect(cellEle.textContent).toBe('4');
                helper.edit('F1', '=DAYS("18", "4")');
                expect(cell.value).toBe(14);
                expect(cellEle.textContent).toBe('14');
                helper.edit('F1', '=DAYS("2-june-2016","2-may-2016")');
                expect(cell.value).toBe(31);
                expect(cellEle.textContent).toBe('31');
                helper.edit('F1', '=DAYS("October 22","October 12")');
                expect(cell.value).toBe(10);
                expect(cellEle.textContent).toBe('10');
                helper.edit('F1', '=DAYS("October 22, 2016","October 12, 2016")');
                expect(cell.value).toBe(10);
                expect(cellEle.textContent).toBe('10');
                helper.edit('F1', '=DAYS("November 2020", "October 2020")');
                expect(cell.value).toBe(31);
                expect(cellEle.textContent).toBe('31');
                done();
            });
            it('DAY formula returns NAN value for integer formatted date value', (done: Function) => {
                helper.edit('F1', '=DAY("7/24/1969")');
                const cellEle: HTMLElement = helper.invoke('getCell', [0, 5]);
                const cell: any = helper.getInstance().getActiveSheet().rows[0].cells[5];
                expect(cell.value).toBe(24);
                expect(cellEle.textContent).toBe('24');
                helper.edit('E1', '7/24/1969');
                helper.edit('F1', '=DAY(E1)');
                expect(cell.value).toBe(24);
                expect(cellEle.textContent).toBe('24');
                helper.edit('F1', '=DAY(4)');
                expect(cell.value).toBe(4);
                expect(cellEle.textContent).toBe('4');
                helper.edit('F1', '=DAY("18")');
                expect(cell.value).toBe(18);
                expect(cellEle.textContent).toBe('18');
                helper.edit('F1', '=DAY("2-june-2016")');
                expect(cell.value).toBe(2);
                expect(cellEle.textContent).toBe('2');
                helper.edit('F1', '=DAY("October 22")');
                expect(cell.value).toBe(22);
                expect(cellEle.textContent).toBe('22');
                helper.edit('F1', '=DAY("October 22, 2016")');
                expect(cell.value).toBe(22);
                expect(cellEle.textContent).toBe('22');
                helper.edit('F1', '=DAY("November 2020")');
                expect(cell.value).toBe(1);
                expect(cellEle.textContent).toBe('1');
                done();
            });
        });
        describe('EJ2-63727 ->', () => {
            beforeEach((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [
                        { rows: [
                            { cells: [{ value: 'Residential' }, { value: '11' }] },
                            { cells: [{ value: '22', index: 1 }] },
                            { cells: [{ value: 'Residential' }, { value: '33' }] },
                            { cells: [{ value: 'New-Residential' }, { formula: '=SUM(B2:B3)' }] },
                            { index: 5, cells: [{ value: '10' }, { value: 'Residential' }] },
                            { cells: [{ value: '20' }, { value: 'Residential' }] },
                            { cells: [{ value: '30' }, { value: 'Residential' }] },
                            { cells: [{ value: '40' }, { value: 'New-Residential' }] },
                            { cells: [{ index: 5, value: '11' }, { value: '1' }] },
                            { cells: [{ index: 1, value: 'Residential' }, { value: 'New-Residential' }, { index: 5, value: '22' }, { value: '2' }] },
                            { cells: [{ index: 1, value: 'Residential' }, { value: 'New-Residential' }, { index: 5, value: '33' }, { value: '3' }] },
                            { cells: [{ index: 1, value: 'New-Residential' }, { value: 'Residential' }, { index: 5, value: '44' }, { value: '4' }] },
                            { cells: [{ index: 1, value: 'New-Residential' }, { value: 'Residential' }, { value: 'Residential' }, { value: 'New-Residential' }] },
                            { cells: [{ index: 3, value: 'New-Residential' }, { value: 'Residential' }] },
                            { cells: [{ index: 3, value: 'Residential' }, { value: 'New-Residential' }] },
                            { cells: [{ index: 3, value: 'New-Residential' }, { value: 'Residential' }] }
                        ]},
                        { rows: [
                            { cells: [{ value: 'Residential' }, { value: '1' }] },
                            { cells: [{ value: 'Residential' }, { value: '2' }] },
                            { cells: [{ value: 'Residential' }, { value: '3' }] },
                            { cells: [{ value: 'New-Residential' }, { value: '4' }] }
                        ]},
                        { rows: [
                            { cells: [{ value: 'Residential' }, { value: '111' }] },
                            { cells: [{ value: 'Residential' }, { value: '222' }] },
                            { cells: [{ value: 'Residential' }, { value: '333' }] },
                            { cells: [{ value: 'New-Residential' }, { value: '444' }] }
                        ]}
                    ] 
                }, done);
            });
            afterEach(() => {
                helper.invoke('destroy');
            });
            it('Formula ( =SUMIFS ) not working as expected when referring values in other sheets', (done: Function) => {
                helper.edit('D1', '=SUMIFS(B1:B3,A1:A3,"=Residential")');
                helper.edit('E1', '=SUMIFS(Sheet2!B1:B3,Sheet2!A1:A3,"=Residential")');
                helper.edit('F1', '=SUMIFS(Sheet3!B1:B3,Sheet2!A1:A3,"=Residential")');
                helper.edit('G1', '=SUMIFS(B1:B3,Sheet2!A1:A3,"=Residential")');
                helper.edit('H1', '=SUMIFS(Sheet3!B1:B3,A1:A3,"=Residential")');
                helper.edit('D2', '=SUMIFS(B1:B4,A1:A4,"New-Residential")');
                helper.edit('E2', '=SUMIFS(Sheet2!B1:B4,Sheet3!B1:B4,"<=333")');
                helper.edit('F2', '=SUMIFS(Sheet2!B1:B4,Sheet3!B1:B4,">=333")');
                helper.edit('G2', '=SUMIFS(B1:B4,A1:A4,"=")');
                helper.edit('H2', '=SUMIFS(B1:B4,A1:A4,"<>")');
                helper.edit('D3', '=SUMIFS(A6:A9,Sheet2!A1:A4,Sheet2!A4,Sheet3!A1:A4,Sheet3!A4)');
                helper.edit('E3', '=SUMIFS(A6:A9,Sheet2!A1:A4,Sheet2!A3,Sheet3!A1:A4,Sheet3!A3)');
                helper.edit('F3', '=SUMIFS(Sheet3!B1:B4,Sheet2!A1:A4,Sheet2!A4,A1:A4,A4)');
                helper.edit('G3', '=SUMIFS(Sheet2!B1:B4,A1:A4,A1,Sheet3!A1:A4,Sheet3!A1)');
                helper.edit('H3', '=SUMIFS(A6:A9,A1:A4,A1)');
                helper.edit('D4', '=SUMIFS(B1:B4,A6:A9,SUM(H3:I3))');
                helper.edit('E4', '=SUMIFS(F10:G13,Sheet2!A1:B4,"=R*")');
                helper.edit('F4', '=SUMIFS(F10:G13,B11:C14,B11,D14:E17,"=N*")');
                helper.edit('G4', '=SUMIFS(Sheet3!B1:C4,B11:C14,B11)');
                helper.edit('I10', '=SUMIFS(F10:G13,B11:C14,C11)');
                helper.edit('J10', '=SUMIFS(F10:G13,B11:C14,B11)');
                helper.edit('k10', '=SUMIFS(F10:G13,B11:C14,C11,D14:E17,E14)');
                helper.edit('L10', '=SUMIFS(F10:G13,B11:C14,B14,D14:E17,D14)');
                helper.edit('I11', '=AVERAGEIFS(B1:B4,A1:A4,"New-Residential")');
                helper.edit('J11', '=AVERAGEIFS(Sheet2!B1:B4,Sheet3!B1:B4,"<=333")');
                helper.edit('k11', '=AVERAGEIFS(Sheet2!B1:B4,Sheet3!B1:B4,">=333")');
                helper.edit('L11', '=AVERAGEIFS(B1:B4,A1:A4,"=")');
                helper.edit('M11', '=AVERAGEIFS(B1:B4,A1:A4,"<>")');
                helper.edit('I12', '=AVERAGEIFS(A6:A9,Sheet2!A1:A4,Sheet2!A4,Sheet3!A1:A4,Sheet3!A4)');
                helper.edit('J12', '=AVERAGEIFS(A6:A9,Sheet2!A1:A4,Sheet2!A3,Sheet3!A1:A4,Sheet3!A3)');
                helper.edit('k12', '=AVERAGEIFS(Sheet3!B1:B4,Sheet2!A1:A4,Sheet2!A4,A1:A4,A4)');
                helper.edit('L12', '=AVERAGEIFS(Sheet2!B1:B4,A1:A4,A1,Sheet3!A1:A4,Sheet3!A1)');
                helper.edit('M12', '=AVERAGEIFS(A6:A9,A1:A4,A1)');
                helper.edit('I13', '=COUNTIFS(A1:A4,"New-Residential")');
                helper.edit('J13', '=COUNTIFS(Sheet3!B1:B4,"<=333")');
                helper.edit('k13', '=COUNTIFS(Sheet3!B1:B4,">=333")');
                helper.edit('L13', '=COUNTIFS(A1:A4,"=")');
                helper.edit('M13', '=COUNTIFS(A1:A4,"<>")');
                helper.edit('I14', '=COUNTIFS(Sheet2!A1:A4,Sheet2!A4,Sheet3!A1:A4,Sheet3!A4)');
                helper.edit('J14', '=COUNTIFS(Sheet2!A1:A4,Sheet2!A3,Sheet3!A1:A4,Sheet3!A3)');
                helper.edit('k14', '=COUNTIFS(Sheet2!A1:A4,Sheet2!A4,A1:A4,A4)');
                helper.edit('L14', '=COUNTIFS(A1:A4,A1,Sheet3!A1:A4,Sheet3!A1)');
                helper.edit('M14', '=COUNTIFS(B11:C14,B11,D14:E17,D15)');
                helper.edit('I15', '=AVERAGEIFS(F10:G13,Sheet2!A1:B4,"=R*")');
                helper.edit('J15', '=AVERAGEIFS(F10:G13,B11:C14,B11,D14:E17,"=N*")');
                helper.edit('k15', '=AVERAGEIFS(Sheet3!B1:C4,B11:C14,B11)');
                helper.edit('I16', '=COUNTIFS(Sheet2!A1:B4,"=R*")');
                helper.edit('J16', '=COUNTIFS(B11:C14,B11,D14:E17,"=N*")');
                helper.edit('k16', '=COUNTIFS(Sheet3!A1:B4,"=R*")');
                expect(helper.invoke('getCell', [0, 3]).textContent).toBe('44');
                expect(helper.invoke('getCell', [0, 4]).textContent).toBe('6');
                expect(helper.invoke('getCell', [0, 5]).textContent).toBe('666');
                expect(helper.invoke('getCell', [0, 6]).textContent).toBe('66');
                expect(helper.invoke('getCell', [0, 7]).textContent).toBe('444');
                expect(helper.invoke('getCell', [1, 3]).textContent).toBe('55');
                expect(helper.invoke('getCell', [1, 4]).textContent).toBe('6');
                expect(helper.invoke('getCell', [1, 5]).textContent).toBe('7');
                expect(helper.invoke('getCell', [1, 6]).textContent).toBe('22');
                expect(helper.invoke('getCell', [1, 7]).textContent).toBe('99');
                expect(helper.invoke('getCell', [2, 3]).textContent).toBe('40');
                expect(helper.invoke('getCell', [2, 4]).textContent).toBe('60');
                expect(helper.invoke('getCell', [2, 5]).textContent).toBe('444');
                expect(helper.invoke('getCell', [2, 6]).textContent).toBe('4');
                expect(helper.invoke('getCell', [2, 7]).textContent).toBe('40');
                expect(helper.invoke('getCell', [3, 3]).textContent).toBe('55');
                expect(helper.invoke('getCell', [3, 4]).textContent).toBe('66');
                expect(helper.invoke('getCell', [3, 5]).textContent).toBe('25');
                expect(helper.invoke('getCell', [3, 6]).textContent).toBe('333');
                expect(helper.invoke('getCell', [9, 8]).textContent).toBe('80');
                expect(helper.invoke('getCell', [9, 9]).textContent).toBe('40');
                expect(helper.invoke('getCell', [9, 10]).textContent).toBe('45');
                expect(helper.invoke('getCell', [9, 11]).textContent).toBe('35');
                expect(helper.invoke('getCell', [10, 8]).textContent).toBe('55');
                expect(helper.invoke('getCell', [10, 9]).textContent).toBe('2');
                expect(helper.invoke('getCell', [10, 10]).textContent).toBe('3.5');
                expect(helper.invoke('getCell', [10, 11]).textContent).toBe('22');
                expect(helper.invoke('getCell', [10, 12]).textContent).toBe('33');
                expect(helper.invoke('getCell', [11, 8]).textContent).toBe('40');
                expect(helper.invoke('getCell', [11, 9]).textContent).toBe('20');
                expect(helper.invoke('getCell', [11, 10]).textContent).toBe('444');
                expect(helper.invoke('getCell', [11, 11]).textContent).toBe('2');
                expect(helper.invoke('getCell', [11, 12]).textContent).toBe('20');
                expect(helper.invoke('getCell', [12, 8]).textContent).toBe('1');
                expect(helper.invoke('getCell', [12, 9]).textContent).toBe('3');
                expect(helper.invoke('getCell', [12, 10]).textContent).toBe('2');
                expect(helper.invoke('getCell', [12, 11]).textContent).toBe('1');
                expect(helper.invoke('getCell', [12, 12]).textContent).toBe('3');
                expect(helper.invoke('getCell', [13, 8]).textContent).toBe('1');
                expect(helper.invoke('getCell', [13, 9]).textContent).toBe('3');
                expect(helper.invoke('getCell', [13, 10]).textContent).toBe('1');
                expect(helper.invoke('getCell', [13, 11]).textContent).toBe('2');
                expect(helper.invoke('getCell', [13, 12]).textContent).toBe('2');
                expect(helper.invoke('getCell', [14, 8]).textContent).toBe('22');
                expect(helper.invoke('getCell', [14, 9]).textContent).toBe('12.5');
                expect(helper.invoke('getCell', [14, 10]).textContent).toBe('166.5');
                expect(helper.invoke('getCell', [15, 8]).textContent).toBe('3');
                expect(helper.invoke('getCell', [15, 9]).textContent).toBe('2');
                expect(helper.invoke('getCell', [15, 10]).textContent).toBe('3');
                done();
            });
        });
        describe('EJ2-67308 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [{ 
                        rows: [
                            { cells: [{ value: 'q1' }, { formula: '=IF(1<2, "QqqQ")' }] },
                            { cells: [{ value: 'q2' }, { formula: '=IF(SUM(1,1)<3, "Trueq", "Falseq")' }] },
                            { cells: [{ value: 'q1' }, { formula: '=IF(SUM(SUM(2,2),1)<3, "(Trueq)", "(Falseq)")' }] },
                            { cells: [{ value: 'q2' }, { formula: '=COUNTIF(A1:A4,"q1")' }] }
                        ]
                    }]
                }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Parsing error occurs when the custom function argument contains "q" alphabet', (done: Function) => {
                (window as any).CustomFuntion = (str: string) => {
                    return str;
                };
                helper.invoke('addCustomFunction', ["CustomFuntion", "myfunq"]);
                let formula: string = '=myfunq("SUCCESSq")';
                helper.edit('C1', '=IF(1<2, "QqqQ")');
                helper.edit('C2', '=IF(SUM(1,1)<3, "Trueq", "Falseq")');
                helper.edit('C3', '=IF(SUM(SUM(2,2),1)<3, "(Trueq)", "(Falseq)")');
                helper.edit('C4', '=COUNTIF(A1:A4,"q1")');
                helper.edit('C5', formula);
                expect(helper.invoke('getCell', [0, 1]).textContent).toBe('QqqQ');
                expect(helper.invoke('getCell', [0, 1]).innerText).toBe('QqqQ');
                expect(helper.invoke('getCell', [0, 2]).textContent).toBe('QqqQ');
                expect(helper.invoke('getCell', [0, 2]).innerText).toBe('QqqQ');
                expect(helper.invoke('getCell', [1, 1]).textContent).toBe('Trueq');
                expect(helper.invoke('getCell', [1, 1]).innerText).toBe('Trueq');
                expect(helper.invoke('getCell', [1, 2]).textContent).toBe('Trueq');
                expect(helper.invoke('getCell', [1, 2]).innerText).toBe('Trueq');
                expect(helper.invoke('getCell', [2, 1]).textContent).toBe('(Falseq)');
                expect(helper.invoke('getCell', [2, 1]).innerText).toBe('(Falseq)');
                expect(helper.invoke('getCell', [2, 2]).textContent).toBe('(Falseq)');
                expect(helper.invoke('getCell', [2, 2]).innerText).toBe('(Falseq)');
                expect(helper.invoke('getCell', [3, 1]).textContent).toBe('2');
                expect(helper.invoke('getCell', [3, 1]).innerText).toBe('2');
                expect(helper.invoke('getCell', [3, 2]).textContent).toBe('2');
                expect(helper.invoke('getCell', [3, 2]).innerText).toBe('2');
                expect(helper.invoke('getCell', [4, 2]).textContent).toBe('"SUCCESSq"');
                expect(helper.invoke('getCell', [4, 2]).innerText).toBe('"SUCCESSq"');
                done();
            });
        });
        describe('EJ2-68534 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    { sheets: [{ rows: [{ cells: [{ formula: '=SUM(1,1)' }] }] }, { rows: [{ cells: [{ formula: '=SUM(2,2)' }] }] }, { rows: [{ cells: [{ formula: '=SUM(3,3)' }] }] }], allowEditing: false }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('When the "allowEditing" property is set to false then formula cells are rendered with a blank value', (done: Function) => {
                expect(helper.invoke('getCell', [0, 0]).textContent).toBe('2');
                expect(helper.getInstance().sheets[0].rows[0].cells[0].formula).toBe('=SUM(1,1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[0].value).toBe(2);
                helper.getInstance().activeSheetIndex = 1;
                helper.getInstance().dataBind();
                setTimeout(function () {
                    expect(helper.getInstance().activeSheetIndex).toBe(1);
                    expect(helper.invoke('getCell', [0, 0]).textContent).toBe('4');
                    expect(helper.getInstance().sheets[1].rows[0].cells[0].formula).toBe('=SUM(2,2)');
                    expect(helper.getInstance().sheets[1].rows[0].cells[0].value).toBe(4);
                    helper.getInstance().activeSheetIndex = 2;
                    helper.getInstance().dataBind();
                    setTimeout(function () {
                        expect(helper.getInstance().activeSheetIndex).toBe(2);
                        expect(helper.invoke('getCell', [0, 0]).textContent).toBe('6');
                        expect(helper.getInstance().sheets[2].rows[0].cells[0].formula).toBe('=SUM(3,3)');
                        expect(helper.getInstance().sheets[2].rows[0].cells[0].value).toBe(6);
                        done();
                    });
                });
            });
        });
        describe('EJ2-863643, EJ2-867609, EJ2-870519, EJ2-936018 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [{
                        ranges: [{ dataSource: defaultData }],
                        rows: [
                            { cells: [{ index: 8, value: 'Loafers' }] }, { cells: [{ index: 8, value: '250' }] },
                            { cells: [{ index: 8, value: '255' }] }, { cells: [{ index: 8, value: '-1000' }] }]
                    }]
                }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Formula return wrong result for negative sign referred with negative cell address value without using brackets', (done: Function) => {
                helper.edit('J1', '=IF(A9=I1,-I4*(I3-I2),0)');
                expect(helper.invoke('getCell', [0, 9]).textContent).toBe('5000');
                helper.edit('J2', '=IF(A9=I1,-I4*(-I3-I2),0)');
                expect(helper.invoke('getCell', [1, 9]).textContent).toBe('-505000');
                helper.edit('J3', '=IF(A9=I1,-I4/(I3-I2),0)');
                expect(helper.invoke('getCell', [2, 9]).textContent).toBe('200');
                helper.edit('J4', '=IF(A9=I1,-I4/(I3+I2),0)');
                expect(helper.invoke('getCell', [3, 9]).textContent).toBe('1.98019802');
                helper.edit('J5', '=IF(A9=I1,-I4*G3/(I3-I2),0)');
                expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1000');
                helper.edit('J6', '=IF(A9=I1,-I4*-G3/(I3-I2),0)');
                expect(helper.invoke('getCell', [5, 9]).textContent).toBe('-1000');
                done();
            });
            it('Formula calculation is not working properly with the combinations of negative sign and brackets', (done: Function) => {
                helper.edit('J7', '=IF(D2<E2,-(I4+G2+F3+G5+E2)/(D5),0)');
                expect(helper.invoke('getCell', [6, 9]).textContent).toBe('24.53333333');
                helper.edit('J8', '=IF(D2<E2,-(I4+G2+F3+G5+E2)/(-D5),0)');
                expect(helper.invoke('getCell', [7, 9]).textContent).toBe('-24.53333333');
                helper.edit('J9', '=IF(D2>E2,0,-(I4+G2*F3/G5+E2)/(D2))');
                expect(helper.invoke('getCell', [8, 9]).textContent).toBe('92.54545455');
                helper.edit('J10', '=IF(D2>E2,0,-(-(I4+G2*F3/G5+E2)/(D2)))');
                expect(helper.invoke('getCell', [9, 9]).textContent).toBe('-92.54545455');
                helper.edit('J11', '=IF(D2=H2,---(I4)/(F4+F6-F8)-F5,0)');
                expect(helper.invoke('getCell', [10, 9]).textContent).toBe('-297.5');
                helper.edit('J12', '=IF(D2=H2,--(I4)/(F4+F6-F8)-F5,0)');
                expect(helper.invoke('getCell', [11, 9]).textContent).toBe('-302.5');
                helper.edit('J13', '=IF(A9=I1,--I4*--G3/(I3-I2),0)');
                expect(helper.invoke('getCell', [12, 9]).textContent).toBe('-1000');
                helper.edit('J13', '=IF(A9=I1,--I4*-G3/(I3-I2),0)');
                expect(helper.invoke('getCell', [12, 9]).textContent).toBe('1000');
                done();
            });
            it('Cell values are updated directly from the data source before converted to formatted value', (done: Function) => {
                expect(helper.invoke('getCell', [2, 1]).textContent).toBe('6/11/2014');
                expect(helper.getInstance().sheets[0].rows[2].cells[1].format).toBe('m/d/yyyy');
                expect(helper.invoke('getCell', [9, 1]).textContent).toBe('7/9/2014');
                expect(helper.getInstance().sheets[0].rows[9].cells[1].format).toBe('m/d/yyyy');
                helper.edit('K1', '=DATE(1999,1,3)');
                expect(helper.invoke('getCell', [0, 10]).textContent).toBe('1/3/1999');
                helper.edit('K2', '=DATE(2024,12,09)');
                expect(helper.invoke('getCell', [1, 10]).textContent).toBe('12/9/2024');
                helper.edit('K3', '=DATE(2024,06,09)');
                expect(helper.invoke('getCell', [2, 10]).textContent).toBe('6/9/2024');
                helper.edit('K4', '=DATE(F7,G4,G8)');
                expect(helper.invoke('getCell', [3, 10]).textContent).toBe('7/3/2700');
                helper.edit('K5', '=DATE(F6,G5,G3)');
                expect(helper.invoke('getCell', [4, 10]).textContent).toBe('11/5/2200');
                helper.edit('K6', '=DATE(F4,G9,G5)');
                expect(helper.invoke('getCell', [5, 10]).textContent).toBe('6/11/2200');
                done();
            });
            it('Wrong number of arguments issue occurs with the formula containing negative sign in nested formula.', (done: Function) => {
                helper.edit('M4', 'Hello');
                helper.edit('K7', '=IF(K3="YES",K3,IF(L5="YES",L5,IF(M4="HELLO", MAX(F13,-(SUM(F8,F9,F11,F12)-SUM(F18:F20))),7)))');
                expect(helper.invoke('getCell', [6, 10]).textContent).toBe('-1010');
                helper.edit('K8', '=IF(K3="YES",K3,IF(L5="YES",L5,IF(M3="HELLO", MAX(F13,-(SUM(F8,F9,F11,F12)-SUM(F18:F20))),7)))');
                expect(helper.invoke('getCell', [7, 10]).textContent).toBe('7');
                helper.edit('K9', '=MAX(F3,-(SUM(F6,F7,F8,F9)-SUM(F10:F11)))');
                expect(helper.invoke('getCell', [8, 10]).textContent).toBe('600');
                helper.edit('K10', '=SUM(H2,-(COUNT(G2:G11)))');
                expect(helper.invoke('getCell', [9, 10]).textContent).toBe('0');
                helper.edit('K11', '=SUM(G3,-(COUNT(G1:G11)))');
                expect(helper.invoke('getCell', [10, 10]).textContent).toBe('-5');
                helper.edit('K12', '=MAX(-(SUM(F6,F7,F8,F9)-SUM(F10:F11)),F2)');
                expect(helper.invoke('getCell', [11, 10]).textContent).toBe('200');
                helper.edit('K13', '=SUM((-MAX(G2:G5)+MIN(H2:H5)),E5,-(E2+E3))');
                expect(helper.invoke('getCell', [12, 10]).textContent).toBe('-31');
                done();
            });
        });
        describe('EJ2-865555 - Formula with logical operators and Arithmatic operator throws #DIV/0! error ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({
                    sheets: [{
                        ranges: [{ dataSource: defaultData }],
                        rows: [
                            { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '1' }] }]
                    }]
                }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Nested IF formula with logical operators throws #DIV/0! error', (done: Function) => {
                helper.edit('J1', '=IF(H2=0,0,IF(OR(D2=10,D3=20),IF(F2>SUM(E2:E5)/E10,10,20),IF(1=1,H3*(I2/I1),SUM(G2:G5))))');
                expect(helper.invoke('getCell', [0, 9]).textContent).toBe('10');
                helper.edit('J2', '=IF(1=1,H3*(I2/I1),SUM(G2:G5))');
                expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J3', '=IF(F2>SUM(E2:E5)/E10,10,20)');
                expect(helper.invoke('getCell', [2, 9]).textContent).toBe('10');
                helper.edit('J4', '=IF(F2>SUM(E2:E5)/E10,SUM(D2/A2),20)');
                expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#VALUE!');
                done();
            });
            it('Checking Logical operators with #DIV/0 error', (done: Function) => {
                helper.edit('J5', '=H3*(I2/I1)=D2');
                expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J6', '=H3*(I2/I1)<>D2');
                expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J7', '=H3*(I2/I1)<=D2');
                expect(helper.invoke('getCell', [6, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J8', '=H3*(I2/I1)>=D2');
                expect(helper.invoke('getCell', [7, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J9', '=H3*(I2/I1)<D2');
                expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J10', '=H3*(I2/I1)>D2');
                expect(helper.invoke('getCell', [9, 9]).textContent).toBe('#DIV/0!');
                done();
            });
            it('Checking Arithmatic operators with #DIV/0 error', (done: Function) => {
                helper.edit('J11', '=H3*(I2/I1)+G2');
                expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J12', '=H3*(I2*I1)+G2');
                expect(helper.invoke('getCell', [11, 9]).textContent).toBe('1');
                helper.edit('J13', '=H3*(I2+I1)+G2');
                expect(helper.invoke('getCell', [12, 9]).textContent).toBe('51');
                helper.edit('J14', '=H3*(I2-I1)+G2');
                expect(helper.invoke('getCell', [13, 9]).textContent).toBe('51');
                helper.edit('J15', '=H3/(I2/I1)+G2');
                expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J16', '=H3+(I2/I1)+G2');
                expect(helper.invoke('getCell', [15, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J17', '=H3-(I2/I1)+G2');
                expect(helper.invoke('getCell', [16, 9]).textContent).toBe('#DIV/0!');
                helper.edit('J18', '=H3*(I2/I1)*G2');
                expect(helper.invoke('getCell', [17, 9]).textContent).toBe('#DIV/0!');
                done();
            });
            it('Checking Logical operators with #VALUE! error', (done: Function) => {
                helper.edit('K1', '=H3*(A3/I1)=D2');
                expect(helper.invoke('getCell', [0, 10]).textContent).toBe('#VALUE!');
                helper.edit('K2', '=H3*(A3/I1)<>D2');
                expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
                helper.edit('K3', '=H3*(A3/I1)<=D2');
                expect(helper.invoke('getCell', [2, 10]).textContent).toBe('#VALUE!');
                helper.edit('K4', '=H3*(A3/I1)>=D2');
                expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#VALUE!');
                helper.edit('K5', '=H3*(A3/I1)<D2');
                expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#VALUE!');
                helper.edit('K6', '=H3*(A3/I1)>D2');
                expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#VALUE!');
                done();
            });
            it('Checking Arithmatic operators with #VALUE! error', (done: Function) => {
                helper.edit('K7', '=H3*(A3/I1)+G2');
                expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#VALUE!');
                helper.edit('K8', '=H3*(A3*I1)+G2');
                expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#VALUE!');
                helper.edit('K9', '=H3*(A3+I1)+G2');
                expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#VALUE!');
                helper.edit('K10', '=H3*(A3-I1)+G2');
                expect(helper.invoke('getCell', [9, 10]).textContent).toBe('#VALUE!');
                helper.edit('K11', '=H3/(A3/I1)+G2');
                expect(helper.invoke('getCell', [10, 10]).textContent).toBe('#VALUE!');
                helper.edit('K12', '=H3+(A3/I1)+G2');
                expect(helper.invoke('getCell', [11, 10]).textContent).toBe('#VALUE!');
                helper.edit('K13', '=H3-(A3/I1)+G2');
                expect(helper.invoke('getCell', [12, 10]).textContent).toBe('#VALUE!');
                helper.edit('K14', '=H3*(A3/I1)*G2');
                expect(helper.invoke('getCell', [13, 10]).textContent).toBe('#VALUE!');
                done();
            });
            it('Checking & and ^ operators with Error Values', (done: Function) => {
                helper.edit('K15', '=H3&(I2/I1)');
                expect(helper.invoke('getCell', [14, 10]).textContent).toBe('#DIV/0!');
                helper.edit('K16', '=H3&(A3/I1)');
                expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#VALUE!');
                helper.edit('K17', '=H3^(I2/I1)');
                expect(helper.invoke('getCell', [16, 10]).textContent).toBe('#DIV/0!');
                helper.edit('K18', '=H3^(A3/I1)');
                expect(helper.invoke('getCell', [17, 10]).textContent).toBe('#VALUE!');
                done();
            });
        });
        describe('EJ2-885263, EJ2-888011, EJ2-888038, EJ2-890143, EJ2-935939 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('The ROUNDDOWN function returns the wrong result when performing actions with decimal values->', (done: Function) => {
                helper.edit('A1', '=ROUNDDOWN(62427.81-41400.08,2)');
                expect(helper.invoke('getCell', [0, 0]).textContent).toBe('21027.73');
                helper.edit('A2', '=ROUNDDOWN(62427.91+41400.10,2)');
                expect(helper.invoke('getCell', [1, 0]).textContent).toBe('103828.01');
                helper.edit('A3', '=ROUNDDOWN(62427.881-41400.028,3)');
                expect(helper.invoke('getCell', [2, 0]).textContent).toBe('21027.853');
                helper.edit('A4', '=ROUNDDOWN(62427.001+41400.038,3)');
                expect(helper.invoke('getCell', [3, 0]).textContent).toBe('103827.039');
                helper.edit('A5', '=ROUNDDOWN(62427.0091-41400.1010,4)');
                expect(helper.invoke('getCell', [4, 0]).textContent).toBe('21026.9081');
                helper.edit('A6', '=ROUNDDOWN(62427.0001/21400.9999,3)');
                expect(helper.invoke('getCell', [5, 0]).textContent).toBe('2.917');
                helper.edit('A7', '=ROUNDDOWN(62427.10101-21400.91919,5)');
                expect(helper.invoke('getCell', [6, 0]).textContent).toBe('41026.18182');
                done();
            });
            it('The ROUND, ROUNDUP function returns the wrong result when performing actions with decimal values .499->', (done: Function) => {
                helper.edit('A11', '=ROUND(10.30499126239,2)');
                expect(helper.invoke('getCell', [10, 0]).textContent).toBe('10.3');
                helper.edit('A12', '=ROUND(10.30134499126239,5)');
                expect(helper.invoke('getCell', [11, 0]).textContent).toBe('10.30134');
                helper.edit('A13', '=ROUND(10.301349499126239,6)');
                expect(helper.invoke('getCell', [12, 0]).textContent).toBe('10.301349');
                helper.edit('A14', '=ROUNDDOWN(0.9999998,2)');
                expect(helper.invoke('getCell', [13, 0]).textContent).toBe('0.99');
                helper.edit('A15', '=ROUNDUP(0.720000000001,2)');
                expect(helper.invoke('getCell', [14, 0]).textContent).toBe('0.73');
                done();
            }); 
            it('When copy-pasting the formula with & operator is not getting updated properly ->', (done: Function) => {
                helper.edit('I8', '=A8&"-"&D8');
                expect(helper.invoke('getCell', [7, 8]).textContent).toBe('Running Shoes-20');
                helper.invoke('copy', ['I8']).then(() => {
                    helper.invoke('paste', ['I9']);
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=A9&"-"&D9');
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].value).toBe('Loafers-31');
                    done();
                });
            });
            it('Cell reference is not updated properly while copy-pasting the formula with extra space before the cell reference->', (done: Function) => {
                helper.edit('I8', '=CONCATENATE(A8, D8)');
                expect(helper.invoke('getCell', [7, 8]).textContent).toBe('Running Shoes20');
                helper.invoke('copy', ['I8']).then(() => {
                    helper.invoke('paste', ['I9']);
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=CONCATENATE(A9, D9)');
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].value).toBe('Loafers31');
                    done();
                });
            });
            it('Cell reference is not updated properly while copy-pasting the formula with extra space after the cell reference ->', (done: Function) => {
                helper.edit('I8', '=CONCATENATE(A8,D8  )');
                expect(helper.invoke('getCell', [7, 8]).textContent).toBe('Running Shoes20');
                helper.invoke('copy', ['I8']).then(() => {
                    helper.invoke('paste', ['I9']);
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=CONCATENATE(A9,D9  )');
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].value).toBe('Loafers31');
                    done();
                });
            });
            it('Cell reference is not updated properly while copy-pasting the formula with extra space around the cell reference ->', (done: Function) => {
                helper.edit('I8', '=CONCATENATE( A8 , D8 )');
                expect(helper.invoke('getCell', [7, 8]).textContent).toBe('Running Shoes20');
                helper.invoke('copy', ['I8']).then(() => {
                    helper.invoke('paste', ['I9']);
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=CONCATENATE( A9 , D9 )');
                    expect(helper.getInstance().sheets[0].rows[8].cells[8].value).toBe('Loafers31');
                    done();
                });
            });
            it('Checking #NAME error issue if the formula contains the defined name with underscore(_) cases', (done: Function) => {
                helper.getInstance().addDefinedName({ name: 'net_Income', refersTo: 'H2' });
                helper.edit('J2', '=net_Income+SUM(H3:H5)');
                expect(helper.getInstance().sheets[0].rows[1].cells[9].formula).toEqual('=net_Income+SUM(H3:H5)');
                expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toEqual('154');
                done();
            });
        });
        describe('EJ2-921559 -> Incorrect expression results when comparing negative values precedes with operators->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Checking expression with negative sign and comparison operator with cell references as alphabets', (done: Function) => {
                helper.edit('I1', '=A1>-1');
                expect(helper.getInstance().sheets[0].rows[0].cells[8].value).toBe('TRUE');
                helper.edit('I2', '=A1<-1');
                expect(helper.getInstance().sheets[0].rows[1].cells[8].value).toBe('FALSE');
                helper.edit('I3', '=A1>=-1');
                expect(helper.getInstance().sheets[0].rows[2].cells[8].value).toBe('TRUE');
                helper.edit('I4', '=A1<=-1');
                expect(helper.getInstance().sheets[0].rows[3].cells[8].value).toBe('FALSE');
                helper.edit('I5', '=A1<>-1');
                expect(helper.getInstance().sheets[0].rows[4].cells[8].value).toBe('TRUE');
                helper.edit('I6', '=A1<>1');
                expect(helper.getInstance().sheets[0].rows[5].cells[8].value).toBe('TRUE');
                done();
            });
            it('Checking expression with negative sign and comparison operator with cell references as number', (done: Function) => {
                helper.edit('H2', '-1');
                helper.edit('J1', '=H2>-1');
                expect(helper.getInstance().sheets[0].rows[0].cells[9].value).toBe('FALSE');
                helper.edit('J2', '=H2<-1');
                expect(helper.getInstance().sheets[0].rows[1].cells[9].value).toBe('FALSE');
                helper.edit('J3', '=H2>=-1');
                expect(helper.getInstance().sheets[0].rows[2].cells[9].value).toBe('TRUE');
                helper.edit('J4', '=H2<=-1');
                expect(helper.getInstance().sheets[0].rows[3].cells[9].value).toBe('TRUE');
                helper.edit('J5', '=H2<>-1');
                expect(helper.getInstance().sheets[0].rows[4].cells[9].value).toBe('FALSE');
                helper.edit('J6', '=H2<>1');
                expect(helper.getInstance().sheets[0].rows[5].cells[9].value).toBe('TRUE');
                done();
            });
            it('Checking expression with negative sign with cell references', (done: Function) => {
                helper.edit('J7', '=A2>-H2');
                expect(helper.getInstance().sheets[0].rows[6].cells[9].value).toBe('TRUE');
                helper.edit('J8', '=A2>H2');
                expect(helper.getInstance().sheets[0].rows[7].cells[9].value).toBe('TRUE');
                helper.edit('J9', '=A2<-H2');
                expect(helper.getInstance().sheets[0].rows[8].cells[9].value).toBe('FALSE');
                helper.edit('J10', '=A2<H2');
                expect(helper.getInstance().sheets[0].rows[9].cells[9].value).toBe('FALSE');
                done();
            });
        });
        describe('EJ2-946729 ->', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Spreadsheet becomes unresponsive when using improper column and row referencs->', (done: Function) => {
                helper.edit('A1', '=SUMIF(HELLOWORLDS23231:HELLOWORLDS23234,H1,H2:H5)');
                expect(helper.invoke('getCell', [0, 0]).textContent).toBe('#NAME?');
                helper.edit('A2', '=AVERAGEIF(HELLOWORLDS23231:HELLOWORLDS23234,H1,H2:H5)');
                expect(helper.invoke('getCell', [1, 0]).textContent).toBe('#NAME?');
                helper.edit('A3', '=SUMPRODUCT(HELLOWORLDS23231:HELLOWORLDS23234)');
                expect(helper.invoke('getCell', [2, 0]).textContent).toBe('#NAME?');
                helper.edit('A4', '=LOOKUP(E11,HELLOWORLDS23231:HELLOWORLDS23234,F5:F11)');
                expect(helper.invoke('getCell', [3, 0]).textContent).toBe('#NAME?');
                helper.edit('A5', '=MATCH(E11,HELLOWORLDS23231:HELLOWORLDS23234,1)');
                expect(helper.invoke('getCell', [4, 0]).textContent).toBe('#NAME?');
                helper.edit('A6', '=IF(E11>12,HELLOWORLDS23231:HELLOWORLDS23234,HELLOWORLDS23231:HELLOWORLDS23237)');
                expect(helper.invoke('getCell', [5, 0]).textContent).toBe('#NAME?');
                helper.edit('A7', '=IFS(F11>10,HELLOWORLDS23231:HELLOWORLDS23234,G11=9,HELLOWORLDS23231:HELLOWORLDS23237)');
                expect(helper.invoke('getCell', [6, 0]).textContent).toBe('#NAME?');
                done();
            });
        });
    });
    describe('EJ2-917774, EJ2-948832, EJ2-951146 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('#VALUE error occurs while updating the formula dependent cell with formatted value', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.numberFormat('0.00%', 'D2:D11');
            helper.edit('D12', '=SUM(D2:D11)');
            expect(spreadsheet.sheets[0].rows[11].cells[3].value).toBe(277);
            expect(spreadsheet.sheets[0].rows[11].cells[3].formula).toBe('=SUM(D2:D11)');
            expect(spreadsheet.sheets[0].rows[11].cells[3].formattedText).toBe('27700.00%');
            expect(spreadsheet.sheets[0].rows[11].cells[3].format).toBe('0.00%');
            helper.edit('D2', '10%');
            expect(spreadsheet.sheets[0].rows[11].cells[3].value).toBe('267.1');
            expect(spreadsheet.sheets[0].rows[11].cells[3].formattedText).toBe('26710.00%');
            helper.edit('D3', '0%');
            expect(spreadsheet.sheets[0].rows[11].cells[3].value).toBe('247.1');
            expect(spreadsheet.sheets[0].rows[11].cells[3].formattedText).toBe('24710.00%');
            helper.edit('D4', '20%');
            expect(spreadsheet.sheets[0].rows[11].cells[3].value).toBe('227.3');
            expect(spreadsheet.sheets[0].rows[11].cells[3].formattedText).toBe('22730.00%');
            helper.edit('D5', '100%');
            expect(spreadsheet.sheets[0].rows[11].cells[3].value).toBe('213.3');
            expect(spreadsheet.sheets[0].rows[11].cells[3].formattedText).toBe('21330.00%');
            spreadsheet.numberFormat('$#,##0.00', 'E2:E11');
            helper.edit('E12', '=SUM(E2:E11)');
            expect(spreadsheet.sheets[0].rows[11].cells[4].value).toBe(175);
            expect(spreadsheet.sheets[0].rows[11].cells[4].formula).toBe('=SUM(E2:E11)');
            expect(spreadsheet.sheets[0].rows[11].cells[4].formattedText).toBe('$175.00');
            expect(spreadsheet.sheets[0].rows[11].cells[4].format).toBe('$#,##0.00');
            helper.edit('E2', '$10');
            expect(spreadsheet.sheets[0].rows[11].cells[4].value).toBe(165);
            expect(spreadsheet.sheets[0].rows[11].cells[4].formattedText).toBe('$165.00');
            helper.edit('E3', '$10');
            expect(spreadsheet.sheets[0].rows[11].cells[4].value).toBe(145);
            expect(spreadsheet.sheets[0].rows[11].cells[4].formattedText).toBe('$145.00');
            helper.edit('E4', '$10');
            expect(spreadsheet.sheets[0].rows[11].cells[4].value).toBe(140);
            expect(spreadsheet.sheets[0].rows[11].cells[4].formattedText).toBe('$140.00');
            helper.edit('E5', '$10');
            expect(spreadsheet.sheets[0].rows[11].cells[4].value).toBe(130);
            expect(spreadsheet.sheets[0].rows[11].cells[4].formattedText).toBe('$130.00');
            spreadsheet.numberFormat('0%', 'G2:G11');
            helper.edit('G12', '=SUM(G2:G11)');
            expect(spreadsheet.sheets[0].rows[11].cells[6].value).toBe(77);
            expect(spreadsheet.sheets[0].rows[11].cells[6].formula).toBe('=SUM(G2:G11)');
            expect(spreadsheet.sheets[0].rows[11].cells[6].formattedText).toBe('7700%');
            expect(spreadsheet.sheets[0].rows[11].cells[6].format).toBe('0%');
            helper.edit('G2', '100.45%');
            expect(spreadsheet.sheets[0].rows[1].cells[6].value).toBe('1.0045');
            expect(spreadsheet.sheets[0].rows[1].cells[6].formattedText).toBe('100%');
            expect(spreadsheet.sheets[0].rows[1].cells[6].format).toBe('0%');
            expect(spreadsheet.sheets[0].rows[1].cells[6].format).not.toBe('0.00%');
            helper.edit('G3', '100.30%');
            expect(spreadsheet.sheets[0].rows[2].cells[6].value).toBe('1.003');
            expect(spreadsheet.sheets[0].rows[2].cells[6].formattedText).toBe('100%');
            expect(spreadsheet.sheets[0].rows[2].cells[6].format).toBe('0%');
            expect(spreadsheet.sheets[0].rows[2].cells[6].format).not.toBe('0.00%');
            expect(spreadsheet.sheets[0].rows[11].cells[6].value).toBe('73.0075');
            expect(spreadsheet.sheets[0].rows[11].cells[6].formattedText).toBe('7301%');
            expect(spreadsheet.sheets[0].rows[11].cells[6].format).toBe('0%');
            done();
        });

        it('Handled Match Formula cases', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            helper.edit('I1', '=MATCH("Feb",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            helper.edit('I2', '=MATCH("Jun",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            helper.edit('I3', '=MATCH("Sep",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            helper.edit('I4', '=MATCH("October",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            helper.edit('I5', '=MATCH("Dec",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            expect(spreadsheet.sheets[0].rows[0].cells[8].value).toBe(2);
            expect(spreadsheet.sheets[0].rows[0].cells[8].formula).toBe('=MATCH("Feb",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            expect(spreadsheet.sheets[0].rows[1].cells[8].value).toBe(6);
            expect(spreadsheet.sheets[0].rows[1].cells[8].formula).toBe('=MATCH("Jun",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            expect(spreadsheet.sheets[0].rows[2].cells[8].value).toBe(9);
            expect(spreadsheet.sheets[0].rows[2].cells[8].formula).toBe('=MATCH("Sep",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            expect(spreadsheet.sheets[0].rows[3].cells[8].value).toBe('#N/A');
            expect(spreadsheet.sheets[0].rows[3].cells[8].formula).toBe('=MATCH("October",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            expect(spreadsheet.sheets[0].rows[4].cells[8].value).toBe(12);
            expect(spreadsheet.sheets[0].rows[4].cells[8].formula).toBe('=MATCH("Dec",{"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"},0)');
            done();
        });

        it('Handled #Value error caused by improper concatenation in nested formula', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            helper.edit('J1', '2017');
            helper.edit('J2', '2019');
            helper.edit('J3', '2020');
            helper.edit('J4', '2025');
            helper.invoke('numberFormat', ['mm-dd-yyyy', 'J5:J8']);
            helper.edit('J5', '=EOMONTH(DATEVALUE(IF(AM$2="Q1",3,IF(OR(AM$2="Q2",AM$2="H1"),6,IF(AM$2="Q3",9,12)))&"/1/"&J$1),+IF(AM$2<>"CY",-12+5,0))');
            helper.edit('J6', '=EOMONTH(DATEVALUE(IF(AM$2="Q1",3,IF(OR(AM$2="Q2",AM$2="H1"),6,IF(AM$2="Q3",9,12)))&"/1/"&J$2),+IF(AM$2<>"CY",-12+5,0))');
            helper.edit('J7', '=EOMONTH(DATEVALUE(IF(AM$2="Q1",3,IF(OR(AM$2="Q2",AM$2="H1"),6,IF(AM$2="Q3",9,12)))&"/1/"&J$3),+IF(AM$2<>"CY",-12+5,0))');
            helper.edit('J8', '=EOMONTH(DATEVALUE(IF(AM$2="Q1",3,IF(OR(AM$2="Q2",AM$2="H1"),6,IF(AM$2="Q3",9,12)))&"/1/"&J$4),+IF(AM$2<>"CY",-12+5,0))');
            expect(spreadsheet.sheets[0].rows[4].cells[9].value).toBe('42886');
            expect(spreadsheet.sheets[0].rows[5].cells[9].value).toBe('43616');
            expect(spreadsheet.sheets[0].rows[6].cells[9].value).toBe('43982');
            expect(spreadsheet.sheets[0].rows[7].cells[9].value).toBe('45808');
            expect(spreadsheet.sheets[0].rows[4].cells[9].formattedText).toBe('05-31-2017');
            expect(spreadsheet.sheets[0].rows[5].cells[9].formattedText).toBe('05-31-2019');
            expect(spreadsheet.sheets[0].rows[6].cells[9].formattedText).toBe('05-31-2020');
            expect(spreadsheet.sheets[0].rows[7].cells[9].formattedText).toBe('05-31-2025');
            done();
        });

        it('Double quotes not handled correctly when using & operator for string concatenation', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            helper.edit('I1', 'AAA');
            helper.edit('I2', 'BBB');
            helper.edit('I3', '=I1 & " " & I2');
            expect(spreadsheet.sheets[0].rows[2].cells[8].value).toBe('AAA BBB');
            expect(spreadsheet.sheets[0].rows[2].cells[8].value).not.toBe('AAA" "BBB');
            expect(spreadsheet.sheets[0].rows[2].cells[8].formula).toBe('=I1 & " " & I2');
            helper.edit('I4', '=I1 & " " & IF(I2="XXX","E",I2)');
            expect(spreadsheet.sheets[0].rows[3].cells[8].value).toBe('AAA BBB');
            expect(spreadsheet.sheets[0].rows[3].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[3].cells[8].formula).toBe('=I1 & " " & IF(I2="XXX","E",I2)');
            helper.edit('I5', '=I1 & " " & IF(I2="BBB","E",I2)');
            expect(spreadsheet.sheets[0].rows[4].cells[8].value).toBe('AAA E');
            expect(spreadsheet.sheets[0].rows[4].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[4].cells[8].formula).toBe('=I1 & " " & IF(I2="BBB","E",I2)');
            helper.edit('I6', '=IF(I2="", I1, I1 & " " & I2)');
            expect(spreadsheet.sheets[0].rows[5].cells[8].value).toBe('AAA BBB');
            expect(spreadsheet.sheets[0].rows[5].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[5].cells[8].formula).toBe('=IF(I2="", I1, I1 & " " & I2)');
            helper.edit('I7', '=I1 & " " & IF(I2="kg", "Kilograms", "Pounds")');
            expect(spreadsheet.sheets[0].rows[6].cells[8].value).toBe('AAA Pounds');
            expect(spreadsheet.sheets[0].rows[6].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[6].cells[8].formula).toBe('=I1 & " " & IF(I2="kg", "Kilograms", "Pounds")');
            helper.edit('I8', '="Name: " & I1 & IF(I2="", "", " (" & I2 & ")")');
            expect(spreadsheet.sheets[0].rows[7].cells[8].value).toBe('Name: AAA (BBB)');
            expect(spreadsheet.sheets[0].rows[7].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[7].cells[8].formula).toBe('="Name: " & I1 & IF(I2="", "", " (" & I2 & ")")');
            helper.edit('I9', '="Grade: " & IF(I1>=90, "A", IF(I1>=80, "B", IF(I1>=70, "C", "Fail"))) & " - Score: " & I1');
            expect(spreadsheet.sheets[0].rows[8].cells[8].value).toBe('Grade: A - Score: AAA');
            expect(spreadsheet.sheets[0].rows[8].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[8].cells[8].formula).toBe('="Grade: " & IF(I1>=90, "A", IF(I1>=80, "B", IF(I1>=70, "C", "Fail"))) & " - Score: " & I1');
            helper.edit('I10', '=IF(I1="", "", I1 & " | " & IF(I2="", "", I2))');
            expect(spreadsheet.sheets[0].rows[9].cells[8].value).toBe('AAA | BBB');
            expect(spreadsheet.sheets[0].rows[9].cells[8].value).not.toBe('#NAME');
            expect(spreadsheet.sheets[0].rows[9].cells[8].formula).toBe('=IF(I1="", "", I1 & " | " & IF(I2="", "", I2))');
            done();
        });
    });
    describe('Stability ->', () => {
        describe('SUM Formula', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    {
                        sheets: [
                            {
                                ranges: [{ dataSource: defaultData }]
                            }, {}
                        ]
                    }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Sum basic', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: 5 }, 'I1']);
                helper.invoke('updateCell', [{ value: 5 }, 'I2']);
                helper.invoke('updateCell', [{ formula: '=SUM(I1:I2)' }, 'I3']);
                helper.invoke('updateCell', [{ formula: '=I3' }, 'J3']);
                helper.invoke('updateCell', [{ formula: '=I3+I2' }, 'K3']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(10);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(10);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[10].value)).toEqual(15);
                done();
            });
            it('Sum refersh', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: 10 }, 'I1']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(15);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(15);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[10].value)).toEqual(20);
                done();
            });
            it('Sum with text', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: "spreadsheet" }, 'I1']);
                helper.invoke('updateCell', [{ formula: '=SUM(I1:I2)' }, 'I3']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(5);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(5);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[10].value)).toEqual(10);
                done();
            });
            it('Sum with all text', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: "spreadsheet" }, 'I2']);
                helper.invoke('updateCell', [{ formula: '=SUM(I1:I2)' }, 'I3']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(0);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(0);
                done();
            });
            it('Nested formula', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: "spreadsheet" }, 'I2']);
                helper.invoke('updateCell', [{ formula: '=SUM(D2:E7,SUM(D2:D7))' }, 'I7']);
                helper.invoke('updateCell', [{ formula: '=I7' }, 'I8']);
                expect(parseInt(spreadsheet.sheets[0].rows[6].cells[8].value)).toEqual(385);
                expect(parseInt(spreadsheet.sheets[0].rows[7].cells[8].value)).toEqual(385);
                done();
            });
            it('Cell reference with other sheet', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: 5 }, 'L1']);
                helper.invoke('updateCell', [{ value: 5 }, 'L2']);
                helper.invoke('updateCell', [{ formula: '=SUM(L1:L2)' }, 'L3']);
                helper.invoke('updateCell', [{ formula: '=L3' }, 'L4']);
                helper.invoke('goTo', ['Sheet2!A2']);
                setTimeout(function () {
                    helper.invoke('updateCell', [{ formula: '=Sheet1!L3' }, 'A3']);
                    expect(parseInt(spreadsheet.sheets[1].rows[2].cells[0].value)).toEqual(10);
                    helper.invoke('updateCell', [{ value: 15 }, 'Sheet1!L1']);
                    expect(parseInt(spreadsheet.sheets[1].rows[2].cells[0].value)).toEqual(20);
                    done();
                });
            });
        })
        describe('SUMIF Formula', () => {
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet(
                    {
                        sheets: [
                            {
                                ranges: [{ dataSource: defaultData }]
                            }, {}
                        ]
                    }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Sumif basic', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ formula: '=SUMIF(D2:D7,">10")' }, 'I3']);
                helper.invoke('updateCell', [{ formula: '=I3' }, 'J3']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(125);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(125);
                done();
            });
            it('Sumif refersh', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: 30 }, 'D2']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(155);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(155);
                done();
            });
            it('Sumif with text', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ value: "spreadsheet" }, 'D3']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(135);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(135);
                done();
            });
            it('Sumif with all text', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('updateCell', [{ formula: '=SUM(D4:D6)' }, 'D7']);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[8].value)).toEqual(160);
                expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(160);
                done();
            });
            it('Cell reference with other sheet', (done: Function) => {
                const spreadsheet: Spreadsheet = helper.getInstance();
                helper.invoke('goTo', ['Sheet2!A2']);
                setTimeout(function () {
                    helper.invoke('updateCell', [{ formula: '=Sheet1!I3' }, 'A3']);
                    expect(parseInt(spreadsheet.sheets[1].rows[2].cells[0].value)).toEqual(160);
                    helper.invoke('updateCell', [{ formula: '=Sheet2!A3' }, 'A4']);
                    expect(parseInt(spreadsheet.sheets[1].rows[2].cells[0].value)).toEqual(160);
                    done();
                });
            });
        });
        describe('Checking formula with culture-specific separator', () => {
            let spreadsheet: any; let sheet: any; let cell: any; let cellEle: Element;
            beforeAll((done: Function) => {
                helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }], listSeparator: ';' }, done);
            });
            afterAll(() => {
                helper.invoke('destroy');
            });
            it('Default formula with list separator', (done: Function) => {
                spreadsheet = helper.getInstance();
                sheet = spreadsheet.sheets[0];
                helper.invoke('updateCell', [{ formula: '=PRODUCT(D2;D3)' }, 'D12']);
                cell = sheet.rows[11].cells[3];
                expect(cell.value).toBe('200');
                cellEle = helper.invoke('getCell', [11, 3]);
                expect(cellEle.textContent).toBe('200');
                helper.invoke('updateCell', [{ formula: '=SUM(D2;D3;D4;D5)' }, 'D12']);
                expect(cell.value).toBe(65);
                expect(cellEle.textContent).toBe('65');
                helper.invoke('updateCell', [{ formula: '=SUMIF(D2:D7;">10")' }, 'D12']);
                expect(cell.value).toBe(125);
                expect(cellEle.textContent).toBe('125');
                helper.invoke('updateCell', [{ formula: '=IF(4>5;TRUE;FALSE)' }, 'D12']);
                expect(cell.value).toBe('FALSE');
                expect(cellEle.textContent).toBe('FALSE');
                helper.invoke('updateCell', [{ formula: '=IFS(A8<>"LoaferS";TRUE;A11="T-Shirts";FALSE)' }, 'D12']);
                expect(cell.value).toBe('TRUE');
                expect(cellEle.textContent).toBe('TRUE');
                helper.invoke('updateCell', [{ formula: '=COUNTIFS(D2:D11;"<>20")' }, 'D12']);
                expect(cell.value).toBe(7);
                expect(cellEle.textContent).toBe('7');
                helper.invoke('updateCell', [{ formula: '=SUMIFS(D2:D11;E2:E11;">15";F2:F11;">20")' }, 'D12']);
                expect(cell.value).toBe(126);
                expect(cellEle.textContent).toBe('126');
                helper.invoke('updateCell', [{ formula: '=TEXT(B4;"dd-mmm-yy")' }, 'D12']);
                expect(cell.value).toBe('27-Jul-14');
                expect(cellEle.textContent).toBe('27-Jul-14');
                helper.invoke('updateCell', [{ formula: '=CONCATENATE(A2;A3;A4;A8;A10)' }, 'D12']);
                expect(cell.value).toBe('Casual ShoesSports ShoesFormal ShoesRunning ShoesCricket Shoes');
                expect(cellEle.textContent).toBe('Casual ShoesSports ShoesFormal ShoesRunning ShoesCricket Shoes');
                helper.invoke('updateCell', [{ formula: '=OR(TRUE;TRUE;TRUE;FALSE)' }, 'D12']);
                expect(cell.value).toBe('TRUE');
                expect(cellEle.textContent).toBe('TRUE');
                helper.invoke('updateCell', [{ formula: '=HLOOKUP(Sheet1!$F$8;Sheet1!$F$2:$G$11;2;False)' }, 'D12']);
                expect(cell.value).toBe('600');
                expect(cellEle.textContent).toBe('600');
                helper.invoke('updateCell', [{ formula: '=SUMPRODUCT($D$2:$D$11;$H$2:$H$11)' }, 'D12']);
                expect(cell.value).toBe(18120);
                expect(cellEle.textContent).toBe('18120');
                done();
            });
            it('Nested formula with list separator', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=SUM(SUMIFS(D2:D11; E2:E11; {10; 20}))' }, 'D12']);
                expect(cell.value).toBe(196);
                expect(cellEle.textContent).toBe('196');
                helper.invoke('updateCell', [{ formula: '=ROUNDUP(AVERAGE(F2:F9);COUNT(F9;F11))' }, 'D12']);
                expect(cell.value).toBe('376.25');
                expect(cellEle.textContent).toBe('376.25');
                helper.invoke('updateCell', [{ formula: '=ROUNDDOWN(RSQ(D2:D11;F2:F11);4)' }, 'D12']);
                expect(cell.value).toBe('0.3789');
                expect(cellEle.textContent).toBe('0.3789');
                helper.invoke('updateCell', [{ formula: '=IFS(OR(A2<>"Casual Shoes";A11="T-Shirts");"Y";OR(A2<>"Casual Shoes";A11="T-Shirts"); "R")' }, 'D12']);
                expect(cell.value).toBe('Y');
                expect(cellEle.textContent).toBe('Y');
                helper.invoke('updateCell', [{ formula: '=MAX(MOD(22;3); MOD(12;5))' }, 'D12']);
                expect(cell.value).toBe('2');
                expect(cellEle.textContent).toBe('2');
                const formula: string = '=IF(OR(AND(ABS(D10)>ABS(E10);D10<0);AND(ABS(D10)<=ABS(E10);E10<0));-1*(IF(D10=0;((ABS(E10)-ABS(D10))/1)*100;' +
                    '((ABS(E10)-ABS(D10))/ABS(D10))*100));IF(D10=0;((ABS(E10)-ABS(D10))/1)*100;((ABS(E10)-ABS(D10))/ABS(D10))*100))';
                helper.invoke('updateCell', [{ formula: formula }, 'D12']);
                expect(cell.value).toBe('-26.829268292682933');
                expect(cellEle.textContent).toBe('-26.82926829');
                done();
            });
            it('Default formula with decimal separator', (done: Function) => {
                spreadsheet.workbookFormulaModule.calculateInstance.setParseDecimalSeparator(',');
                helper.invoke('updateCell', [{ formula: '=IF(D2=10,23;D3;10,45)' }, 'D12']);
                expect(cell.value).toBe('10.45');
                expect(cellEle.textContent).toBe('10.45');
                helper.invoke('updateCell', [{ formula: '=SUM("4,9";"5,2")' }, 'D12']);
                expect(cell.value).toBe('10.1');
                expect(cellEle.textContent).toBe('10.1');
                helper.invoke('updateCell', [{ formula: '=SUM(-5,7;-8,9)' }, 'D12']);
                expect(cell.value).toBe('-14.6');
                expect(cellEle.textContent).toBe('-14.6');
                helper.invoke('updateCell', [{ formula: '=COUNTIF(F2:F11;">100,84")' }, 'D12']);
                expect(cell.value).toBe(10);
                expect(cellEle.textContent).toBe('10');
                helper.invoke('updateCell', [{ formula: '=AVERAGEIF(F2:F11;">110,27")' }, 'D12']);
                expect(cell.value).toBe(472);
                expect(cellEle.textContent).toBe('472');
                helper.invoke('updateCell', [{ formula: '=SUMIF(D2:D11;"1,?")' }, 'D12']);
                expect(cell.value).toBe(0);
                expect(cellEle.textContent).toBe('0');
                helper.invoke('updateCell', [{ formula: '=GEOMEAN(10,87;20,33;30;56,45;40,34)' }, 'D12']);
                expect(cell.value).toBe('27.275806669844062');
                expect(cellEle.textContent).toBe('27.27580667');
                helper.invoke('updateCell', [{ formula: '=TRUNC("-8,9")' }, 'D12']);
                expect(cell.value).toBe('-8');
                expect(cellEle.textContent).toBe('-8');
                helper.invoke('updateCell', [{ formula: '=POWER((D2+D10);1,3/3,45)' }, 'D12']);
                expect(cell.value).toBe('4.3997929579013535');
                expect(cellEle.textContent).toBe('4.399792958');
                done();
            });
            it('Simple arithmetic expression with decimal separator', (done: Function) => {
                helper.invoke('updateCell', [{ formula: '=5,8+6,4+8,5' }, 'D12']);
                expect(cell.value).toBe('20.7');
                expect(cellEle.textContent).toBe('20.7');
                spreadsheet.workbookFormulaModule.calculateInstance.setParseDecimalSeparator('.');
                done();
            });
        });
    });
    describe('EJ2-62007 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Issue in applying large formula in sheet.', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            helper.invoke('updateCell', [{ formula: '=LARGE(A1:B100,4)' }, 'J3']);
            expect(parseInt(spreadsheet.sheets[0].rows[2].cells[9].value)).toEqual(41847);
            done();
        });
    });
    describe('EJ2-915326, EJ2-894946 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different Formats' }] },
                        { cells: [{ index: 8, value: '10' }] }, { cells: [{ index: 8, value: '12', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '11', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: getFormatFromType('Accounting') }] },
                        { cells: [{ index: 8, value: '1', format: 'm/d/yyyy' }] }, { cells: [{ index: 8, value: '1', format: 'dddd, mmmm dd, yyyy' }] },
                        { cells: [{ index: 8, value: '1', format: 'h:mm:ss AM/PM' }] }, { cells: [{ index: 8, value: '15', format: '0%' }] },
                        { cells: [{ index: 8, value: '12', format: '# ?/?' }] }, { cells: [{ index: 8, value: '15', format: '0.0000E+00' }] },
                    ]
                }]
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Formula results are not working properly when a cells is applied  with currency formats', (done: Function) => {
            helper.invoke('numberFormat', ['0.00E+00', 'D2:D11']);
            helper.invoke('numberFormat', ['0.00%', 'E2:E11']);
            helper.invoke('numberFormat', ['$#,##0.00', 'F2:F11']);
            helper.invoke('numberFormat', ['$#,##0.00', 'J1:J10']);
            helper.invoke('numberFormat', ['0.00', 'K1:K10']);
            helper.edit('J1', '=SUM(B3:B4)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('$83,648.00');
            helper.edit('J2', '=AVERAGE(C3:C4)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('$0.20');
            helper.edit('J3', '=ROUNDDOWN(D3:D4)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('$20.00');
            helper.edit('J4', '=ROUNDUP(E2:E4)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('$20.00');
            helper.edit('J5', '=MOD(F3,1200)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('$600.00');
            done();
        });
        it('Checking number formats applied cells with formula', (done: Function) => {
            helper.edit('K1', '=SUM(B3:B4)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('83648.00');
            helper.edit('K2', '=AVERAGE(C3:C4)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0.20');
            helper.edit('K3', '=ROUNDDOWN(D3:D4)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('20.00');
            helper.edit('K4', '=ROUNDUP(E2:E4)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('20.00');
            helper.edit('K5', '=MOD(F3,1200)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('600.00');
            done();
        });
        it('Format not maintained properly for formula applied cells ->', (done: Function) => {
            helper.invoke('numberFormat', ['0.00', 'H1:H7']);
            helper.invoke('numberFormat', ['mm-dd-yyyy', 'I12']);
            helper.edit('I12', '=SUM(H2:H7)');
            let cellEle = helper.invoke('getCell', [11, 8]);
            expect(cellEle.textContent).toBe('10-16-1900');
            helper.edit('I13', '=SUM(H2:H7)');
            cellEle = helper.invoke('getCell', [12, 8]);
            expect(cellEle.textContent).toBe('290.00');
            done();
        });
        it('Checking number format applied cells with different formatted values as arguments in a formula', (done: Function) => {
            helper.invoke('numberFormat', ['#,##0.00', 'J6:J15']);
            helper.edit('J6', '=SUM(I2)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('10.00');
            helper.edit('J7', '=AVERAGE(I3)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('12.00');
            helper.edit('J8', '=ROUNDDOWN(I4,1)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('11.00');
            helper.edit('J9', '=ROUNDUP(I5,1)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('32.00');
            helper.edit('J10', '=MOD(I6,1200)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('1.00');
            helper.edit('J11', '=SUM(I7)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('1.00');
            helper.edit('J12', '=AVERAGE(I8)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('1.00');
            helper.edit('J13', '=ROUNDDOWN(I9,1)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('15.00');
            helper.edit('J14', '=ROUNDUP(I10,1)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('12.00');
            helper.edit('J15', '=MOD(I11,1200)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('15.00');
            done();
        });
        it('Checking Currency format applied cells with different formatted values as arguments in a formula', (done: Function) => {
            helper.invoke('numberFormat', ['$#,##0.00', 'K6:K15']);
            helper.edit('K6', '=SUM(I2)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('$10.00');
            helper.edit('K7', '=AVERAGE(I3)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('$12.00');
            helper.edit('K8', '=ROUNDDOWN(I4,1)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('$11.00');
            helper.edit('K9', '=ROUNDUP(I5,1)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('$32.00');
            helper.edit('K10', '=MOD(I6,1200)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('$1.00');
            helper.edit('K11', '=SUM(I7)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('$1.00');
            helper.edit('K12', '=AVERAGE(I8)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('$1.00');
            helper.edit('K13', '=ROUNDDOWN(I9,1)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('$15.00');
            helper.edit('K14', '=ROUNDUP(I10,1)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('$12.00');
            helper.edit('K15', '=MOD(I11,1200)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('$15.00');
            done();
        });
        it('Checking Long Date format applied cells with different formatted values as arguments in a formula', (done: Function) => {
            helper.invoke('numberFormat', ['dddd, mmmm dd, yyyy', 'L1:L10']);
            helper.edit('L1', '=SUM(I2)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('Wednesday, January 10, 1900');
            helper.edit('L2', '=AVERAGE(I3)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('Friday, January 12, 1900');
            helper.edit('L3', '=ROUNDDOWN(I4,1)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('Thursday, January 11, 1900');
            helper.edit('L4', '=ROUNDUP(I5,1)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('Thursday, February 1, 1900');
            helper.edit('L5', '=MOD(I6,1200)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('Monday, January 1, 1900');
            helper.edit('L6', '=SUM(I7)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('Monday, January 1, 1900');
            helper.edit('L7', '=AVERAGE(I8)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('Monday, January 1, 1900');
            helper.edit('L8', '=ROUNDDOWN(I9,1)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('Monday, January 15, 1900');
            helper.edit('L9', '=ROUNDUP(I10,1)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('Friday, January 12, 1900');
            helper.edit('L10', '=MOD(I11,1200)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('Monday, January 15, 1900');
            done();
        });
        it('Checking Time format applied cells with different formatted values as arguments in a formula', (done: Function) => {
            helper.invoke('numberFormat', ['h:mm:ss AM/PM', 'L11:L20']);
            helper.edit('L11', '=SUM(I2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L12', '=AVERAGE(I3)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L13', '=ROUNDDOWN(I4,1)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L14', '=ROUNDUP(I5,1)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L15', '=MOD(I6,1200)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L16', '=SUM(I7)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L17', '=AVERAGE(I8)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L18', '=ROUNDDOWN(I9,1)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L19', '=ROUNDUP(I10,1)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('12:00:00 AM');
            helper.edit('L20', '=MOD(I11,1200)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('12:00:00 AM');
            done();
        });
        it('Checking different format applied cells with Number formatted values as arguments in a formula.', (done: Function) => {
            helper.edit('M1', '=SUM(I3)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('12.00');
            helper.invoke('numberFormat', ['#,##0.00', 'M2']);
            helper.edit('M2', '=AVERAGE(I3)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('12.00');
            helper.invoke('numberFormat', ['$#,##0.00', 'M3']);
            helper.edit('M3', '=ROUNDDOWN(I3,1)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('$12.00');
            helper.invoke('numberFormat', [getFormatFromType('Accounting'), 'M4']);
            helper.edit('M4', '=ROUNDUP(I3,1)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe(' $   12.00 ');
            helper.invoke('numberFormat', ['m/d/yyyy', 'M5']);
            helper.edit('M5', '=MOD(I3,1200)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('1/12/1900');
            helper.invoke('numberFormat', ['dddd, mmmm dd, yyyy', 'M6']);
            helper.edit('M6', '=SUM(I3)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('Friday, January 12, 1900');
            helper.invoke('numberFormat', ['h:mm:ss AM/PM', 'M7']);
            helper.edit('M7', '=AVERAGE(I3)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('12:00:00 AM');
            helper.invoke('numberFormat', ['0%', 'M8']);
            helper.edit('M8', '=ROUNDDOWN(I3,1)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('1200%');
            helper.invoke('numberFormat', ['# ?/?', 'M9']);
            helper.edit('M9', '=ROUNDUP(I3,1)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('12       ');
            helper.invoke('numberFormat', ['0.0000E+00', 'M10']);
            helper.edit('M10', '=MOD(I3,1200)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('1.2000E+01');
            done();
        });
    });
    describe('EJ2-62878, EJ2-62887 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ rows: [{ cells: [{ value: '1' }] }, { cells: [{ value: '2' }] }, { cells: [{ value: '3' }] }] }, {} ], activeSheetIndex: 1 }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Console error on deleting or inserting rows and cannot able to delete a row', (done: Function) => {
            helper.invoke('updateCell', [{ formula: '=UNIQUE(Sheet1!A1:A3)' }, 'A1']);
            helper.getElement('.e-sheet-tab').querySelectorAll('.e-toolbar-item')[0].click();
            setTimeout(() => {
                expect(getCell(2, 0, helper.getInstance().sheets[0]).value).toBe('3');
                expect(getCell(0, 0, helper.getInstance().sheets[1]).formula).toBe('=UNIQUE(Sheet1!A1:A3)');
                helper.invoke('delete', [2, 2, 'Row']);
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[2]).toBeUndefined();
                    expect(getCell(0, 0, helper.getInstance().sheets[1]).formula).toBe('=UNIQUE(Sheet1!A1:A2)');
                    helper.invoke('insertRow', [1, 1]);
                    expect(helper.getInstance().sheets[0].rows[2].cells[0].value).toBe('2');
                    expect(getCell(0, 0, helper.getInstance().sheets[1]).formula).toBe('=UNIQUE(Sheet1!A1:A3)');
                    done();
                }, 10);
            });
        });
        it('The formula reference not updated properly while pasting the formula with multiple cells', (done: Function) => {
            const sheet: SheetModel = helper.getInstance().sheets[0];
            helper.invoke('updateCell', [{ formula: '=A1+B1' }, 'B2']);
            helper.invoke('updateCell', [{ formula: '=A1+AA1' }, 'B3']);
            helper.invoke('updateCell', [{ formula: '=AA1+AAA1' }, 'B4']);
            helper.invoke('updateCell', [{ formula: '=A1+AA1+AAA1' }, 'B5']);
            helper.invoke('copy', ['B2:B5']).then(() => {
                helper.invoke('paste', ['C2']);
                expect(sheet.rows[1].cells[2].formula).toBe('=B1+C1');
                expect(sheet.rows[2].cells[2].formula).toBe('=B1+AB1');
                expect(sheet.rows[3].cells[2].formula).toBe('=AB1+AAB1');
                expect(sheet.rows[4].cells[2].formula).toBe('=B1+AB1+AAB1');
                done();
            });
        });
    });
    describe('EJ2-64655, EJ2-66218 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ id: 200, rows: [{ cells: [{ value: '179.75' }] }, { cells: [{ value: '179.725' }] }, { cells: [{ value: '179.7235' }] }, { cells: [{ value: '179.22345' }] }, { cells: [{ value: '179.323455' }] }, { cells: [{ value: '179.8234505' }] }, { cells: [{ value: '-179.725' }] }] }, {}] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Rounding formula not works properly when the last digit contains 5', (done: Function) => {
            helper.edit('B1', '=round(A1, 1)');
            expect(helper.invoke('getCell', [0, 1]).textContent).toBe('179.8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[1])).toBe('{"value":"179.8","formula":"=round(A1, 1)"}');
            helper.edit('B2', '=round(A2, 2)');
            expect(helper.invoke('getCell', [1, 1]).textContent).toBe('179.73');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[1])).toBe('{"value":"179.73","formula":"=round(A2, 2)"}');
            helper.edit('B3', '=round(A3, 3)');
            expect(helper.invoke('getCell', [2, 1]).textContent).toBe('179.724');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[1])).toBe('{"value":"179.724","formula":"=round(A3, 3)"}');
            helper.edit('B4', '=round(A4, 4)');
            expect(helper.invoke('getCell', [3, 1]).textContent).toBe('179.2235');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[1])).toBe('{"value":"179.2235","formula":"=round(A4, 4)"}');
            helper.edit('B5', '=round(A5, 5)');
            expect(helper.invoke('getCell', [4, 1]).textContent).toBe('179.32346');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[1])).toBe('{"value":"179.32346","formula":"=round(A5, 5)"}');
            helper.edit('B6', '=round(A6, 6)');
            expect(helper.invoke('getCell', [5, 1]).textContent).toBe('179.823451');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[1])).toBe('{"value":"179.823451","formula":"=round(A6, 6)"}');
            helper.edit('B7', '=round(A7, 2)');
            expect(helper.invoke('getCell', [6, 1]).textContent).toBe('-179.73');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[1])).toBe('{"value":"-179.73","formula":"=round(A7, 2)"}');
            done();
        });
        it('Cell delete on UNIQUE formula which has spill error', (done: Function) => {
            helper.invoke('updateCell', [{ formula: '=UNIQUE(B1:B7)' }, 'D1']);
            const sheet: SheetModel = helper.getInstance().sheets[0];
            expect(sheet.rows[0].cells[3].value).toBe('179.8');
            expect(helper.invoke('getCell', [0, 3]).textContent).toBe('179.8');
            expect(sheet.rows[1].cells[3].value).toBe('179.73');
            expect(helper.invoke('getCell', [1, 3]).textContent).toBe('179.73');
            expect(sheet.rows[5].cells[3].value).toBe('179.823451');
            expect(helper.invoke('getCell', [5, 3]).textContent).toBe('179.823451');
            helper.edit('D3', 'Changed');
            expect(sheet.rows[0].cells[3].value).toBe('#SPILL!');
            expect(helper.invoke('getCell', [0, 3]).textContent).toBe('#SPILL!');
            expect(sheet.rows[2].cells[3].value).toBe('Changed');
            expect(helper.invoke('getCell', [2, 3]).textContent).toBe('Changed');
            expect(sheet.rows[5].cells[3].value).toBe('');
            expect(helper.invoke('getCell', [5, 3]).textContent).toBe('');
            helper.invoke('selectRange', ['D1']);
            helper.triggerKeyNativeEvent(46);
            expect(sheet.rows[0].cells[3].value).toBe('');
            expect(helper.invoke('getCell', [0, 3]).textContent).toBe('');
            done();
        });
    });
    describe('EJ2-65615-> Row wise', () => {
        const model: SpreadsheetModel = {
            sheets: [{
                rows: [{ cells: [{ value: '1' }, { value: '1' }] }, { cells: [{ value: '2' }, { value: '' }] }, { cells: [{ value: '3' }, { value: '1' }] }, { cells: [{ value: '4' }, { value: '1' }] }, { cells: [{ value: '5' }, { value: '1' }] }]
            }]
        };
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet(model, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNT formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=COUNT(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNT(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(5);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=COUNT(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(5);
                helper.edit('A6', '1');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(6);
                done();
            })
        });
        it('COUNTIF formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=COUNTIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=COUNTIF(A1:A5,"=0")');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(0);
                helper.edit('A6', '0');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(0);
                done();
            })
        });
        it('COUNTIFS formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=COUNTIFs(A1:A5,"=1",B1:B5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIFs(A1:A5,"=1",B1:B5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=COUNTIFs(A1:A5,"=1",B1:B5,"=1")');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(1);
                helper.edit('A6', '1');
                helper.edit('B6', '1');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(1);
                done();
            })
        });
        it('SUM function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=SUM(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(15);
                helper.edit('A6', '6');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(21);
                done();
            })
        });
        it('SUMIF function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=SUMIF(A1:A5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIF(A1:A5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=SUMIF(A1:A5,"=1")');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(1);
                helper.edit('A6', '1');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(1);
                done();
            })
        });
        it('Nested SUM function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=SUM(A1:A5,SUM(A1:A5))');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5,SUM(A1:A5))');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(30);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=SUM(A1:A5,SUM(A1:A5))');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(30);
                helper.edit('A6', '1');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(30);
                done();
            })
        });
        it('SUMIFS function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=SUMIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=SUMIFS(A1:A5,B1:B5,"=0")');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(0);
                helper.edit('A6', '6');
                helper.edit('B2', '0');
                helper.edit('B6', '0');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(2);
                helper.edit('B2', '');
                done();
            })
        });
        it('AVERAGE formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=AVERAGE(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGE(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('3');
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=AVERAGE(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('3');
                helper.edit('A6', '6');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('3.5');
                done();
            })
        });
        it('AVERAGEIF formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A2', '');
            helper.edit('A6', '=AVERAGEIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGEIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#DIV/0!');
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=AVERAGEIF(A1:A5,"=0")');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('#DIV/0!');
                helper.edit('A6', '0');
                helper.edit('A2', '0');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(0);
                helper.edit('A2', '2');
                done();
            })
        });
        it('AVERAGEIFS formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=AVERAGEIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGEIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#DIV/0!');
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=AVERAGEIFS(A1:A5,B1:B5,"=0")');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('#DIV/0!');
                helper.edit('A6', '6');
                helper.edit('B2', '0');
                helper.edit('B6', '0');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(2);
                helper.edit('B2', '');
                done();
            })
        });
        it('MAX formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=MAX(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=MAX(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('5');
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=MAX(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('5');
                helper.edit('A6', '6');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('6');
                done();
            })
        });
        it('MIN formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('A6', '=MIN(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=MIN(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('1');
            helper.invoke('insertRow', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=MIN(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('1');
                helper.edit('A6', '0');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('0');
                done();
            })
        });
        it('Using wrong address in formula argument does not throws any error', (done: Function) => {
            helper.getInstance().addDefinedName({ name: 'defName', refersTo: '=Sheet1!A4:A5' });
            helper.edit('A6', '=COUNT(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNT(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(5);
            helper.edit('A6', '=COUNT(1A:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNT(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(5);
            helper.edit('A6', '=COUNT($1$A:$A$5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNT($A$1:$A$5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(5);
            helper.edit('A6', '=COUNTIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=COUNTIF(A1:5A,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=COUNTIFs(A1:A5,"=1",B1:B5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIFs(A1:A5,"=1",B1:B5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=COUNTIFS(A1:A5,"=1",1B:B5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIFS(A1:A5,"=1",B1:B5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=COUNTIFS($A$1:$A$5,"=1",$1$B:$B$5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=COUNTIFS($A$1:$A$5,"=1",$B$1:$B$5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=SUM($A$1:$A$5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM($A$1:$A$5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUM(1A:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUMIF(A1:A5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIF(A1:A5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=SUMIF(A1:5A,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIF(A1:A5,"=1")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=SUMIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=SUMIFS(A1:A5,B1:5B,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=AVERAGE(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGE(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('3');
            helper.edit('A6', '=AVERAGE(1A:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGE(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('3');
            helper.edit('A6', '=AVERAGEIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGEIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#DIV/0!');
            helper.edit('A6', '=AVERAGEIF(A1:5A,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGEIF(A1:A5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#DIV/0!');
            helper.edit('A6', '=AVERAGEIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGEIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#DIV/0!');
            helper.edit('A6', '=AVERAGEIFS(A1:5A,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=AVERAGEIFS(A1:A5,B1:B5,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#DIV/0!');
            helper.edit('A6', '=MAX(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=MAX(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('5');
            helper.edit('A6', '=MAX(1A:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=MAX(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('5');
            helper.edit('A6', '=MIN(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=MIN(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('1');
            helper.edit('A6', '=MIN(A1:5A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=MIN(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('1');
            helper.edit('A6', '=SUM(1A:A3,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A3,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUM(1A,A2,3A,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1,A2,A3,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUM($A$1:$A$3,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM($A$1:$A$3,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUM($1$A:$3$A,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM($A$1:$A$3,defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUMIFS($4$B:$B$5,defName,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS($B$4:$B$5,defName,"=0")');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=IF(1A=1,TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=IF(A1=1,TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('TRUE');
            helper.edit('A6', '=IF(1A>1,TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=IF(A1>1,TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('FALSE');
            helper.edit('A6', '=A1+2A');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=A1+A2');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('3');
            helper.edit('A6', '=(1A*A2)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=(A1*A2)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('2');
            helper.edit('A6', '=(A1>2A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=(A1>A2)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('FALSE');
            helper.edit('A6', '=(A1>=2A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=(A1>=A2)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('FALSE');
            helper.edit('A6', '=TIME(A1,2A,A3)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=TIME(A1,A2,A3)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('0.043090277777777776');
            helper.edit('A6', '=DATE(1A,A2,3A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=DATE(A1,A2,A3)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('400');
            helper.edit('A6', '=UNIQUE()');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toBeUndefined();
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toBeUndefined();
            helper.edit('A6', '=SUM()');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toBeUndefined();
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toBeUndefined();
            helper.edit('A6', '=SUM(1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=SUM(1,2,3)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(1,2,3)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(6);
            helper.edit('A6', '=SUM(A1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=SUM(1A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(1);
            helper.edit('A6', '=SUM(A1,A2,A3,A4)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1,A2,A3,A4)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(10);
            helper.edit('A6', '=SUM(1A,A2,3A,A4)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1,A2,A3,A4)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(10);
            helper.edit('A6', '=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUM(1A:5A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            helper.edit('A6', '=SUM(A1:A5,B1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5,B1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(19);
            helper.edit('A6', '=SUM(1A:A5,B1:5B)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5,B1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(19);
            helper.edit('A6', '=SUM(defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(defName)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(9);
            helper.edit('A6', '=SUM(1A,A2:3A,defName,B1,3B:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1,A2:A3,defName,B1,B3:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(19);
            helper.edit('A6', '=SUMIFS(A1:A2,A3:A4,">"&1B)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A2,A3:A4,">"&B1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(3);
            helper.edit('A6', '=SUMIFS(A1:A2,A3:A4,"<"&1B)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A2,A3:A4,"<"&B1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=SUMIFS(A1:A2,A3:A4,">="&1B)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A2,A3:A4,">="&B1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(3);
            helper.edit('A6', '=SUMIFS(A1:A2,A3:A4,"<="&1B)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUMIFS(A1:A2,A3:A4,"<="&B1)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(0);
            helper.edit('A6', '=SUM(1A: 5A)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(15);
            done();
        });
        it('Invalid formula range alert dialog check->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('A7');
            spreadsheet.editModule.startEdit();
            spreadsheet.editModule.editCellData.value = '=SUMIFS(1A:2A,3A:A4,">"&1B)';
            spreadsheet.editModule.endEdit();
            const cellSave: Function = spreadsheet.cellSave;
            spreadsheet.cellSave = (args: CellSaveEventArgs): void => {
                expect(args.value).toBe('=SUMIFS(A1:A2,A3:A4,">"&B1)');
                expect(args.displayText).toBe('3');
                spreadsheet.cellSave = cellSave;
            };
            setTimeout((): void => {
                expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe(
                    'We found a typo in your cell reference. Do you want to correct this reference as follows?=SUMIFS(A1:A2,A3:A4,">"&B1)');
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                helper.click('.e-validation-error-dlg.e-dialog .e-footer-content .e-btn:not(.e-primary)');
                expect(spreadsheet.isEdit).toBeTruthy();
                spreadsheet.editModule.editCellData.value = '=SUMIFS(1A:2A,3A:A4,">"&1B)';
                spreadsheet.editModule.endEdit();
                setTimeout((): void => {
                    helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                    helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
                    expect(spreadsheet.sheets[0].rows[6].cells[0].formula).toEqual('=SUMIFS(A1:A2,A3:A4,">"&B1)');
                    expect(spreadsheet.sheets[0].rows[6].cells[0].value).toEqual(3);
                    done();
                });
            });
        });
        it('Simple invalid formula range alert dialog check->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('A7');
            spreadsheet.editModule.startEdit();
            spreadsheet.editModule.editCellData.value = '=SUM(A1,2A,3A,4A)';
            spreadsheet.editModule.endEdit();
            setTimeout((): void => {
                expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').innerHTML).toBe(
                    'We found a typo in your cell reference. Do you want to correct this reference as follows?<br>=SUM(A1,A2,A3,A4)');
                helper.setAnimationToNone('.e-validation-error-dlg.e-dialog');
                helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
                expect(spreadsheet.sheets[0].rows[6].cells[0].formula).toEqual('=SUM(A1,A2,A3,A4)');
                expect(spreadsheet.sheets[0].rows[6].cells[0].value).toEqual(10);
                done();
            });
        });
    });
    describe('EJ2-65615-> Column wise ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ rows: [{ cells: [{ value: '1' }, { value: '2' }, { value: '3' }, { value: '4' }, { value: '5' }] }, { cells: [{ value: '1' }, { value: '' }, { value: '1' }, { value: '1' }, { value: '1' }] }] }]
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('COUNT formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=COUNT(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=COUNT(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(5);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=COUNT(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(5);
                helper.edit('F1', '1');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(6);
                done();
            })
        });
        it('COUNTIF formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=COUNTIF(A1:E1,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=COUNTIF(A1:E1,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(0);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=COUNTIF(A1:E1,"=0")');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(0);
                helper.edit('F1', '0');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(0);
                done();
            })
        });
        it('COUNTIFS formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=COUNTIFS(A1:E1,"=1",A2:E2,"=1")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=COUNTIFS(A1:E1,"=1",A2:E2,"=1")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(1);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=COUNTIFS(A1:E1,"=1",A2:E2,"=1")');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(1);
                helper.edit('F1', '1');
                helper.edit('F2', '1');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(1);
                done();
            })
        });
        it('SUM function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=SUM(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=SUM(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(15);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=SUM(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(15);
                helper.edit('F1', '6');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(21);
                done();
            })
        });
        it('SUMIF function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=SUMIF(A1:E1,"=1")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=SUMIF(A1:E1,"=1")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(1);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=SUMIF(A1:E1,"=1")');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(1);
                helper.edit('F1', '1');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(1);
                done();
            })
        });
        it('Nested SUM function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=SUM(A1:E1,SUM(A1:E1))');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=SUM(A1:E1,SUM(A1:E1))');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(30);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=SUM(A1:E1,SUM(A1:E1))');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(30);
                helper.edit('F1', '1');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(30);
                done();
            })
        });
        it('SUMIFS function is not value updated properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=SUMIFS(A1:E1,A2:E2,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=SUMIFS(A1:E1,A2:E2,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(0);
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=SUMIFS(A1:E1,A2:E2,"=0")');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(0);
                helper.edit('F1', '6');
                helper.edit('B2', '0');
                helper.edit('F2', '0');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(2);
                helper.edit('B2', '');
                done();
            })
        });
        it('AVERAGE formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=AVERAGE(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=AVERAGE(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual('3');
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=AVERAGE(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('3');
                helper.edit('F1', '6');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('3.5');
                done();
            })
        });
        it('AVERAGEIF formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('B1', '');
            helper.edit('F1', '=AVERAGEIF(A1:E1,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=AVERAGEIF(A1:E1,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual('#DIV/0!');
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=AVERAGEIF(A1:E1,"=0")');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('#DIV/0!');
                helper.edit('F1', '0');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('#DIV/0!');
                helper.edit('B1', '2');
                done();
            })
        });
        it('AVERAGEIFS formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=AVERAGEIFS(A1:E1,A2:E2,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=AVERAGEIFS(A1:E1,A2:E2,"=0")');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual('#DIV/0!');
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=AVERAGEIFS(A1:E1,A2:E2,"=0")');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('#DIV/0!');
                helper.edit('F1', '6');
                helper.edit('B2', '0');
                helper.edit('F2', '0');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(2);
                helper.edit('B2', '');
                done();
            })
        });
        it('MAX formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=MAX(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=MAX(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual('5');
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=MAX(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('5');
                helper.edit('F1', '6');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('6');
                done();
            })
        });
        it('MIN formula is not updated value properly while the new insert and update the value', (done: Function) => {
            helper.edit('F1', '=MIN(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=MIN(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual('1');
            helper.invoke('insertColumn', [5]);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=MIN(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('1');
                helper.edit('F1', '0');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('0');
                done();
            })
        });
    });

    describe('EJ2-907348-> Refresh formula on insert row/column ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    rows: [{ cells: [{ value: '1' }, { value: '2' }, { value: '3' }, { value: '4' }, { value: '5' }] },
                    { cells: [{ value: '1' }, { value: '' }, { value: '2' }, { value: '9' }, { value: '10' }] },
                    { cells: [{ value: '12' }, { value: '0' }, { value: '11' }, { value: '5' }, { value: '6' }] },
                    { cells: [{ value: '1' }, { value: '7' }, { value: '15' }, { value: '0' }, { value: '8' }] },
                    { cells: [{ value: '1' }, { value: '' }, { value: '4' }, { value: '5' }, { value: '8' }] }]
                }]
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Formula range refreshing for inserting row above using context menu', (done: Function) => {
            helper.edit('A6', '=SUM(A1:A5)');
            helper.edit('B6', '=SUM(B1:B5)');
            helper.edit('C6', '=SUM(A1:A5)');
            helper.edit('D6', '=SUM(B1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[1].formula).toEqual('=SUM(B1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[2].formula).toEqual('=SUM(A1:A5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[3].formula).toEqual('=SUM(B1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual(16);
            expect(helper.getInstance().sheets[0].rows[5].cells[1].value).toEqual(9);
            expect(helper.getInstance().sheets[0].rows[5].cells[2].value).toEqual(16);
            expect(helper.getInstance().sheets[0].rows[5].cells[3].value).toEqual(9);
            helper.setAnimationToNone('#' + helper.id + '_contextmenu');
            helper.invoke('selectRange', ['A6']);
            helper.openAndClickCMenuItem(4, 0, [6, 1], true); // Insert Row Above
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[0].formula).toEqual('=SUM(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[1].formula).toEqual('=SUM(B1:B6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[2].formula).toEqual('=SUM(A1:A6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[3].formula).toEqual('=SUM(B1:B6)');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(16);
                expect(helper.getInstance().sheets[0].rows[6].cells[1].value).toEqual(9);
                expect(helper.getInstance().sheets[0].rows[6].cells[2].value).toEqual(16);
                expect(helper.getInstance().sheets[0].rows[6].cells[3].value).toEqual(9);
                helper.edit('A6', '10');
                helper.edit('B6', '20');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual(26);
                expect(helper.getInstance().sheets[0].rows[6].cells[1].value).toEqual(29);
                expect(helper.getInstance().sheets[0].rows[6].cells[2].value).toEqual(26);
                expect(helper.getInstance().sheets[0].rows[6].cells[3].value).toEqual(29);
                helper.openAndClickCMenuItem(4, 0, [6, 2], true); // Insert Row Below
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[7].cells[0].formula).toEqual('=SUM(A1:A7)');
                    expect(helper.getInstance().sheets[0].rows[7].cells[1].formula).toEqual('=SUM(B1:B7)');
                    expect(helper.getInstance().sheets[0].rows[7].cells[2].formula).toEqual('=SUM(A1:A7)');
                    expect(helper.getInstance().sheets[0].rows[7].cells[3].formula).toEqual('=SUM(B1:B7)');
                    expect(helper.getInstance().sheets[0].rows[7].cells[0].value).toEqual(26);
                    expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toEqual(29);
                    expect(helper.getInstance().sheets[0].rows[7].cells[2].value).toEqual(26);
                    expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toEqual(29);
                    helper.edit('A7', '10');
                    helper.edit('B7', '20');
                    expect(helper.getInstance().sheets[0].rows[7].cells[0].value).toEqual(36);
                    expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toEqual(49);
                    expect(helper.getInstance().sheets[0].rows[7].cells[2].value).toEqual(36);
                    expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toEqual(49);
                    done();
                })
            })
        });
        it('Formula range not refreshing for inserting row below using context menu', (done: Function) => {
            helper.edit('B6', '=SUM(A1:B5)');
            helper.edit('D6', '=MAX(C1:D5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[1].formula).toEqual('=SUM(A1:B5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[1].value).toEqual(25);
            expect(helper.getInstance().sheets[0].rows[5].cells[3].formula).toEqual('=MAX(C1:D5)');
            expect(helper.getInstance().sheets[0].rows[5].cells[3].value).toEqual('15');
            helper.setAnimationToNone('#' + helper.id + '_contextmenu');
            helper.invoke('selectRange', ['A6']);
            helper.openAndClickCMenuItem(4, 0, [6, 1], true); // Insert Row Above
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[6].cells[1].formula).toEqual('=SUM(A1:B5)');
                expect(helper.getInstance().sheets[0].rows[6].cells[1].value).toEqual(25);
                expect(helper.getInstance().sheets[0].rows[6].cells[3].formula).toEqual('=MAX(C1:D5)');
                expect(helper.getInstance().sheets[0].rows[6].cells[3].value).toEqual('15');
                helper.openAndClickCMenuItem(4, 0, [6, 2], true); // Insert Row Below
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[7].cells[1].formula).toEqual('=SUM(A1:B5)');
                    expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toEqual(25);
                    expect(helper.getInstance().sheets[0].rows[7].cells[3].formula).toEqual('=MAX(C1:D5)');
                    expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toEqual('15');
                    expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toEqual(25);
                    expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toEqual('15');
                    done();
                })
            })
        });
        it('Formula range refreshing for inserting column before using context menu', (done: Function) => {
            helper.edit('F1', '=SUM(A1:E1)');
            helper.edit('F2', '=SUM(A2:E2)');
            helper.edit('F3', '=SUM(A1:E1)');
            helper.edit('F4', '=SUM(A2:E2)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=SUM(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[1].cells[5].formula).toEqual('=SUM(A2:E2)');
            expect(helper.getInstance().sheets[0].rows[2].cells[5].formula).toEqual('=SUM(A1:E1)');
            expect(helper.getInstance().sheets[0].rows[3].cells[5].formula).toEqual('=SUM(A2:E2)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(15);
            expect(helper.getInstance().sheets[0].rows[1].cells[5].value).toEqual(22);
            expect(helper.getInstance().sheets[0].rows[2].cells[5].value).toEqual(15);
            expect(helper.getInstance().sheets[0].rows[3].cells[5].value).toEqual(22);
            helper.setAnimationToNone('#' + helper.id + '_contextmenu');
            helper.invoke('selectRange', ['F1']);
            helper.openAndClickCMenuItem(0, 7, [6, 1], null, true); // Insert Column Before
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=SUM(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[1].cells[6].formula).toEqual('=SUM(A2:F2)');
                expect(helper.getInstance().sheets[0].rows[2].cells[6].formula).toEqual('=SUM(A1:F1)');
                expect(helper.getInstance().sheets[0].rows[3].cells[6].formula).toEqual('=SUM(A2:F2)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(15);
                expect(helper.getInstance().sheets[0].rows[1].cells[6].value).toEqual(22);
                expect(helper.getInstance().sheets[0].rows[2].cells[6].value).toEqual(15);
                expect(helper.getInstance().sheets[0].rows[3].cells[6].value).toEqual(22);
                helper.edit('F1', '10');
                helper.edit('F2', '20');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(25);
                expect(helper.getInstance().sheets[0].rows[1].cells[6].value).toEqual(42);
                expect(helper.getInstance().sheets[0].rows[2].cells[6].value).toEqual(25);
                expect(helper.getInstance().sheets[0].rows[3].cells[6].value).toEqual(42);
                helper.openAndClickCMenuItem(0, 5, [6, 2], null, true); // Insert Column After
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[0].cells[7].formula).toEqual('=SUM(A1:G1)');
                    expect(helper.getInstance().sheets[0].rows[1].cells[7].formula).toEqual('=SUM(A2:G2)');
                    expect(helper.getInstance().sheets[0].rows[2].cells[7].formula).toEqual('=SUM(A1:G1)');
                    expect(helper.getInstance().sheets[0].rows[3].cells[7].formula).toEqual('=SUM(A2:G2)');
                    expect(helper.getInstance().sheets[0].rows[0].cells[7].value).toEqual(25);
                    expect(helper.getInstance().sheets[0].rows[1].cells[7].value).toEqual(42);
                    expect(helper.getInstance().sheets[0].rows[2].cells[7].value).toEqual(25);
                    expect(helper.getInstance().sheets[0].rows[3].cells[7].value).toEqual(42);
                    helper.edit('G1', '10');
                    helper.edit('G2', '20');
                    expect(helper.getInstance().sheets[0].rows[0].cells[7].value).toEqual(35);
                    expect(helper.getInstance().sheets[0].rows[1].cells[7].value).toEqual(62);
                    expect(helper.getInstance().sheets[0].rows[2].cells[7].value).toEqual(35);
                    expect(helper.getInstance().sheets[0].rows[3].cells[7].value).toEqual(62);
                    done();
                })
            })
        });
        it('Formula range not refreshing for inserting column before using context menu', (done: Function) => {
            helper.edit('F1', '=SUM(A1:E2)');
            helper.edit('F2', '=SUM(A2:E3)');
            helper.edit('F3', '=SUM($A$1:$E$1)');
            helper.edit('F4', '=SUM(A2:E2,A2:E2)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=SUM(A1:E2)');
            expect(helper.getInstance().sheets[0].rows[1].cells[5].formula).toEqual('=SUM(A2:E3)');
            expect(helper.getInstance().sheets[0].rows[2].cells[5].formula).toEqual('=SUM($A$1:$E$1)');
            expect(helper.getInstance().sheets[0].rows[3].cells[5].formula).toEqual('=SUM(A2:E2,A2:E2)');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual(37);
            expect(helper.getInstance().sheets[0].rows[1].cells[5].value).toEqual(56);
            expect(helper.getInstance().sheets[0].rows[2].cells[5].value).toEqual(15);
            expect(helper.getInstance().sheets[0].rows[3].cells[5].value).toEqual(44);
            helper.setAnimationToNone('#' + helper.id + '_contextmenu');
            helper.invoke('selectRange', ['F1']);
            helper.openAndClickCMenuItem(0, 7, [6, 1], null, true); // Insert Column Before
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=SUM(A1:E2)');
                expect(helper.getInstance().sheets[0].rows[1].cells[6].formula).toEqual('=SUM(A2:E3)');
                expect(helper.getInstance().sheets[0].rows[2].cells[6].formula).toEqual('=SUM($A$1:$E$1)');
                expect(helper.getInstance().sheets[0].rows[3].cells[6].formula).toEqual('=SUM(A2:E2,A2:E2)');
                expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual(37);
                expect(helper.getInstance().sheets[0].rows[1].cells[6].value).toEqual(56);
                expect(helper.getInstance().sheets[0].rows[2].cells[6].value).toEqual(15);
                expect(helper.getInstance().sheets[0].rows[3].cells[6].value).toEqual(44);
                helper.openAndClickCMenuItem(0, 5, [6, 2], null, true); // Insert Column After
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[0].cells[7].formula).toEqual('=SUM(A1:E2)');
                    expect(helper.getInstance().sheets[0].rows[1].cells[7].formula).toEqual('=SUM(A2:E3)');
                    expect(helper.getInstance().sheets[0].rows[2].cells[7].formula).toEqual('=SUM($A$1:$E$1)');
                    expect(helper.getInstance().sheets[0].rows[3].cells[7].formula).toEqual('=SUM(A2:E2,A2:E2)');
                    expect(helper.getInstance().sheets[0].rows[0].cells[7].value).toEqual(37);
                    expect(helper.getInstance().sheets[0].rows[1].cells[7].value).toEqual(56);
                    expect(helper.getInstance().sheets[0].rows[2].cells[7].value).toEqual(15);
                    expect(helper.getInstance().sheets[0].rows[3].cells[7].value).toEqual(44);
                    done();
                })
            })
        });
    });

    describe('AVERAGEIFS Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('AVERAGEIFS formula->', (done: Function) => {
            helper.edit('J1', '=AVERAGEIFS(H2:H5,E2:E5,">10")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('38.5');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toEqual('=AVERAGEIFS(H2:H5,E2:E5,">10")');
            done();
        });
        it('AVERAGEIFS formula with no argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIFS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIFS()';
            helper.triggerKeyNativeEvent(13);
            const dialog5: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog5.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J2', '=AVERAGEIFS(G2:G9,H2:H9,">5")');
            done();
        });
        it('AVERAGEIFS formula with criteria value as *->', (done: Function) => {
            helper.edit('J3', '=AVERAGEIFS(H2:H5,H2:H5,"*")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('#DIV/0!');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toEqual('=AVERAGEIFS(H2:H5,H2:H5,"*")');
            done();
        });
        it('AVERAGEIFS formula with criteria value as ?->', (done: Function) => {
            helper.edit('J4', '=AVERAGEIFS(H2:H5,H2:H5,"?")');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#DIV/0!');
            expect(helper.getInstance().sheets[0].rows[3].cells[9].formula).toEqual('=AVERAGEIFS(H2:H5,H2:H5,"?")');
            done();
        });
        it('AVERAGEIFS formula with criteria value as ? And numbers->', (done: Function) => {
            helper.edit('J5', '=AVERAGEIFS(H2:H5,H2:H5,"1?1")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('#DIV/0!');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].formula).toEqual('=AVERAGEIFS(H2:H5,H2:H5,"1?1")');
            done();
        });
        it('AVERAGEIFS formula with criteria value as ? And numbers - II->', (done: Function) => {
            helper.edit('J6', '=AVERAGEIFS(H2:H5,H2:H5,"11?1")');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('#DIV/0!');
            expect(helper.getInstance().sheets[0].rows[5].cells[9].formula).toEqual('=AVERAGEIFS(H2:H5,H2:H5,"11?1")');
            done();
        });
        it('AVERAGEIFS Formula with operators as criteria ->', (done: Function) => {
            helper.edit('J7', '=AVERAGEIFS(D2:D11,E2:E11,"<"30,F2:F11,"<"300)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('15');
            helper.edit('J8', '=AVERAGEIFS(D2:D11,E2:E11,">"20,F2:F11,">"300)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('30.5');
            helper.edit('J9', '=AVERAGEIFS(D2:D11,E2:E11,"<="30,F2:F11,"<="300)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('19');
            helper.edit('J10', '=AVERAGEIFS(D2:D11,E2:E11,">="20,F2:F11,">="300)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('29');
            helper.edit('J11', '=AVERAGEIFS(D2:D11,E2:E11,"<>20",F2:F11,"<>200")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('32');
            helper.edit('J12', '=AVERAGEIFS(D2:D11,E2:E11,20,F2:F11,200)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('10');
            helper.edit('J13', '=AVERAGEIFS(D2:D11,E2:E11,"<"15,F2:F11,">"250)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('37');
            helper.edit('J14', '=AVERAGEIFS(D2:D11,E2:E11,">"&D8,F2:F11,">"&F2)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('30.5');
            helper.edit('J15', '=AVERAGEIFS(D2:D11,E2:E11,"<>"&D8,F2:F11,"<>200")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('32');
            helper.edit('J16', '=AVERAGEIFS(F2:F11,D2:D11,"=20",E2:E11,"=30")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('600');
            done();
        });
        it('AVERAGEIFS Formula with wildcard * as criteria* ->', (done: Function) => {
            helper.edit('K1', '=AVERAGEIFS(D2:D11,F2:F11,"*2")');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K2', '=AVERAGEIFS(D2:D11,F2:F11,"0*")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K3', '=AVERAGEIFS(D2:D11,A2:A11,"C*")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('25.5');
            helper.edit('K4', '=AVERAGEIFS(D2:D11,A2:A11,"*ES")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('22.2');
            helper.edit('K5', '=AVERAGEIFS(D2:D11,A2:A11,"s*es")');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('20');
            done();
        });
        it('AVERAGEIFS Formula with wildcard ? as criteria ->', (done: Function) => {
            helper.edit('K6', '=AVERAGEIFS(D2:D11,F2:F11,"2??")');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K7', '=AVERAGEIFS(D2:D11,E2:E11,"1?")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#DIV/0!');
            helper.edit('K8', '=AVERAGEIFS(E2:E3,A2:A3,"???????Shoes")');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('25');
            helper.edit('K9', '=AVERAGEIFS(E2:E10,A2:A10,"???????")');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('10');
            helper.edit('K10', '=AVERAGEIFS(E2:E10,A2:A10,"<>???????")');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('19.375');
            done();
        });
        it('AVERAGEIFS Formula with different kind of value as criteria ->', (done: Function) => {
            helper.edit('K11', '=AVERAGEIFS(D2:D11,E2:E11,20,F2:F11,200)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('10');
            helper.edit('K12', '=AVERAGEIFS(D2:D11,E2:E11,">20",F2:F11,">200")');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('30.5');
            helper.edit('K13', '=AVERAGEIFS(D2:D11,E2:E11,E2,F2:F11,F2)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('10');
            helper.edit('K14', '=AVERAGEIFS(D2:D11,E2:E11,"<>"&D8,F2:F11,"<>"&F2)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('32');
            helper.edit('K15', '=AVERAGEIFS(E2:E11,"*"&E6,D2:D11,30)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('20');
            helper.edit('K16', '=AVERAGEIFS(E2:E11,E6&"*",D2:D11,30)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('20');
            helper.edit('K17', '=AVERAGEIFS(D2:D11,A2:A11,"Casual Shoes",E2:E11,20)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('10');
            done();
        });
        it('AVERAGEIFS Formula with experssion as criteria ->', (done: Function) => {
            helper.edit('L1', '=AVERAGEIFS(E2:E11,H2:H11,">"&G6+13,F2:F11,">"&D7+100)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('18.125');
            helper.edit('L2', '=AVERAGEIFS(E2:E11,F2:F11,">"&H10-66)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('17.5');
            done();
        });
        it('AVERAGEIFS Formula with worst case value as argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('L3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIFS(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIFS(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            spreadsheet.selectRange('L3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIFS(G2:G9,H2:H9,">5")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIFS(G2:G9,H2:H9,">5")';
            helper.triggerKeyNativeEvent(13);
            helper.edit('L4', '=AVERAGEIFS(,D2:D10,"*e")');
            spreadsheet.selectRange('L4');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIFS(,D2:D10,"*e")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIFS(,D2:D10,"*e")';
            helper.triggerKeyNativeEvent(13);
            const dialog2: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L4', '=AVERAGEIFS(G2:G9,H2:H9,">5")');
            helper.edit('L5', '=AVERAGEIFS(E2:E9,F2:F9,)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L6', '=AVERAGEIFS(A2:A11,,H4:H9,)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            helper.edit('L7', '=AVERAGEIFS(E4:E11,A3:A11,"",D4:D11,"=20")');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('#VALUE!');
            helper.edit('L8', '=AVERAGEIFS(E3:E11,F3:F11,"300",H3:H13,">50")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            spreadsheet.selectRange('L9');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AVERAGEIFS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AVERAGEIFS()';
            helper.triggerKeyNativeEvent(13);
            const dialog3: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog3.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L9', '=AVERAGEIFS(G2:G9,H2:H9,">5")');
            done();
        });
        it('AVERAGEIFS Formula with text,empty,number value as range and * or <>* as criteria->', (done: Function) => {
            helper.edit('L10', '=AVERAGEIFS(D2:D11,A2:A11,"*")');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('27.7');
            helper.edit('L11', '=AVERAGEIFS(D2:D11,E2:E11,"*")');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L12', '=AVERAGEIFS(D2:D11,P2:P11,"*")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L13', '=AVERAGEIFS(D2:D11,A2:A11,"<>*")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L14', '=AVERAGEIFS(D2:D11,E2:E11,"<>*")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('27.7');
            helper.edit('L15', '=AVERAGEIFS(D2:D11,P2:P11,"<>*")');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('27.7');
            helper.edit('L16', '=AVERAGEIFS(A2:A11,D2:D11,)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#DIV/0!');
            helper.edit('L17', '=AVERAGEIFS(A2:A11,D2:D11," ")');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('#DIV/0!');
            done();
        });
        it('AVERAGEIFS Formula with different formatted value as arguments->', (done: Function) => {
            helper.edit('M1', '=AVERAGEIFS(I6:I8,F5:F7,"300")');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('-1672');
            helper.edit('M2', '=AVERAGEIFS(I15:I16,F5:F6,"300")');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('65.88');
            helper.edit('M3', '=AVERAGEIFS(F5:F6,I15:I16,"<150")');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('300');
            helper.edit('M4', '=AVERAGEIFS(I17:I18,F5:F6,300)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('14.5');
            helper.edit('M5', '=AVERAGEIFS(F5:F6,I17:I18,">10")');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('300');
            helper.edit('M6', '=AVERAGEIFS(I19:I20,F8:F9,"200")');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('2');
            helper.edit('M7', '=AVERAGEIFS(F8:F9,I19:I20,">=2")');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('255');
            done();
        });
        it('AVERAGEIFS Formula with Logical value as arguments->', (done: Function) => {
            helper.edit('M8', '=AVERAGEIFS(D2:D5,I2:I5,"TRUE")');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('15');
            helper.edit('M9', '=AVERAGEIFS(D2:D5,I2:I5,"FALSE")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('17.5');
            helper.edit('M10', '=AVERAGEIFS(D2:D5,I2:I5,"TRUE")');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('15');
            helper.edit('M11', '=AVERAGEIFS(D2:D5,I2:I5,"FALSE")');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('17.5');
            helper.edit('M12', '=AVERAGEIFS(F2:F5,I2:I5,I3)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('400');
            helper.edit('M13', '=AVERAGEIFS(F2:F5,I2:I5,I4)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('300');
            done();
        });
        it('AVERAGEIFS Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=AVERAGEIFS($D$2:$D$11,E2:E11,20,F2:F11,200)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('10');
            helper.edit('N2', '=AVERAGEIFS(D2:D11,$E$2:$E$11,">20",$F$2:$F$11,">200")');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('30.5');
            helper.edit('N3', '=AVERAGEIFS(D2:D11,E2:E11,">"&$E$4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('25.2');
            helper.edit('N4', '=AVERAGEIFS($F$2:$F$11,$D$2:$D$11,">"&$D$5,$E$2:$E$11,"<"&$E$5)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('322');
            done();
        });
        it('AVERAGEIFS Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=AVERAGEIFS(Sheet2!A1:A10,F2:F11,">"&F5,G2:G11,"<"&D5)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('27.5');
            helper.edit('N6', '=AVERAGEIFS(Sheet1!E1:E10,F2:F11,">"&F5,G2:G11,"<"&D5)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('16');
            helper.edit('N7', '=AVERAGEIFS(D2:D9,Sheet2!A2:A9,">"&20)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('28.2');
            helper.edit('N8', '=AVERAGEIFS(Sheet1!D2:D11,Sheet1!E2:E11,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('27.7');
            helper.edit('N9', '=AVERAGEIFS(Sheet2!A2:A6,Sheet1!E2:E6,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('18.8');
            helper.edit('N10', '=AVERAGEIFS(Sheet1!D2:D6,Sheet2!A2:A6,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('20');
            helper.edit('N11', '=AVERAGEIFS(Sheet2!A2:A6,Sheet2!A2:A6,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('28.33333333');
            helper.edit('N12', '=AVERAGEIFS(Sheet2!A2:A6,Sheet2!A2:A6,">="&Sheet1!G9)');
            expect(helper.invoke('getCell', [11, 13]).textContent).toBe('22.75');
            done();
        });
        it('AVERAGEIFS Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N13', '=AVERAGEIFS(Sheet2!$A$1:$A$10,F2:F11,">"&F5,G2:G11,"<"&D5)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('27.5');
            helper.edit('N14', '=AVERAGEIFS(Sheet2!A1:A10,$F$2:$F$11,">"&F5,$G$2:$G$11,"<"&D2)');
            expect(helper.invoke('getCell', [13, 13]).textContent).toBe('20');
            helper.edit('N15', '=AVERAGEIFS(Sheet2!A1:A10,F2:F11,">"&$F$5,G2:G11,"<"&$D$2)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('20');
            helper.edit('N16', '=AVERAGEIFS(Sheet1!$D$2:$D$6,Sheet2!$A$2:$A$6,">"&Sheet1!$G$4)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('20');
            helper.edit('N17', '=AVERAGEIFS(Sheet1!D2:D11,Sheet1!E2:E11,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [16, 13]).textContent).toBe('27.7');
            helper.edit('N18', '=AVERAGEIFS(Sheet1!$D$2:$D$11,Sheet1!$E$2:$E$11,">"&Sheet1!$G$4)');
            expect(helper.invoke('getCell', [17, 13]).textContent).toBe('27.7');
            helper.edit('N19', '=AVERAGEIFS(D2:D8,Sheet2!$A$1:$A$7,">"20)');
            expect(helper.invoke('getCell', [18, 13]).textContent).toBe('25');
            helper.edit('N20', '=AVERAGEIFS(Sheet1!$D$2:$D$8,Sheet2!$A$1:$A$7,">"$G$5)');
            expect(helper.invoke('getCell', [19, 13]).textContent).toBe('23.75');
            done();
        });
        it('AVERAGEIFS Formula with nested formula as arguments ->', (done: Function) => {
            helper.edit('O1', '=AVERAGEIFS(D2:D11,E2:E11,SUM(10)+10)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('21.66666667');
            helper.edit('O2', '=AVERAGEIFS(D2:D11,E2:E11,COUNT(G2:H11))');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('21.66666667');
            helper.edit('O3', '=AVERAGEIFS(H2:H11,E2:E11,LEN(D4)+18)');
            expect(helper.invoke('getCell', [2, 14]).textContent).toBe('47.66666667');
            helper.edit('O4', '=AVERAGEIFS(D2:D11,A2:A11,"<>"EXACT(A2))');
            expect(helper.invoke('getCell', [3, 14]).textContent).toBe('27.7');
            helper.edit('O5', '=AVERAGEIFS(F2:F11,E2:E11,SUM(D2,H2),A2:A11,"<>"PROPER(A3))');
            expect(helper.invoke('getCell', [4, 14]).textContent).toBe('433.3333333');
            done();
        });
        it('AVERAGEIFS formula with cell references like string argument as input->', (done: Function) => {
            helper.edit('O6', '=AVERAGEIFS(Sheet1!G5:G6,Sheet2!A8:A9,"q1")');
            expect(helper.invoke('getCell', [5, 14]).textContent).toBe('11');
            helper.edit('O7', '=AVERAGEIFS(Sheet1!G5:G6,Sheet2!A8:A9,"Q2")');
            expect(helper.invoke('getCell', [6, 14]).textContent).toBe('10');
            done();
        });
    });

    describe('EJ2-66087,EJ2-66341,EJ2-66984, EJ2-976935 -> ', () => {
        beforeEach((done: Function) => {
            const addSum = (sourceValue: any, destinationValue: any) => {
                let data = sourceValue + destinationValue;
                return data;
            };
            const cusFunc = (sourceValue: any, destinationValue: any) => {
                let data = sourceValue + destinationValue;
                return data;
            };
            const customFunction = (firstCell: string, secondCell: string) => {
                let meanValue = (Number(firstCell) + Number(secondCell)) / 2;
                return meanValue;
            };
            const customFunction1 = (firstCell: string, secondCell: string) => {
                let meanValue = (Number(firstCell) + Number(secondCell)) / 2;
                return meanValue;
            };
            helper.initializeSpreadsheet({
                sheets: [
                    {
                        name: 'Monthly Budget',
                        rows: [{ cells: [{ value: '1' }, { value: '2' }, { value: '', formula: '=ADDSUM(A1,B1)' }, { value: '', formula: '=CUSFUNC(B1,A1)' }] },
                        { cells: [{ value: '2' }, { value: '3' }, { value: '', formula: '=ADDSUM(A2,B2)' }, { value: '', formula: '=CUSFUNC(B2,A2)' }] },
                        { cells: [{ value: '4' }, { value: '5' }, { value: '', formula: '=ADDSUM(A3,B3)' }, { value: '', formula: '=CUSFUNC(B3,A3)' }] },
                        { cells: [{ value: '5' }, { value: '5' }, { value: '', formula: '=ADDSUM(A4,B4)' }, { value: '', formula: '=CUSFUNC(B4,A4)' }] },
                        { cells: [{ value: '5' }, { value: '6' }, { value: '', formula: '=ADDSUM(A5,B5)' }, { value: '', formula: '=CUSFUNC(B5,A5)' }] },
                        { cells: [{ value: '10' }, { value: '20' }, { value: '', formula: '=STDEV.S(A6,B6)' }] },
                        { cells: [{ value: '10' }, { value: '20' }, { value: '', formula: '=STDEV.C(A7,B7)' }] },
                        { cells: [{ value: '10' }, { value: '20' }, { value: '', formula: '=STDEV.A(A8,B8)' }, {value: '', formula: '=SUM(STDEV.S(A6,B6),STDEV.S(A5,B5))'}] }
                        ],
                        columns: [
                            { width: 110 }, { width: 115 }, { width: 110 }, { width: 100 }
                        ]
                    }
                ],
                beforeDataBound: (): void => {
                    const spreadsheet: Spreadsheet = helper.getInstance();
                    spreadsheet.addCustomFunction(addSum, 'ADDSUM');
                    spreadsheet.addCustomFunction(cusFunc, 'CUSFUNC');
                    spreadsheet.addCustomFunction(customFunction, 'STDEV.S');
                    spreadsheet.addCustomFunction(customFunction1, 'STDEV.C');
                }
            },
                done);
        });
        afterEach(() => {
            helper.invoke('destroy');
        });
        it('Custom function calculated values are not updated properly in cell data binding', (done: Function) => {
            expect(helper.getInstance().sheets[0].rows[0].cells[2].formula).toEqual('=ADDSUM(A1,B1)');
            expect(helper.getInstance().sheets[0].rows[0].cells[2].value).toEqual("12");
            expect(helper.getInstance().sheets[0].rows[1].cells[2].formula).toEqual('=ADDSUM(A2,B2)');
            expect(helper.getInstance().sheets[0].rows[1].cells[2].value).toEqual("23");
            expect(helper.getInstance().sheets[0].rows[2].cells[2].formula).toEqual('=ADDSUM(A3,B3)');
            expect(helper.getInstance().sheets[0].rows[2].cells[2].value).toEqual("45");
            expect(helper.getInstance().sheets[0].rows[3].cells[2].formula).toEqual('=ADDSUM(A4,B4)');
            expect(helper.getInstance().sheets[0].rows[3].cells[2].value).toEqual("55");
            expect(helper.getInstance().sheets[0].rows[4].cells[2].formula).toEqual('=ADDSUM(A5,B5)');
            expect(helper.getInstance().sheets[0].rows[4].cells[2].value).toEqual("56");
            done();
        });
        it('Nested IF formula which contains Index formula returns wrong value', (done: Function) => {
            helper.edit('A1', 'test');
            helper.edit('B1', '=IF(INDEX(A1:A2,1,1)="TEST",TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[0].cells[1].formula).toEqual('=IF(INDEX(A1:A2,1,1)="TEST",TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[0].cells[1].value).toEqual("TRUE");
            helper.edit('B1', '=IF(IF(A1="TEST","TEST","SET")=A1,TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[0].cells[1].formula).toEqual('=IF(IF(A1="TEST","TEST","SET")=A1,TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[0].cells[1].value).toEqual("TRUE");
            helper.edit('A2', '2');
            helper.edit('B2', '=IF(INDEX(A1:A2,2,1)=2,1,2)');
            expect(helper.getInstance().sheets[0].rows[1].cells[1].formula).toEqual('=IF(INDEX(A1:A2,2,1)=2,1,2)');
            expect(helper.getInstance().sheets[0].rows[1].cells[1].value).toEqual("1");
            helper.edit('B2', '=IF(INDEX(A1:A2,2,1)=A2,1,2)');
            expect(helper.getInstance().sheets[0].rows[1].cells[1].formula).toEqual('=IF(INDEX(A1:A2,2,1)=A2,1,2)');
            expect(helper.getInstance().sheets[0].rows[1].cells[1].value).toEqual("1");
            helper.edit('A3', '5');
            helper.edit('B3', '=IF(IF(A3=5,"test","set")="test",TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[2].cells[1].formula).toEqual('=IF(IF(A3=5,"test","set")="test",TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[2].cells[1].value).toEqual("TRUE");
            helper.edit('A4', 'tests');
            helper.edit('B4', '=IF(IF(A4="test","test","set")="test",TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[3].cells[1].formula).toEqual('=IF(IF(A4="test","test","set")="test",TRUE,FALSE)');
            expect(helper.getInstance().sheets[0].rows[3].cells[1].value).toEqual("FALSE");
            done();
        });
        it('Calling refresh() removes custom functions reference from spreadsheet', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            spreadsheet.refresh();
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[2].formula).toEqual('=ADDSUM(A1,B1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[2].value).toEqual("12");
                expect(helper.getInstance().sheets[0].rows[0].cells[3].formula).toEqual('=CUSFUNC(B1,A1)');
                expect(helper.getInstance().sheets[0].rows[0].cells[3].value).toEqual("21");
                expect(helper.getInstance().sheets[0].rows[1].cells[2].formula).toEqual('=ADDSUM(A2,B2)');
                expect(helper.getInstance().sheets[0].rows[1].cells[2].value).toEqual("23");
                expect(helper.getInstance().sheets[0].rows[1].cells[3].formula).toEqual('=CUSFUNC(B2,A2)');
                expect(helper.getInstance().sheets[0].rows[1].cells[3].value).toEqual("32");
                expect(helper.getInstance().sheets[0].rows[2].cells[2].formula).toEqual('=ADDSUM(A3,B3)');
                expect(helper.getInstance().sheets[0].rows[2].cells[2].value).toEqual("45");
                expect(helper.getInstance().sheets[0].rows[2].cells[3].formula).toEqual('=CUSFUNC(B3,A3)');
                expect(helper.getInstance().sheets[0].rows[2].cells[3].value).toEqual("54");
                expect(helper.getInstance().sheets[0].rows[3].cells[2].formula).toEqual('=ADDSUM(A4,B4)');
                expect(helper.getInstance().sheets[0].rows[3].cells[2].value).toEqual("55");
                expect(helper.getInstance().sheets[0].rows[3].cells[3].formula).toEqual('=CUSFUNC(B4,A4)');
                expect(helper.getInstance().sheets[0].rows[3].cells[3].value).toEqual("55");
                expect(helper.getInstance().sheets[0].rows[4].cells[2].formula).toEqual('=ADDSUM(A5,B5)');
                expect(helper.getInstance().sheets[0].rows[4].cells[2].value).toEqual("56");
                expect(helper.getInstance().sheets[0].rows[4].cells[3].formula).toEqual('=CUSFUNC(B5,A5)');
                expect(helper.getInstance().sheets[0].rows[4].cells[3].value).toEqual("65");
                done();
            });
        });
        it('should correctly calculate the custom STDEV.S formula', (done: Function) => {
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[5].cells[2].formula).toEqual('=STDEV.S(A6,B6)');
                expect(helper.getInstance().sheets[0].rows[5].cells[2].value).toEqual(15);
                expect(helper.getInstance().sheets[0].rows[6].cells[2].formula).toEqual('=STDEV.C(A7,B7)');
                expect(helper.getInstance().sheets[0].rows[6].cells[2].value).toEqual("#NAME?");
                expect(helper.getInstance().sheets[0].rows[7].cells[2].formula).toEqual('=STDEV.A(A8,B8)');
                expect(helper.getInstance().sheets[0].rows[7].cells[2].value).toEqual("#NAME?");
                expect(helper.getInstance().sheets[0].rows[7].cells[3].formula).toEqual('=SUM(STDEV.S(A6,B6),STDEV.S(A5,B5))');
                expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toEqual('20.5');
                done();
            });
        });
    });

    describe('AND Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('AND Formula with direct values as number arguments ->', (done: Function) => {
            helper.edit('J1', '=AND(0)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('FALSE');
            helper.edit('J2', '=AND(1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('TRUE');
            helper.edit('J3', '=AND(-321)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('TRUE');
            helper.edit('J4', '=AND(55930332)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('TRUE');
            helper.edit('J5', '=AND(-323.12)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('TRUE');
            helper.edit('J6', '=AND(10,0)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('FALSE');
            helper.edit('J7', '=AND(12,-12)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('TRUE');
            helper.edit('J8', '=AND(1.323)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('TRUE');
            done();
        });
        it('AND Formula with direct values as boolean arguments ->', (done: Function) => {
            helper.edit('J9', '=AND(TRUE)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('TRUE');
            helper.edit('J10', '=AND(FALSE)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('FALSE');
            helper.edit('J11', '=AND("TRUE")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('TRUE');
            helper.edit('J12', '=AND("FALSE")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('FALSE');
            helper.edit('J13', '=AND(TRUE,TRUE)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('TRUE');
            helper.edit('J14', '=AND(TRUE,FALSE)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('FALSE');
            helper.edit('J15', '=AND(FALSE,TRUE)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('FALSE');
            helper.edit('J16', '=AND(FALSE,FALSE)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('FALSE');
            helper.edit('J17', '=AND(TRUE,"true")');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('TRUE');
            helper.edit('J18', '=AND(TRUE,TRUE,TRUE,FALSE)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J19', '=AND("HELLO")');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('#VALUE!');
            helper.edit('J20', '=AND(World)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('#NAME?');
            helper.edit('J21', '=AND("hello"=hello)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#NAME?');
            helper.edit('J22', '=AND(12,32,"re")');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('TRUE');
            helper.edit('J23', '=AND(32,"Hello","32")');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('TRUE');
            done();
        });
        it('AND Formula with direct values as expression ->', (done: Function) => {
            helper.edit('K1', '=AND(1=1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('TRUE');
            helper.edit('K2', '=AND(12="12")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('FALSE');
            helper.edit('K3', '=AND(1=3,3=1)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('FALSE');
            helper.edit('K4', '=AND(1=1,11<>12)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('TRUE');
            helper.edit('K5', '=AND(1+2 =5)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('FALSE');
            helper.edit('K6', '=AND(1-32=-31)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('TRUE');
            helper.edit('K7', '=AND(1+13,2+43)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('TRUE');
            helper.edit('K8', '=AND(12-13,0)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with single cell references as arguments ->', (done: Function) => {
            helper.edit('K9', '=AND(A3)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#VALUE!');
            helper.edit('K10', '=AND(B4)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('TRUE');
            helper.edit('K11', '=AND(C5)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('TRUE');
            helper.edit('K12', '=AND(D6)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('TRUE');
            helper.edit('K13', '=AND(I7)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('TRUE');
            helper.edit('K14', '=AND(I9)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('TRUE');
            helper.edit('K15', '=AND(I10)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('FALSE');
            helper.edit('K16', '=AND(I11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#VALUE!');
            helper.edit('K17', '=AND(I13)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('TRUE');
            helper.edit('K18', '=AND(I15)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('TRUE');
            helper.edit('K19', '=AND(I17)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('TRUE');
            helper.edit('K20', '=AND(I20)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('TRUE');
            helper.edit('K21', '=AND(F15)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('AND Formula with multiple kind of arguments  ->', (done: Function) => {
            helper.edit('K22', '=AND(A5,I11,12)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('TRUE');
            helper.edit('K23', '=AND(B5,B7,B8,B11,B3)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('TRUE');
            helper.edit('K24', '=AND(C3,C7,B7,C9)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('TRUE');
            helper.edit('K25', '=AND(B3:B9)');
            expect(helper.invoke('getCell', [24, 10]).textContent).toBe('TRUE');
            helper.edit('K26', '=AND(A6,A11,A15,B23,D17)');
            expect(helper.invoke('getCell', [25, 10]).textContent).toBe('#VALUE!');
            helper.edit('K27', '=AND(I10,G6,12,"12",D4:D7)');
            expect(helper.invoke('getCell', [26, 10]).textContent).toBe('FALSE');
            helper.edit('K28', '=AND(A2:A5,"*A")');
            expect(helper.invoke('getCell', [27, 10]).textContent).toBe('#VALUE!');
            helper.edit('K29', '=AND(A2:A5,"c*")');
            expect(helper.invoke('getCell', [28, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('AND Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('L1', '=AND(A4<A7)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('TRUE');
            helper.edit('L2', '=AND(A4>A7)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('FALSE');
            helper.edit('L3', '=AND(D6>=E5)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('TRUE');
            helper.edit('L4', '=AND(D6<=E5)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('FALSE');
            helper.edit('L5', '=AND(D4=D3,D2=H2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('TRUE');
            helper.edit('L6', '=AND(H6<>H7)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('TRUE');
            done();
        });
        it('AND Formula with expression and cell references as arguments ->', (done: Function) => {
            helper.edit('L7', '=AND(H4+I6+H10=E8)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('FALSE');
            helper.edit('L8', '=AND(A9+A10 =A11)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            helper.edit('L9', '=AND(E8-E9-F10=D6)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('FALSE');
            helper.edit('L10', '=AND(H8-F6<>F4)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('TRUE');
            helper.edit('L11', '=AND(H7+34+D10-F9*A20=0,0)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L12', '=IF(AND(0),1,3)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('3');
            helper.edit('L13', '=IF(AND(10=H2,E2=20),"Hello","fake")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('Hello');
            helper.edit('L14', '=IF(AND(I2,I4,),100,200)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('200');
            helper.edit('L15', '=IF(1=1,AND(E2>=20,E8>=20),32)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('FALSE');
            helper.edit('L16', '=IFS(AND(TRUE,1),10, AND(10,0),20)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('10');
            helper.edit('L17', '=IFS(AND(TRUE,0),10, AND(10,21),20)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('20');
            done();
        });
        it('AND Formula with basic cases as arguments ->', (done: Function) => {
            helper.edit('L18', '=AND(1=1,2=2,3=3)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('TRUE');
            helper.edit('L19', '=AND(1=2,2=3,3=4)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('FALSE');
            helper.edit('L20', '=AND(D2>1,D4>3)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('TRUE');
            helper.edit('L21', '=IF(AND(E3>100,E3>20),"Yes","No")');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('No');
            helper.edit('L22', '=AND(H4=27,B6<DATE(2023,10,22))');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('TRUE');
            helper.edit('L23', '=AND(21,"12")');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('TRUE');
            done();
        });
        it('AND Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('M1', '=AND($B$2)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('TRUE');
            helper.edit('M2', '=AND($I$4)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('FALSE');
            helper.edit('M3', '=AND($H$4=27,$B$6<DATE(2023,10,22))');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('TRUE');
            helper.edit('M4', '=AND($D$4=$D$3,$D$2=$H$2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('TRUE');
            helper.edit('M5', '=AND($D$4>$D$7,$H$6+20=90)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M6', '=AND(Sheet2!A5,Sheet1!G6)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('TRUE');
            helper.edit('M7', '=AND(Sheet1!G4<Sheet1!G5,Sheet2!A3<Sheet2!A2)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('TRUE');
            helper.edit('M8', '=AND(Sheet1!H10,Sheet2!A8)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('FALSE');
            helper.edit('M9', '=AND(Sheet1!G4,Sheet1!G7,Sheet1!I6,Sheet1!J7)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('TRUE');
            helper.edit('M10', '=AND(F4=300,Sheet1!F7,Sheet2!A6)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M11', '=AND(Sheet2!$A$5,Sheet1!G6>Sheet1!E3)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('FALSE');
            helper.edit('M12', '=AND(Sheet2!$A$5,Sheet1!$G$6<Sheet1!$E$3)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('TRUE');
            helper.edit('M13', '=AND(Sheet1!$G$4<Sheet1!$G$5,Sheet2!$A$3<Sheet2!$A$2)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('TRUE');
            helper.edit('M14', '=AND($F$4=300,Sheet1!$F$7,Sheet2!$A$6)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('FALSE');
            helper.edit('M15', '=AND(Sheet2!$A$5,Sheet1!$G$6)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('TRUE');
            helper.edit('M16', '=AND(Sheet1!$H$10,Sheet2!$A$8)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M17', '=AND("")');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#VALUE!');
            helper.edit('M18', '=AND(NAME)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('#NAME?');
            helper.edit('M19', '=AND(,,)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('FALSE');
            helper.edit('M20', '=AND(1="1")');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('FALSE');
            helper.edit('M21', '=AND(,12)');
            expect(helper.invoke('getCell', [20, 12]).textContent).toBe('FALSE');
            helper.edit('M22', '=AND(E14,E15,E17,E18)');
            expect(helper.invoke('getCell', [21, 12]).textContent).toBe('#VALUE!');
            helper.edit('M23', '=AND(E15,)');
            expect(helper.invoke('getCell', [22, 12]).textContent).toBe('FALSE');
            done();
        });
        it('AND Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=AND()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=AND()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N15', '=AND(0)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('FALSE');
            done();
        });
    });

    describe('OR Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('OR Formula with direct values as number arguments ->', (done: Function) => {
            helper.edit('J1', '=OR(0)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('FALSE');
            helper.edit('J2', '=OR(1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('TRUE');
            helper.edit('J3', '=OR(-321)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('TRUE');
            helper.edit('J4', '=OR(55930332)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('TRUE');
            helper.edit('J5', '=OR(-323.12)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('TRUE');
            helper.edit('J6', '=OR(10,0)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('TRUE');
            helper.edit('J7', '=OR(12,-12)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('TRUE');
            helper.edit('J8', '=OR(1.323)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with direct values as boolean arguments ->', (done: Function) => {
            helper.edit('J9', '=OR(TRUE)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('TRUE');
            helper.edit('J10', '=OR(FALSE)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('FALSE');
            helper.edit('J11', '=OR("TRUE")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('TRUE');
            helper.edit('J12', '=OR("FALSE")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('FALSE');
            helper.edit('J13', '=OR(TRUE,TRUE)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('TRUE');
            helper.edit('J14', '=OR(TRUE,FALSE)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('TRUE');
            helper.edit('J15', '=OR(FALSE,TRUE)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('TRUE');
            helper.edit('J16', '=OR(FALSE,FALSE)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('FALSE');
            helper.edit('J17', '=OR(TRUE,"true")');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('TRUE');
            helper.edit('J18', '=OR(TRUE,TRUE,TRUE,FALSE)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J19', '=OR("HELLO")');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('#VALUE!');
            helper.edit('J20', '=OR(World)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('#NAME?');
            helper.edit('J21', '=OR("hello"=hello)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#NAME?');
            helper.edit('J22', '=OR(12,32,"re")');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('TRUE');
            helper.edit('J23', '=OR(32,"Hello","32")');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with direct values as expression ->', (done: Function) => {
            helper.edit('K1', '=OR(1=1)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('TRUE');
            helper.edit('K2', '=OR(12="12")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('FALSE');
            helper.edit('K3', '=OR(1=3,3=1)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('FALSE');
            helper.edit('K4', '=OR(1=1,11<>12)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('TRUE');
            helper.edit('K5', '=OR(1+2 =5)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('FALSE');
            helper.edit('K6', '=OR(1-32=-31)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('TRUE');
            helper.edit('K7', '=OR(1+13,2+43)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('TRUE');
            helper.edit('K8', '=OR(12-13,0)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with single cell references as arguments ->', (done: Function) => {
            helper.edit('K9', '=OR(A3)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('#VALUE!');
            helper.edit('K10', '=OR(B4)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('TRUE');
            helper.edit('K11', '=OR(C5)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('TRUE');
            helper.edit('K12', '=OR(D6)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('TRUE');
            helper.edit('K13', '=OR(I7)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('TRUE');
            helper.edit('K14', '=OR(I9)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('TRUE');
            helper.edit('K15', '=OR(I10)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('FALSE');
            helper.edit('K16', '=OR(I11)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('#VALUE!');
            helper.edit('K17', '=OR(I13)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('TRUE');
            helper.edit('K18', '=OR(I15)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('TRUE');
            helper.edit('K19', '=OR(I17)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('TRUE');
            helper.edit('K20', '=OR(I20)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('TRUE');
            helper.edit('K21', '=OR(F15)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('OR Formula with multiple kind of arguments  ->', (done: Function) => {
            helper.edit('K22', '=OR(A5,I11,12)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('TRUE');
            helper.edit('K23', '=OR(B5,B7,B8,B11,B3)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('TRUE');
            helper.edit('K24', '=OR(C3,C7,B7,C9)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('TRUE');
            helper.edit('K25', '=OR(B3:B9)');
            expect(helper.invoke('getCell', [24, 10]).textContent).toBe('TRUE');
            helper.edit('K26', '=OR(A6,A11,A15,B23,D17)');
            expect(helper.invoke('getCell', [25, 10]).textContent).toBe('#VALUE!');
            helper.edit('K27', '=OR(I10,G6,12,"12",D4:D7)');
            expect(helper.invoke('getCell', [26, 10]).textContent).toBe('TRUE');
            helper.edit('K28', '=OR(A2:A5,"*A")');
            expect(helper.invoke('getCell', [27, 10]).textContent).toBe('#VALUE!');
            helper.edit('K29', '=OR(A2:A5,"c*")');
            expect(helper.invoke('getCell', [28, 10]).textContent).toBe('#VALUE!');
            done();
        });
        it('OR Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('L1', '=OR(A4<A7)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('TRUE');
            helper.edit('L2', '=OR(A4>A7)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('FALSE');
            helper.edit('L3', '=OR(D6>=E5)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('TRUE');
            helper.edit('L4', '=OR(D6<=E5)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('FALSE');
            helper.edit('L5', '=OR(D4=D3,D2=H2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('TRUE');
            helper.edit('L6', '=OR(H6<>H7)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with expression and cell references as arguments ->', (done: Function) => {
            helper.edit('L7', '=OR(H4+I6+H10=E8)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('FALSE');
            helper.edit('L8', '=OR(A9+A10 =A11)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            helper.edit('L9', '=OR(E8-E9-F10=D6)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('FALSE');
            helper.edit('L10', '=OR(H8-F6<>F4)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('TRUE');
            helper.edit('L11', '=OR(H7+34+D10-F9*A20=0,0)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('FALSE');
            done();
        });
        it('OR Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L12', '=IF(OR(0),1,3)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('3');
            helper.edit('L13', '=IF(OR(10=H2,E2=20),"Hello","fake")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('Hello');
            helper.edit('L14', '=IF(OR(I2,I4,),100,200)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('100');
            helper.edit('L15', '=IF(1=1,OR(E2>=20,E8>=20),32)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('TRUE');
            helper.edit('L16', '=IFS(OR(TRUE,1),10, OR(10,0),20)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('10');
            helper.edit('L17', '=IFS(OR(0,0),10, OR(10,-12),20)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('20');
            done();
        });
        it('OR Formula with basic cases as arguments ->', (done: Function) => {
            helper.edit('L18', '=OR(1=1,2=2,3=3)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('TRUE');
            helper.edit('L19', '=OR(1=2,2=3,3=4)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('FALSE');
            helper.edit('L20', '=OR(D2>1,D4>3)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('TRUE');
            helper.edit('L21', '=IF(OR(E3>100,E3>20),"Yes","No")');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('Yes');
            helper.edit('L22', '=OR(H4=27,B6<DATE(2023,10,22))');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('TRUE');
            helper.edit('L23', '=OR(21,"12")');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('M1', '=OR($B$2)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('TRUE');
            helper.edit('M2', '=OR($I$4)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('FALSE');
            helper.edit('M3', '=OR($H$4=27,$B$6<DATE(2023,10,22))');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('TRUE');
            helper.edit('M4', '=OR($D$4=$D$3,$D$2=$H$2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('TRUE');
            helper.edit('M5', '=OR($D$4>$D$7,$H$6+20=90)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M6', '=OR(Sheet2!A5,Sheet1!G6)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('TRUE');
            helper.edit('M7', '=OR(Sheet1!G4<Sheet1!G5,Sheet2!A3<Sheet2!A2)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('TRUE');
            helper.edit('M8', '=OR(Sheet1!H10,Sheet2!A8)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('TRUE');
            helper.edit('M9', '=OR(Sheet1!G4,Sheet1!G7,Sheet1!I6,Sheet1!J7)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('TRUE');
            helper.edit('M10', '=OR(F4=300,Sheet1!F7,Sheet2!A6)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('M11', '=OR(Sheet2!$A$5,Sheet1!G6>Sheet1!E3)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('TRUE');
            helper.edit('M12', '=OR(Sheet2!$A$5,Sheet1!$G$6<Sheet1!$E$3)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('TRUE');
            helper.edit('M13', '=OR(Sheet1!$G$4<Sheet1!$G$5,Sheet2!$A$3<Sheet2!$A$2)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('TRUE');
            helper.edit('M14', '=OR($F$4=300,Sheet1!$F$7,Sheet2!$A$6)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('TRUE');
            helper.edit('M15', '=OR(Sheet2!$A$5 = 10,Sheet1!$G$6 = 20)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('FALSE');
            helper.edit('M16', '=OR(Sheet1!$H$10,Sheet2!$A$8)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('TRUE');
            done();
        });
        it('OR Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M17', '=OR("")');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#VALUE!');
            helper.edit('M18', '=OR(NAME)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('#NAME?');
            helper.edit('M19', '=OR(,,)');
            expect(helper.invoke('getCell', [18, 12]).textContent).toBe('FALSE');
            helper.edit('M20', '=OR(1="1",0)');
            expect(helper.invoke('getCell', [19, 12]).textContent).toBe('FALSE');
            helper.edit('M21', '=OR(,12)');
            expect(helper.invoke('getCell', [20, 12]).textContent).toBe('TRUE');
            helper.edit('M22', '=OR(E14,E15,E17,E18)');
            expect(helper.invoke('getCell', [21, 12]).textContent).toBe('#VALUE!');
            helper.edit('M23', '=OR(E15,)');
            expect(helper.invoke('getCell', [22, 12]).textContent).toBe('FALSE');
            done();
        });
        it('OR Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=OR()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=OR()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N15', '=OR(0,1)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('TRUE');
            done();
        });
    });

    describe('EJ2-850741 -> NOT Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('NOT Formula with direct values as numbers arguments ->', (done: Function) => {
            helper.edit('J1', '=NOT(0)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('TRUE');
            helper.edit('J2', '=NOT(1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('FALSE');
            helper.edit('J3', '=NOT(-1)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('FALSE');
            helper.edit('J4', '=NOT(55930332)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('FALSE');
            helper.edit('J5', '=NOT(-323.12)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('FALSE');
            done();
        });
        it('NOT Formula with direct values as boolean arguments ->', (done: Function) => {
            helper.edit('J6', '=NOT(TRUE)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('FALSE');
            helper.edit('J7', '=NOT(FALSE)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('TRUE');
            helper.edit('J8', '=NOT("TRUE")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('FALSE');
            helper.edit('J9', '=NOT("FALSE")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('TRUE');
            helper.edit('J10', '=NOT(I3)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('FALSE');
            helper.edit('J11', '=NOT(I4)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('TRUE');
            done();
        });
        it('NOT Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J12', '=NOT("HELLO")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#VALUE!');
            helper.edit('J13', '=NOT("Hello123")');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('#VALUE!');
            helper.edit('J14', '=NOT("123Hell123")');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#VALUE!');
            helper.edit('J15', '=NOT("123HEllo")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('NOT Formula with direct values as expression ->', (done: Function) => {
            helper.edit('J16', '=NOT(1=1)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('FALSE');
            helper.edit('J17', '=NOT(1=3)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('TRUE');
            helper.edit('J18', '=NOT("1"=2)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('TRUE');
            helper.edit('J19', '=NOT("1"="1")');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('FALSE');
            helper.edit('J20', '=NOT("Hello"="ello")');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('TRUE');
            helper.edit('J21', '=NOT(1+1=2)');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('FALSE');
            helper.edit('J22', '=NOT(2+2=5)');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('TRUE');
            helper.edit('J23', '=NOT(12+32-40 =4)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('FALSE');
            done();
        });
        it('NOT Formula with cell references as arguments ->', (done: Function) => {
            helper.edit('K1', '=NOT(A3)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('#VALUE!');
            helper.edit('K2', '=NOT(B4)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('FALSE');
            helper.edit('K3', '=NOT(C5)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('FALSE');
            helper.edit('K4', '=NOT(D6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('FALSE');
            helper.edit('K5', '=NOT(I7)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('FALSE');
            helper.edit('K6', '=NOT(I9)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('FALSE');
            helper.edit('K7', '=NOT(I10)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('TRUE');
            helper.edit('K8', '=NOT(I11)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#VALUE!');
            helper.edit('K9', '=NOT(I13)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('FALSE');
            helper.edit('K10', '=NOT(I15)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('FALSE');
            helper.edit('K11', '=NOT(I17)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('FALSE');
            helper.edit('K12', '=NOT(I20)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('FALSE');
            done();
        });
        it('NOT Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('K13', '=NOT(E3>32)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('TRUE');
            helper.edit('K14', '=NOT(E3<32)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('FALSE');
            helper.edit('K15', '=NOT(F5<=F6)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('FALSE');
            helper.edit('K16', '=NOT(F5>=F6)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('FALSE');
            helper.edit('K17', '=NOT(F5=F6)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('FALSE');
            helper.edit('K18', '=NOT(F5<>F6)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('TRUE');
            done();
        });
        it('NOT Formula with expression and cell references as arguments ->', (done: Function) => {
            helper.edit('K19', '=NOT(H4+I6+H10=E8)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('TRUE');
            helper.edit('K20', '=NOT(A9+A10 =A11)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('#VALUE!');
            helper.edit('K21', '=NOT(E8-E9-F10=D6)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('TRUE');
            helper.edit('K22', '=NOT(H8-F6<>F4)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('FALSE');
            helper.edit('K23', '=NOT(H7+34+D10-F9*A20=0)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('TRUE');
            helper.edit('K24', '=NOT(A15)');
            expect(helper.invoke('getCell', [23, 10]).textContent).toBe('TRUE');
            done();
        });
        it('NOT Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L1', '=IF(NOT(TRUE),"HI","DK")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('DK');
            helper.edit('L2', '=IF(NOT(0),"HI","DK")');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('HI');
            helper.edit('L3', '=NOT(OR(1=1,2=3))');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('FALSE');
            helper.edit('L4', '=NOT(AND(0=1,1=1))');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('TRUE');
            helper.edit('L5', '=OR(1=1,0=1)*NOT(AND(0=1,1=1))');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('1');
            helper.edit('L6', '=NOT(AND(0))');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('TRUE');
            helper.edit('L7', '=NOT("10/01/2023" = DATE(2023,10,1))');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('TRUE');
            helper.edit('L8', '=IFS(NOT(FALSE),10, NOT(0),20)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('10');
            helper.edit('L9', '=IFS(NOT(TRUE),10, NOT(0),20)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('20');
            done();
        });
        it('NOT Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('L10', '=NOT($B$2)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('FALSE');
            helper.edit('L11', '=NOT($I$4)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('TRUE');
            helper.edit('L12', '=NOT($E$1>$E$3)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('FALSE');
            helper.edit('L13', '=NOT($F$2+$E$2 =$F$3)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('TRUE');
            done();
        });
        it('NOT Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('L14', '=NOT(Sheet1!F2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('FALSE');
            helper.edit('L15', '=NOT(Sheet2!A2)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('FALSE');
            helper.edit('L16', '=NOT(Sheet1!A10 * Sheet2!A5 = Sheet1!H10)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#VALUE!');
            helper.edit('L17', '=NOT(Sheet1!D31+Sheet2!A3 = 30)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('TRUE');
            helper.edit('L18', '=NOT(E9-E11=Sheet1!I10)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('FALSE');
            done();
        });
        it('NOT Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('L19', '=NOT($E$9-$E$11=Sheet1!I10)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('FALSE');
            helper.edit('L20', '=NOT(E9-E11=Sheet1!$I$10)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('FALSE');
            helper.edit('L21', '=NOT(Sheet1!$A$10 * Sheet2!$A$5 = Sheet1!$H$10)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('#VALUE!');
            helper.edit('L22', '=NOT(Sheet1!$D$31+Sheet2!$A$3 = 30)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('TRUE');
            helper.edit('L23', '=NOT(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('FALSE');
            helper.edit('L24', '=NOT(Sheet1!$A$2)');
            expect(helper.invoke('getCell', [23, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('NOT Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M1', '=NOT("")');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#VALUE!');
            helper.edit('M2', '=NOT(IF(1=1,T,F))');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NAME?');
            helper.edit('M3', '=NOT(HELLO)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#NAME?');
            helper.edit('M4', '=NOT("@")');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('NOT Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('M5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=NOT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=NOT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M5', '=NOT(0)');
            spreadsheet.selectRange('M6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=NOT(12,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=NOT(12,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M6', '=NOT(1)');
            spreadsheet.selectRange('M7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=NOT(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=NOT(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog2: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M7', '=NOT(0)');
            done();
        });
    });

    describe('EJ2-850735 -> SQRT Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Different data' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '103.32' }] },
                        { cells: [{ index: 8, value: '105.36' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'TRUE' }] }, { cells: [{ value: 'FALSE' }] },
                        { cells: [{ value: 'FALSE' }] }, { cells: [{ value: '0' }] }, { cells: [{ value: '1' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SQRT Formula with direct values as numbers arguments ->', (done: Function) => {
            helper.edit('J1', '=SQRT(121)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('11');
            helper.edit('J2', '=SQRT(0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            helper.edit('J3', '=SQRT(21232323)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('4607.85449');
            helper.edit('J4', '=SQRT(-3221)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#NUM!');
            helper.edit('J5', '=SQRT(2121.232)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('46.05683445');
            done();
        });
        it('SQRT Formula with direct values and cell references as boolean arguments ->', (done: Function) => {
            helper.edit('J6', '=SQRT(TRUE)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('1');
            helper.edit('J7', '=SQRT(FALSE)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            helper.edit('J8', '=SQRT("TRUE")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('#VALUE!');
            helper.edit('J9', '=SQRT("FALSE")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('#VALUE!');
            helper.edit('J10', '=SQRT(I3)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('1');
            helper.edit('J11', '=SQRT(I4)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0');
            done();
        });
        it('SQRT Formula with direct values as string arguments ->', (done: Function) => {
            helper.edit('J12', '=SQRT("HELLO")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('#VALUE!');
            helper.edit('J13', '=SQRT("Hello123")');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('#VALUE!');
            helper.edit('J14', '=SQRT("123Hell123")');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('#VALUE!');
            helper.edit('J15', '=SQRT("123HEllo")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('#VALUE!');
            done();
        });
        it('SQRT Formula with direct values as expression ->', (done: Function) => {
            helper.edit('J16', '=SQRT(1+3)');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('2');
            helper.edit('J17', '=SQRT(32323+33)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('179.8777363');
            helper.edit('J18', '=SQRT(90-3232)');
            expect(helper.invoke('getCell', [17, 9]).textContent).toBe('#NUM!');
            helper.edit('J19', '=SQRT(32322*3232-3223)');
            expect(helper.invoke('getCell', [18, 9]).textContent).toBe('10220.63995');
            helper.edit('J20', '=SQRT(1+32-22)');
            expect(helper.invoke('getCell', [19, 9]).textContent).toBe('3.31662479');
            helper.edit('J21', '=SQRT(1+"HELLO")');
            expect(helper.invoke('getCell', [20, 9]).textContent).toBe('#VALUE!');
            helper.edit('J22', '=SQRT(121.323-32.3232)');
            expect(helper.invoke('getCell', [21, 9]).textContent).toBe('9.433970532');
            helper.edit('J23', '=SQRT(1>5)');
            expect(helper.invoke('getCell', [22, 9]).textContent).toBe('0');
            done();
        });
        it('SQRT Formula with cell references as arguments ->', (done: Function) => {
            helper.edit('K1', '=SQRT(A3)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('#VALUE!');
            helper.edit('K2', '=SQRT(B4)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('204.565393');
            helper.edit('K3', '=SQRT(C5)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0.516330536');
            helper.edit('K4', '=SQRT(D6)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('5.477225575');
            helper.edit('K5', '=SQRT(I7)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('10.26450194');
            helper.edit('K6', '=SQRT(I9)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#NUM!');
            helper.edit('K7', '=SQRT(I10)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0');
            helper.edit('K8', '=SQRT(I11)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#VALUE!');
            helper.edit('K9', '=SQRT(I13)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('10.90871211');
            helper.edit('K10', '=SQRT(I15)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('10.90871211');
            helper.edit('K11', '=SQRT(I17)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('3.464101615');
            helper.edit('K12', '=SQRT(I20)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('10.72380529');
            done();
        });
        it('SQRT Formula with operator and cell references as arguments ->', (done: Function) => {
            helper.edit('K13', '=SQRT(E3>32)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('0');
            helper.edit('K14', '=SQRT(E3<32)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('1');
            helper.edit('K15', '=SQRT(F5<=F6)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('1');
            helper.edit('K16', '=SQRT(F5>=F6)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('1');
            helper.edit('K17', '=SQRT(F5=F6)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('1');
            helper.edit('K18', '=SQRT(F5<>F6)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('0');
            done();
        });
        it('SQRT Formula with expression and cell references as arguments ->', (done: Function) => {
            helper.edit('K19', '=SQRT(H4+I6+H10=E8)');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('0');
            helper.edit('K20', '=SQRT(A9+A10 =A11)');
            expect(helper.invoke('getCell', [19, 10]).textContent).toBe('#VALUE!');
            helper.edit('K21', '=SQRT(E8-E9-F10=D6)');
            expect(helper.invoke('getCell', [20, 10]).textContent).toBe('0');
            helper.edit('K22', '=SQRT(H8-F6<>F4)');
            expect(helper.invoke('getCell', [21, 10]).textContent).toBe('1');
            helper.edit('K23', '=SQRT(H7+34+D10-F9*A20=0)');
            expect(helper.invoke('getCell', [22, 10]).textContent).toBe('0');
            done();
        });
        it('SQRT Formula with Nested formula value as arguments ->', (done: Function) => {
            helper.edit('L1', '=SQRT(ABS(-9))');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('3');
            helper.edit('L2', '=SQRT(SUM(12,21))');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('5.744562647');
            helper.edit('L3', '=SUM(SQRT(121),0)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('11');
            helper.edit('L4', '=IF(SQRT(121)> 100, 10,20)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('20');
            helper.edit('L5', '=IF(SQRT(121)< 100, 10,20)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('10');
            helper.edit('L6', '=SQRT(OR(10,20))');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('1');
            helper.edit('L7', '=MEDIAN(SQRT(G10),2,10,20)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('6.732050808');
            helper.edit('L8', '=AND(SQRT(132))');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('TRUE');
            helper.edit('L9', '=NOT(SQRT(0))');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('TRUE');
            done();
        });
        it('SQRT Formula with absolute cell refernces as arguments ->', (done: Function) => {
            helper.edit('L10', '=SQRT($I$19)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('1.414213562');
            helper.edit('L11', '=SQRT($A$11)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#VALUE!');
            helper.edit('L12', '=SQRT($E$1>$E$3)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('1');
            helper.edit('L13', '=SQRT($F$2+$E$2=$F$3)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0');
            done();
        });
        it('SQRT Formula with Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('L14', '=SQRT(Sheet1!F2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('14.14213562');
            helper.edit('L15', '=SQRT(Sheet2!A2)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('4.472135955');
            helper.edit('L16', '=SQRT(Sheet1!A10 * Sheet2!A5 = Sheet1!H10)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#VALUE!');
            helper.edit('L17', '=SQRT(Sheet1!D31+Sheet2!A3 = 30)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('0');
            helper.edit('L18', '=SQRT(E9-E11=Sheet1!I10)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('1');
            done();
        });
        it('SQRT Formula with absolute cell of Sheet refernces as arguments ->', (done: Function) => {
            helper.edit('L19', '=SQRT(Sheet1!$I$19)');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('1.414213562');
            helper.edit('L20', '=SQRT(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('4.472135955');
            helper.edit('L21', '=SQRT(Sheet1!$I$9)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('#NUM!');
            helper.edit('L22', '=SQRT(Sheet2!$A$10)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('0');
            helper.edit('L23', '=SQRT(Sheet1!$D$31+Sheet2!$A$3 = 30)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('0');
            helper.edit('L24', '=SQRT(Sheet1!$A$10 * Sheet2!$A$5 = Sheet1!H10)');
            expect(helper.invoke('getCell', [23, 11]).textContent).toBe('#VALUE!');
            done();
        });
        it('SQRT Formula with Worst case value as arguments ->', (done: Function) => {
            helper.edit('M1', '=SQRT("")');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#VALUE!');
            helper.edit('M2', '=SQRT(-1212)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NUM!');
            helper.edit('M3', '=SQRT(HELLO)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#NAME?');
            helper.edit('M4', '=SQRT("@")');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#VALUE!');
            helper.edit('M5', '=SQRT("NEET")');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('SQRT Formula with no inputs and improper arguments->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('M6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SQRT()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SQRT()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M6', '=SQRT(121)');
            spreadsheet.selectRange('M7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SQRT(12,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SQRT(12,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog1: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M7', '=SQRT(10)');
            spreadsheet.selectRange('M8');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SQRT(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SQRT(,)';
            helper.triggerKeyNativeEvent(13);
            const dialog2: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('M8', '=SQRT(0)');
            done();
        });
    });

    describe('IFS Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Decimals' }] }, { cells: [{ index: 8, value: '102.32' }] },
                        { cells: [{ index: 8, value: '105.43' }] }, { cells: [{ index: 8, value: '103.23' }] },
                        { cells: [{ index: 8, value: '1002.2323' }] }, { cells: [{ index: 8, value: '1023.3219' }] },
                        { cells: [{ index: 8, value: '1022.4567' }] }, { cells: [{ index: 8, value: '320.12354' }] },
                        { cells: [{ index: 8, value: '102.45674' }] }, { cells: [{ index: 8, value: '103.32321' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: '#NUM!' }] }, { cells: [{ index: 8, value: '#N/A' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: '-3221' }] }, { cells: [{ index: 8, value: '-1253' }] },
                        { cells: [{ index: 8, value: '0' }] }, { cells: [{ index: 8, value: '119', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '321', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12.56', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '2', format: '0%' }] },
                        { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '12' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '76' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '93' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'ABC' }] }, { cells: [{ value: '50' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('IFS formula with value true arguments as empty->', (done: Function) => {
            helper.edit('J1', '=IFS(D2=10,,F6=200,)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0');
            helper.edit('J2', '=IFS(D2=10,,,)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            helper.edit('J3', '=IFS(E1>10, ,  ,)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=IFS(,)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#N/A');
            helper.edit('J5', '=IFS(H2>5, ,H6=70, , H3<20, )');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            done();
        });
        it('IFS formula with logical test values as string ->', (done: Function) => {
            helper.edit('J6', '=IFS(A9="Loafers",10,A11="T-Shirts",20)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('10');
            helper.edit('J7', '=IFS(A9="LoaFerS",10,A11="T-Shirts",20)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('10');
            helper.edit('J8', '=IFS(A8="LoaferS","HELLO",A11="T-Shirts","BYE")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('BYE');
            helper.edit('J9', '=IFS(A8<>"LoaferS","HELLO",A11="T-Shirts","BYE")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('HELLO');
            helper.edit('J10', '=IFS(A8<>"LoaferS",TRUE,A11="T-Shirts",FALSE)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('TRUE');
            helper.edit('J11', '=IFS(A9<>"LoaferS",TRUE,A11="T-Shirts",FALSE)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('FALSE');
            done();
        });
        it('IFS formula with logical test values as numbers with operator ->', (done: Function) => {
            helper.edit('J12', '=IFS(H8=14,10,H6=70,20)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('10');
            helper.edit('J13', '=IFS(H7=66,"YeS",H6=70,"NaH")');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('YeS');
            helper.edit('J14', '=IFS(H6=10,TRUE,H7=66,FALSE)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('FALSE');
            helper.edit('J15', '=IFS(H8<>14,10,H6=70,20)');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('20');
            helper.edit('J16', '=IFS(H7<>66,"YeS",H6=70,"NaH")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('NaH');
            helper.edit('J17', '=IFS(H6<>10,TRUE,H7=66,FALSE)');
            expect(helper.invoke('getCell', [16, 9]).textContent).toBe('TRUE');
            done();
        });
        it('IFS formula with logical test values as numbers with operators ->', (done: Function) => {
            helper.edit('K1', '=IFS(H7>46,"YeS",H5>45,"NaH",H2>1,"Never")');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('YeS');
            helper.edit('K2', '=IFS(H7>46,TRUE,H5>45,FALSE,H2>1,TRUE)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('TRUE');
            helper.edit('K3', '=IFS(H8<18,10,H5<45,20,H2>1,30)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('10');
            helper.edit('K4', '=IFS(H7<76,"YeS",H5<45,"NaH",H2<10,"Never")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('YeS');
            helper.edit('K5', '=IFS(H8>=14,10,H5>=45,20,H2>=14,30)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('10');
            helper.edit('K6', '=IFS(H6>=80,TRUE,H5>=45,FALSE,H2>=10,TRUE)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('FALSE');
            helper.edit('K7', '=IFS(H7<=66,"YeS",H5<=45,"NaH",H2<=14,"Never")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('YeS');
            helper.edit('K8', '=IFS(H6<=9,TRUE,H5<=45,FALSE,H2<=10,TRUE)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('TRUE');
            done();
        });
        it('IFS formula with logical test values with Logical arguments as input ->', (done: Function) => {
            helper.edit('K9', '=IFS(I16=TRUE,TRUE,I16=FALSE,FALSE,I17<>FALSE,TRUE)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('TRUE');
            helper.edit('K10', '=IFS(I16<>TRUE,TRUE,I18=FALSE,FALSE,I17<>FALSE,TRUE)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('FALSE');
            helper.edit('K11', '=IFS(I16=I15,G11,I16=FALSE,E11,I17<>FALSE,F11)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('9');
            helper.edit('K12', '=IFS(I16<>I15,G11,I16<>I18,E11,I17<>FALSE,F11)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('10');
            done();
        });
        it('IFS formula with logical test values as expression ->', (done: Function) => {
            helper.edit('K13', '=IFS(D2*G2+D3=D6,"PASS",D2*G2+E11=D4,"FAIL")');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('PASS');
            helper.edit('K14', '=IFS(D2*G2+D3=D5,"PASS",D2*G2+E11=D4,"FAIL")');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('FAIL');
            helper.edit('K15', '=IFS(E6+E8*G8=40,H2+H10,E2+E4=35,F11-F2)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('176');
            helper.edit('K16', '=IFS(E6+E8/G2*G8=60,H2+H10,E2+E4=35,F11-F2)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('300');
            done();
        });
        it('IFS formula with logical test values as Cell references ->', (done: Function) => {
            helper.edit('L1', '=IFS(D2=E11,D5,D8=E7,K11)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('15');
            helper.edit('L2', '=IFS(D2<>E11,E4,G2<>G3,H4)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('27');
            helper.edit('L3', '=IFS(F7>F4,I15,G3>G10,I17)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('TRUE');
            helper.edit('L4', '=IFS(F4>F7,I15,G10>G3,I17)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('FALSE');
            helper.edit('L5', '=IFS(F7>F4,A11,G3>G10,A3)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('T-Shirts');
            helper.edit('L6', '=IFS(F4>F7,A11,G10>G3,A3)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('Sports Shoes');
            helper.edit('L7', '=IFS(F5>=F6,D8,G6>=G7,H10)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('20');
            helper.edit('L8', '=IFS(F5>=F7,D8,G6>=G4,H10)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('166');
            done();
        });
        it('IFS formula with logical test values as AND and OR as nested formula ->', (done: Function) => {
            helper.edit('L9', '=IFS(AND(H4>20,H4<55),"Y",AND(H4>20,H4>55),"N")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('Y');
            helper.edit('L10', '=IFS(AND(H4>20,H4>55),"Y",AND(H4>20,H4<55),"N")');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('N');
            helper.edit('L11', '=IFS(OR(A2<>"Casual Shoes",A11="T-Shirts"),"Y",OR(A2<>"Casual Shoes",A11="T-Shirts"), "R")');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('Y');
            helper.edit('L12', '=IFS(OR(A2<>"Casual Shoes",A11<>"T-Shirts"),"Y",OR(A2<>"Casual Shoes",A11="T-Shirts"), "R")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('R');
            done();
        });
        it('IFS formula with result conditions as empty arguments ->', (done: Function) => {
            helper.edit('L13', '=IFS(H2>5,,,)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0');
            helper.edit('L14', '=IFS(H2>20,10)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#N/A');
            helper.edit('L15', '=IFS(,TRUE, , FALSE)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#N/A');
            helper.edit('L16', '=IFS(H2=12,"e", ,)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('#N/A');
            helper.edit('L17', '=IFS(1=1,R20,2=2,Q20)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('0');
            done();
        });
        it('IFS formula with Worst cases as arguments ->', (done: Function) => {
            helper.edit('L18', '=IFS(1+1=2,Hi,2+2=5,Bye)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('#NAME?');
            helper.edit('L19', '=IFS(1+1=3,"HI",2+3=3,"FALSE")');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('#N/A');
            helper.edit('L20', '=IFS(1+1=3,)');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('#N/A');
            helper.edit('L21', '=IFS(1+1=2,)');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('0');
            helper.edit('L22', '=IFS(,3122,,232)');
            expect(helper.invoke('getCell', [21, 11]).textContent).toBe('#N/A');
            helper.edit('L23', '=IFS(I11=10,F8)');
            expect(helper.invoke('getCell', [22, 11]).textContent).toBe('#VALUE!');
            helper.edit('L24', '=IFS(I12=10,F8)');
            expect(helper.invoke('getCell', [23, 11]).textContent).toBe('#NAME?');
            helper.edit('L25', '=IFS(I13=10,F8)');
            expect(helper.invoke('getCell', [24, 11]).textContent).toBe('#NUM!');
            helper.edit('L26', '=IFS(I14=10,F8)');
            expect(helper.invoke('getCell', [25, 11]).textContent).toBe('#N/A');
            done();
        });
        it('IFS Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('M1', '=IFS($H$2>5,H3,$H$4>40,H5)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('50');
            helper.edit('M2', '=IFS($H$2<5,H3,$H$4>20,H5)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('67');
            helper.edit('M3', '=IFS($D$2=$H$2,D5,$D$8=$D$9,E11)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('15');
            helper.edit('M4', '=IFS($D$2<>$H$2,D5,$D$8=$D$4,F11)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('500');
            helper.edit('M5', '=IFS($D$2<>$H$2,$D$5,$D$8=$D$4,$F$10)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('1210');
            done();
        });
        it('IFS Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M6', '=IFS(Sheet1!D3<Sheet1!D6,Sheet2!A4,Sheet1!D3>Sheet1!D6,Sheet2!A6)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('30');
            helper.edit('M7', '=IFS(Sheet1!D3>Sheet1!D6,Sheet2!A4,Sheet1!D3<Sheet1!D6,Sheet2!A6)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('35');
            helper.edit('M8', '=IFS(Sheet2!A7<>Sheet2!A6,Sheet2!A2,Sheet2!A7<>Sheet2!A6,Sheet2!A10)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('20');
            helper.edit('M9', '=IFS(Sheet2!A7<=Sheet2!A6,Sheet1!D2,Sheet2!A7<>Sheet2!A6,Sheet1!D10)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('41');
            helper.edit('M10', '=IFS(Sheet2!A7<=Sheet2!A6,Sheet2!A2,Sheet2!A7<>Sheet2!A6,Sheet2!A9)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('50');
            helper.edit('M11', '=IFS(Sheet1!D7<=Sheet1!D6,Sheet1!F2,Sheet1!D7<>Sheet1!D6,Sheet1!D9)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('31');
            done();
        });
        it('IFS Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('M11', '=IFS(Sheet1!$D$3>Sheet1!$D$6,Sheet2!$A$4,Sheet1!$D$3<Sheet1!$D$6,Sheet2!$A$6)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('35');
            helper.edit('M12', '=IFS(Sheet1!$D$3<Sheet1!$D$6,Sheet2!$A$4,Sheet1!$D$3>Sheet1!$D$6,Sheet2!$A$6)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('30');
            helper.edit('M13', '=IFS(Sheet2!$A$7<=Sheet2!$A$6,Sheet1!D2,Sheet2!$A$7<>Sheet2!$A$6,Sheet1!D10)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('41');
            helper.edit('M14', '=IFS(Sheet2!A7<>Sheet2!A6,Sheet2!$A$2,Sheet2!A7<>Sheet2!A6,Sheet2!$A$10)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('20');
            helper.edit('M15', '=IFS(Sheet2!$A$7<=Sheet2!$A$6,Sheet2!$A$2,Sheet2!$A$7<>Sheet2!$A$6,Sheet2!$A$9)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('50');
            helper.edit('M16', '=IFS(Sheet1!$D$7<=Sheet1!$D$6,Sheet1!$F$2,Sheet1!$D$7<>Sheet1!$D$6,Sheet1!$D$9)');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('31');
            done();
        });
        it('IFS formula with wrong number of arguments error dialog cases ->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('N1');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=IFS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=IFS()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N1', '=IFS(D2=H2,1,D3=J3,3)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('1');
            spreadsheet.selectRange('K5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=IFS(,,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=IFS(,,)';
            helper.triggerKeyNativeEvent(13);
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('N2', '=IFS(D2=H2,1,D3=J3,3)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('');
            done();
        });
    });
    describe('SUMIFS Formula Checking ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    ranges: [{ dataSource: defaultData }],
                    rows: [
                        { cells: [{ index: 8, value: 'Others' }] }, { cells: [{ index: 8, value: 'TRUE' }] },
                        { cells: [{ index: 8, value: 'TRUE' }] }, { cells: [{ index: 8, value: 'FALSE' }] },
                        { cells: [{ index: 8, value: 'FALSE' }] }, { cells: [{ index: 8, value: '-3221' }] },
                        { cells: [{ index: 8, value: '-123' }] }, { cells: [{ index: 8, value: '0' }] },
                        { cells: [{ index: 8, value: '#VALUE!' }] }, { cells: [{ index: 8, value: '#NAME?' }] },
                        { cells: [{ index: 8, value: 'Hello123' }] }, { cells: [{ index: 8, value: '124Hello' }] },
                        { cells: [{ index: 8, value: '119', format: '#,##0.00' }] }, { cells: [{ index: 8, value: '32', format: '#,##0.00' }] },
                        { cells: [{ index: 8, value: '119', format: '$#,##0.00' }] }, { cells: [{ index: 8, value: '12.76', format: '$#,##0.00' }] },
                        { cells: [{ index: 8, value: '12', format: '0.0000E+00' }] }, { cells: [{ index: 8, value: '17', format: '0.0000E+00' }] },
                        { cells: [{ index: 8, value: '2', format: '0%' }] }, { cells: [{ index: 8, value: '115', format: '0%' }] }]
                }, {
                    rows: [
                        { cells: [{ value: '2' }] }, { cells: [{ value: '20' }] }, { cells: [{ value: '6' }] },
                        { cells: [{ value: '30' }] }, { cells: [{ value: '3' }] }, { cells: [{ value: '35' }] },
                        { cells: [{ value: '40' }] }, { cells: [{ value: 'q1' }] }, { cells: [{ value: 'Q2' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUMIFS formula->', (done: Function) => {
            helper.edit('J1', '=SUMIFS(H2:H5,E2:E5,">10")');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('154');
            expect(helper.getInstance().sheets[0].rows[0].cells[9].formula).toEqual('=SUMIFS(H2:H5,E2:E5,">10")');
            done();
        });
        it('SUMIFS formula with no argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('J2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIFS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIFS()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('J2', '=SUMIFS(G2:G9,H2:H9,">5")');
            done();
        });
        it('SUMIFS formula with criteria value as *->', (done: Function) => {
            helper.edit('J3', '=SUMIFS(H2:H5,H2:H5,"*")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            expect(helper.getInstance().sheets[0].rows[2].cells[9].formula).toEqual('=SUMIFS(H2:H5,H2:H5,"*")');
            done();
        });
        it('SUMIFS formula with criteria value as ?->', (done: Function) => {
            helper.edit('J4', '=SUMIFS(H2:H5,H2:H5,"?")');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            expect(helper.getInstance().sheets[0].rows[3].cells[9].formula).toEqual('=SUMIFS(H2:H5,H2:H5,"?")');
            done();
        });
        it('SUMIFS formula with criteria value as ? And numbers->', (done: Function) => {
            helper.edit('J5', '=SUMIFS(H2:H5,H2:H5,"1?1")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            expect(helper.getInstance().sheets[0].rows[4].cells[9].formula).toEqual('=SUMIFS(H2:H5,H2:H5,"1?1")');
            done();
        });
        it('SUMIFS formula with criteria value as ? and numbers ->', (done: Function) => {
            helper.edit('J6', '=SUMIFS(H2:H5,H2:H5,"11?1")');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            expect(helper.getInstance().sheets[0].rows[5].cells[9].formula).toEqual('=SUMIFS(H2:H5,H2:H5,"11?1")');
            done();
        });
        it('SUMIFS Formula with operators as criteria ->', (done: Function) => {
            helper.edit('J7', '=SUMIFS(D2:D11,E2:E11,"<"30,F2:F11,"<"300)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('30');
            helper.edit('J8', '=SUMIFS(D2:D11,E2:E11,">"20,F2:F11,">"300)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('61');
            helper.edit('J9', '=SUMIFS(D2:D11,E2:E11,"<="30,F2:F11,"<="300)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('95');
            helper.edit('J10', '=SUMIFS(D2:D11,E2:E11,">="20,F2:F11,">="300)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('116');
            helper.edit('J11', '=SUMIFS(D2:D11,E2:E11,"<>20",F2:F11,"<>200")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('192');
            helper.edit('J12', '=SUMIFS(D2:D11,E2:E11,20,F2:F11,200)');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('10');
            helper.edit('J13', '=SUMIFS(D2:D11,E2:E11,"<"15,F2:F11,">"250)');
            expect(helper.invoke('getCell', [12, 9]).textContent).toBe('111');
            helper.edit('J14', '=SUMIFS(D2:D11,E2:E11,">"&D8,F2:F11,">"&F2)');
            expect(helper.invoke('getCell', [13, 9]).textContent).toBe('61');
            helper.edit('J15', '=SUMIFS(D2:D11,E2:E11,"<>"&D8,F2:F11,"<>200")');
            expect(helper.invoke('getCell', [14, 9]).textContent).toBe('192');
            helper.edit('J16', '=SUMIFS(F2:F11,D2:D11,"=20",E2:E11,"=30")');
            expect(helper.invoke('getCell', [15, 9]).textContent).toBe('600');
            done();
        });
        it('SUMIFS Formula with wildcard * as criteria* ->', (done: Function) => {
            helper.edit('K1', '=SUMIFS(D2:D11,F2:F11,"*2")');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('0');
            helper.edit('K2', '=SUMIFS(D2:D11,F2:F11,"0*")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0');
            helper.edit('K3', '=SUMIFS(D2:D11,A2:A11,"C*")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('51');
            helper.edit('K4', '=SUMIFS(D2:D11,A2:A11,"*ES")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('111');
            helper.edit('K5', '=SUMIFS(D2:D11,A2:A11,"s*es")');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('20');
            done();
        });
        it('SUMIFS Formula with wildcard ? as criteria ->', (done: Function) => {
            helper.edit('K6', '=SUMIFS(D2:D11,F2:F11,"2??")');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('0');
            helper.edit('K7', '=SUMIFS(D2:D11,E2:E11,"1?")');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0');
            helper.edit('K8', '=SUMIFS(E2:E3,A2:A3,"???????Shoes")');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('50');
            helper.edit('K9', '=SUMIFS(E2:E10,A2:A10,"???????")');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('10');
            helper.edit('K10', '=SUMIFS(E2:E10,A2:A10,"<>???????")');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('155');
            done();
        });
        it('SUMIFS Formula with different kind of value as criteria ->', (done: Function) => {
            helper.edit('K11', '=SUMIFS(D2:D11,E2:E11,20,F2:F11,200)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('10');
            helper.edit('K12', '=SUMIFS(D2:D11,E2:E11,">20",F2:F11,">200")');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('61');
            helper.edit('K13', '=SUMIFS(D2:D11,E2:E11,E2,F2:F11,F2)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('10');
            helper.edit('K14', '=SUMIFS(D2:D11,E2:E11,"<>"&D8,F2:F11,"<>"&F2)');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('192');
            helper.edit('K15', '=SUMIFS(E2:E11,E6&"*",D2:D11,30)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('20');
            helper.edit('K16', '=SUMIFS(E2:E11,E6&"*",D2:D11,30)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('20');
            helper.edit('K17', '=SUMIFS(D2:D11,A2:A11,"Casual Shoes",E2:E11,20)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('10');
            done();
        });
        it('SUMIFS Formula with experssion as criteria ->', (done: Function) => {
            helper.edit('L1', '=SUMIFS(E2:E11,H2:H11,">"&G6+13,F2:F11,">"&D7+100)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('145');
            helper.edit('L2', '=SUMIFS(E2:E11,F2:F11,">"&H10-66)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('175');
            done();
        });
        it('SUMIFS Formula to check alert box throws for worst case value as argument->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('L3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIFS(,)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIFS(,)';
            helper.triggerKeyNativeEvent(13);
            let dialog1: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog1.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L3', '=SUMIFS(G2:G9,H2:H9,">5")');
            spreadsheet.selectRange('L4');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIFS(,D2:D10,"*e")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIFS(,D2:D10,"*e")';
            helper.triggerKeyNativeEvent(13);
            let dialog2: HTMLElement = helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog2.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L4', '=SUMIFS(G2:G9,H2:H9,">5")');
            done();
        })
        it('SUMIFS Formula with worst case value as argument->', (done: Function) => {
            helper.edit('L5', '=SUMIFS(E2:E9,F2:F9,)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('0');
            helper.edit('L6', '=SUMIFS(A2:A11,,H4:H9,)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('#VALUE!');
            helper.edit('L7', '=SUMIFS(E4:E11,A3:A11,"",D4:D11,"=20")');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('#VALUE!');
            helper.edit('L8', '=SUMIFS(E3:E11,F3:F11,"300",H3:H13,">50")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('#VALUE!');
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('L9');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIFS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIFS()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement  =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('L9', '=SUMIFS(G2:G9,H2:H9,">5")');
            done();
        });
        it('SUMIFS Formula with text,empty,number value as range and * or <>* as criteria->', (done: Function) => {
            helper.edit('L10', '=SUMIFS(D2:D11,A2:A11,"*")');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('277');
            helper.edit('L11', '=SUMIFS(D2:D11,E2:E11,"*")');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('0');
            helper.edit('L12', '=SUMIFS(D2:D11,P2:P11,"*")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('0');
            helper.edit('L13', '=SUMIFS(D2:D11,A2:A11,"<>*")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0');
            helper.edit('L14', '=SUMIFS(D2:D11,E2:E11,"<>*")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('277');
            helper.edit('L15', '=SUMIFS(D2:D11,P2:P11,"<>*")');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('277');
            helper.edit('L16', '=SUMIFS(A2:A11,D2:D11,)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('0');
            helper.edit('L17', '=SUMIFS(A2:A11,D2:D11," ")');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('0');
            done();
        });
        it('SUMIFS Formula with different formatted value as arguments->', (done: Function) => {
            helper.edit('M1', '=SUMIFS(I6:I8,F5:F7,"300")');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('-3344');
            helper.edit('M2', '=SUMIFS(I15:I16,F5:F6,"300")');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('131.76');
            helper.edit('M3', '=SUMIFS(F5:F6,I15:I16,"<150")');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('600');
            helper.edit('M4', '=SUMIFS(I17:I18,F5:F6,300)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('29');
            helper.edit('M5', '=SUMIFS(F5:F6,I17:I18,">10")');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('600');
            helper.edit('M6', '=SUMIFS(I19:I20,F8:F9,"200")');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('2');
            helper.edit('M7', '=SUMIFS(F8:F9,I19:I20,">=2")');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('510');
            done();
        });
        it('SUMIFS Formula with Logical value as arguments->', (done: Function) => {
            helper.edit('M8', '=SUMIFS(D2:D5,I2:I5,"TRUE")');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('30');
            helper.edit('M9', '=SUMIFS(D2:D5,I2:I5,"FALSE")');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('35');
            helper.edit('M10', '=SUMIFS(D2:D5,I2:I5,"TRUE")');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('30');
            helper.edit('M11', '=SUMIFS(D2:D5,I2:I5,"FALSE")');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('35');
            helper.edit('M12', '=SUMIFS(F2:F5,I2:I5,I3)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('800');
            helper.edit('M13', '=SUMIFS(F2:F5,I2:I5,I4)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('600');
            done();
        });
        it('SUMIFS Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('N1', '=SUMIFS($D$2:$D$11,E2:E11,20,F2:F11,200)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('10');
            helper.edit('N2', '=SUMIFS(D2:D11,$E$2:$E$11,">20",$F$2:$F$11,">200")');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('61');
            helper.edit('N3', '=SUMIFS(D2:D11,E2:E11,">"&$E$4)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('126');
            helper.edit('N4', '=SUMIFS($F$2:$F$11,$D$2:$D$11,">"&$D$5,$E$2:$E$11,"<"&$E$5)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('1610');
            done();
        });
        it('SUMIFS Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N5', '=SUMIFS(Sheet2!A1:A10,F2:F11,">"&F5,G2:G11,"<"&D5)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('55');
            helper.edit('N6', '=SUMIFS(Sheet1!E1:E10,F2:F11,">"&F5,G2:G11,"<"&D5)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('80');
            helper.edit('N7', '=SUMIFS(D2:D9,Sheet2!A2:A9,">"&20)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('141');
            helper.edit('N8', '=SUMIFS(Sheet1!D2:D11,Sheet1!E2:E11,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [7, 13]).textContent).toBe('277');
            helper.edit('N9', '=SUMIFS(Sheet2!A2:A6,Sheet1!E2:E6,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [8, 13]).textContent).toBe('94');
            helper.edit('N10', '=SUMIFS(Sheet1!D2:D6,Sheet2!A2:A6,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [9, 13]).textContent).toBe('60');
            helper.edit('N11', '=SUMIFS(Sheet2!A2:A6,Sheet2!A2:A6,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [10, 13]).textContent).toBe('85');
            helper.edit('N12', '=SUMIFS(Sheet2!A2:A6,Sheet2!A2:A6,">="&Sheet1!G9)');
            expect(helper.invoke('getCell', [11, 13]).textContent).toBe('91');
            done();
        });
        it('SUMIFS Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('N13', '=SUMIFS(Sheet2!$A$1:$A$10,F2:F11,">"&F5,G2:G11,"<"&D5)');
            expect(helper.invoke('getCell', [12, 13]).textContent).toBe('55');
            helper.edit('N14', '=SUMIFS(Sheet2!A1:A10,$F$2:$F$11,">"&F5,$G$2:$G$11,"<"&D2)');
            expect(helper.invoke('getCell', [13, 13]).textContent).toBe('20');
            helper.edit('N15', '=SUMIFS(Sheet2!A1:A10,F2:F11,">"&$F$5,G2:G11,"<"&$D$2)');
            expect(helper.invoke('getCell', [14, 13]).textContent).toBe('20');
            helper.edit('N16', '=SUMIFS(Sheet1!$D$2:$D$6,Sheet2!$A$2:$A$6,">"&Sheet1!$G$4)');
            expect(helper.invoke('getCell', [15, 13]).textContent).toBe('60');
            helper.edit('N17', '=SUMIFS(Sheet1!D2:D11,Sheet1!E2:E11,">"&Sheet1!G4)');
            expect(helper.invoke('getCell', [16, 13]).textContent).toBe('277');
            helper.edit('N18', '=SUMIFS(Sheet1!$D$2:$D$11,Sheet1!$E$2:$E$11,">"&Sheet1!$G$4)');
            expect(helper.invoke('getCell', [17, 13]).textContent).toBe('277');
            helper.edit('N19', '=SUMIFS(D2:D8,Sheet2!$A$1:$A$7,">"20)');
            expect(helper.invoke('getCell', [18, 13]).textContent).toBe('75');
            helper.edit('N20', '=SUMIFS(Sheet1!$D$2:$D$8,Sheet2!$A$1:$A$7,">"$G$5)');
            expect(helper.invoke('getCell', [19, 13]).textContent).toBe('95');
            done();
        });
        it('SUMIFS Formula with nested formula as arguments ->', (done: Function) => {
            helper.edit('O1', '=SUMIFS(D2:D11,E2:E11,SUM(10)+10)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('65');
            helper.edit('O2', '=SUMIFS(D2:D11,E2:E11,COUNT(G2:H11))');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('65');
            helper.edit('O3', '=SUMIFS(H2:H11,E2:E11,LEN(D4)+18)');
            expect(helper.invoke('getCell', [2, 14]).textContent).toBe('143');
            helper.edit('O4', '=SUMIFS(D2:D11,A2:A11,"<>"EXACT(A2))');
            expect(helper.invoke('getCell', [3, 14]).textContent).toBe('277');
            helper.edit('O5', '=SUMIFS(F2:F11,E2:E11,SUM(D2,H2),A2:A11,"<>"PROPER(A3))');
            expect(helper.invoke('getCell', [4, 14]).textContent).toBe('1300');
            done();
        });
        it('SUMIFS formula with cell references like string argument as input->', (done: Function) => {
            helper.edit('O6', '=SUMIFS(Sheet1!G5:G6,Sheet2!A8:A9,"q1")');
            expect(helper.invoke('getCell', [5, 14]).textContent).toBe('11');
            helper.edit('O7', '=SUMIFS(Sheet1!G5:G6,Sheet2!A8:A9,"Q2")');
            expect(helper.invoke('getCell', [6, 14]).textContent).toBe('10');
            done();
        });
        it('SUMIFS formula with wildcard * in both starting and end of criteria->', (done: Function) => {
            helper.edit('O8', '=SUMIFS(D2:D8,A2:A8,"*shoes*")');
            expect(helper.invoke('getCell', [7, 14]).textContent).toBe('70');
            helper.edit('O9', '=SUMIFS(D2:D8,A2:A8,"*shoes")');
            expect(helper.invoke('getCell', [8, 14]).textContent).toBe('70');
            helper.edit('O10', 'Shoes');
            helper.edit('O11', '=SUMIFS(D2:D8,A2:A8,"*"&O10&"*")');
            expect(helper.invoke('getCell', [10, 14]).textContent).toBe('70');
            done();
        });
    });
    describe('Resolve the reported MIN and MAX formula related issues ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('checking corner cases and nested formula for MIN formula', (done: Function) => {
            helper.edit('I5', '=MIN(,)');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].value).toEqual('0');
            helper.edit('I6', '=MIN(23,12,)');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].value).toEqual('0');
            helper.edit('I7', '=MIN(23,12,"123hello")');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].value).toEqual('#VALUE!');
            helper.edit('I8', '=MIN(23,12,IF(2>1,"hello","world"))');
            expect(helper.getInstance().sheets[0].rows[7].cells[8].value).toEqual('#VALUE!');
            helper.edit('I9', '=MIN(23,A1,36)');
            expect(helper.getInstance().sheets[0].rows[8].cells[8].value).toEqual('23');
            helper.edit('I10', '=MIN("23","34","12","-1.34")');
            expect(helper.getInstance().sheets[0].rows[9].cells[8].value).toEqual('-1.34');
            helper.edit('I11', '=MIN(12,TRUE,45.3,FALSE)');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].value).toEqual('0');
            helper.edit('I12', '=MIN(12,G3,34)');
            expect(helper.getInstance().sheets[0].rows[11].cells[8].value).toEqual('5');
            helper.edit('I13', '=MIN(12,"FALSE",7)');
            expect(helper.getInstance().sheets[0].rows[12].cells[8].value).toEqual('#VALUE!');
            helper.edit('I14', '=MIN(23,-34,A22)');
            expect(helper.getInstance().sheets[0].rows[13].cells[8].value).toEqual('-34');
            helper.edit('I15', '=MIN(MIN(G2:G5),MAX(G6:G9))');
            expect(helper.getInstance().sheets[0].rows[14].cells[8].value).toEqual('1');
            helper.edit('I16', '=MIN(SUM(G2:G5),SUM(G6:G9))');
            expect(helper.getInstance().sheets[0].rows[15].cells[8].value).toEqual('24');
            helper.edit('I17', '=MIN(IF(G2<G3,G2:G10))');
            expect(helper.getInstance().sheets[0].rows[16].cells[8].value).toEqual('1');
            helper.edit('I18', '=MIN(GEOMEAN(G2:G6),GEOMEAN(G6:G10))');
            expect(helper.getInstance().sheets[0].rows[17].cells[8].value).toEqual('5.213053066891882');
            helper.edit('I19', '=MIN(LEN(A1),8)');
            expect(helper.getInstance().sheets[0].rows[18].cells[8].value).toEqual('8');
            helper.edit('I20', '=MIN(IF(2>1,34,56),45,67)');
            expect(helper.getInstance().sheets[0].rows[19].cells[8].value).toEqual('34');
            done();
        });
        it('checking corner cases and nested formula for MAX formula', (done: Function) => {
            helper.edit('I5', '=MAX(,)');
            expect(helper.getInstance().sheets[0].rows[4].cells[8].value).toEqual('0');
            helper.edit('I6', '=MAX(23,12,)');
            expect(helper.getInstance().sheets[0].rows[5].cells[8].value).toEqual('23');
            helper.edit('I7', '=MAX(23,12,"123hello")');
            expect(helper.getInstance().sheets[0].rows[6].cells[8].value).toEqual('#VALUE!');
            helper.edit('I8', '=MAX(23,12,IF(2>1,"hello","world"))');
            expect(helper.getInstance().sheets[0].rows[7].cells[8].value).toEqual('#VALUE!');
            helper.edit('I9', '=MAX(23,A1,36)');
            expect(helper.getInstance().sheets[0].rows[8].cells[8].value).toEqual('36');
            helper.edit('I10', '=MAX("23","34","12","-1.34")');
            expect(helper.getInstance().sheets[0].rows[9].cells[8].value).toEqual('34');
            helper.edit('I11', '=MAX(12,TRUE,45.3,FALSE)');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].value).toEqual('45.3');
            helper.edit('I12', '=MAX(12,G3,34)');
            expect(helper.getInstance().sheets[0].rows[11].cells[8].value).toEqual('34');
            helper.edit('I13', '=MAX(12,"FALSE",7)');
            expect(helper.getInstance().sheets[0].rows[12].cells[8].value).toEqual('#VALUE!');
            helper.edit('I14', '=MAX(23,-34,A22)');
            expect(helper.getInstance().sheets[0].rows[13].cells[8].value).toEqual('23');
            helper.edit('I15', '=MAX(MIN(G2:G5),MAX(G6:G9))');
            expect(helper.getInstance().sheets[0].rows[14].cells[8].value).toEqual('13');
            helper.edit('I16', '=MAX(SUM(G2:G5),SUM(G6:G9))');
            expect(helper.getInstance().sheets[0].rows[15].cells[8].value).toEqual('32');
            helper.edit('I17', '=MAX(IF(G2<G3,G2:G10))');
            expect(helper.getInstance().sheets[0].rows[16].cells[8].value).toEqual('13');
            helper.edit('I18', '=MAX(GEOMEAN(G2:G6),GEOMEAN(G6:G10))');
            expect(helper.getInstance().sheets[0].rows[17].cells[8].value).toEqual('7.7567433260414305');
            helper.edit('I19', '=MAX(LEN(A1),8)');
            expect(helper.getInstance().sheets[0].rows[18].cells[8].value).toEqual('9');
            helper.edit('I20', '=MAX(IF(2>1,34,56),45,67)');
            expect(helper.getInstance().sheets[0].rows[19].cells[8].value).toEqual('67');
            done();
        });
        it('MIN and MAX Formula with nested SORT formula contains empty value -> ', (done: Function) => {
            helper.edit('G2', '');
            helper.edit('G5', '');
            helper.edit('I21', '=MIN(SORT(G2:G10))');
            expect(helper.getInstance().sheets[0].rows[20].cells[8].value).toEqual('3');
            helper.edit('I22', '=MAX(SORT(G2:G10))');
            expect(helper.getInstance().sheets[0].rows[21].cells[8].value).toEqual('13');
            done();
        });
    });
    describe('Sheet References Checking for MIN and MAX -> ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                    rows: [{ cells: [{ value: '8529.22' }] },
                    { cells: [{ value: '17866.19' }] }, { cells: [{ value: '13853.09' }] }, { cells: [{ value: '2338.74' }] },
                    { cells: [{ value: '9578.45' }] }, { cells: [{ value: '19141.62' }] }, { cells: [{ value: '6543.3' }] },{ cells: [{ value: '13035.06' }] },
                    { cells: [{ value: '18488.8' }] },{ cells: [{ value: '12317.04' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('MIN Formula with absolute cell references -> ', (done: Function) => {
            helper.edit('I2', '=MIN($G$2:$G$9)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1');
            helper.edit('I3', '=MIN($G$4,$G$7,H2,G7)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('7');
            helper.edit('I4', '=MIN($G$3,$G$8,TRUE)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('1');
            helper.edit('I5', '=MIN($G$2,$G$5,-34,G5)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('-34');
            helper.edit('I6', '=MIN($G$7,$G$3,)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('0');
            done();
        });
        it('MAX Formula with absolute cell references -> ', (done: Function) => {
            helper.edit('I7', '=MAX($G$2:$G$9)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('13');
            helper.edit('I8', '=MAX($G$4,$G$7,H2,G7)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('13');
            helper.edit('I9', '=MAX($G$3,$G$8,TRUE)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('5');
            helper.edit('I10', '=MAX($G$2,$G$5,-34,G5)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('11');
            helper.edit('I11', '=MAX($G$7,$G$3,)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('13');
            done();
        });
        it('MIN Formula with Sheet refernces as arguments -> ', (done: Function) => {
            helper.edit('J2', '=MIN(Sheet1!G2:Sheet1!G10)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('1');
            helper.edit('J3', '=MIN(Sheet1!$G$2,Sheet1!$G$10,Sheet1!H10)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('1');
            helper.edit('J4', '=MIN(Sheet1!$G$2,Sheet1!$G$10,Sheet1!H10,H2)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('1');
            helper.edit('J5', '=MIN(Sheet1!$G$2,Sheet1!$G$10,Sheet1!H10,TRUE)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1');
            done();
        });
        it('MAX Formula with Sheet refernces as arguments -> ', (done: Function) => {
            helper.edit('J6', '=MAX(Sheet1!G2:Sheet1!G10)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('13');
            helper.edit('J7', '=MAX(Sheet1!$G$2,Sheet1!$G$10,Sheet1!H10)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('166');
            helper.edit('J8', '=MAX(Sheet1!$G$2,Sheet1!$G$10,Sheet1!H10,H2)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('166');
            helper.edit('J9', '=MAX(Sheet1!$G$2,Sheet1!$G$10,Sheet1!H10,TRUE)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('166');
            done();
        });
        it('MIN Formula with external Sheet refernces as arguments -> ', (done: Function) => {
            helper.edit('K2', '=MIN(Sheet1!H2:Sheet1!H10,Sheet1!A2,Sheet1!A10)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('10');
            helper.edit('K3', '=MIN(Sheet1!$H$2:Sheet1!$H$10,Sheet2!$A$2,Sheet2!$A$10)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('10');
            helper.edit('K4', '=MIN(Sheet1!$H$2:Sheet1!$H$10,Sheet2!A9,Sheet2!A10)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('10');
            helper.edit('K5', '=MIN(Sheet1!H2:Sheet1!H10,Sheet2!A2,Sheet2!A10,3456.765)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('10');
            helper.edit('K6', '=MIN(Sheet1!$H$2:Sheet1!$H$10,Sheet2!A2,Sheet2!A10,3456.765,TRUE)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('1');
            done();
        });
        it('MAX Formula with external Sheet refernces as arguments -> ', (done: Function) => {
            helper.edit('K2', '=MAX(Sheet1!H2:Sheet1!H10,Sheet1!A2,Sheet1!A10)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('166');
            helper.edit('K3', '=MAX(Sheet1!$H$2:Sheet1!$H$10,Sheet2!$A$2,Sheet2!$A$10)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('17866.19');
            helper.edit('K4', '=MAX(Sheet1!$H$2:Sheet1!$H$10,Sheet2!A9,Sheet2!A10)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('18488.8');
            helper.edit('K5', '=MAX(Sheet1!H2:Sheet1!H10,Sheet2!A2,Sheet2!A10,3456.765)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('17866.19');
            helper.edit('K6', '=MAX(Sheet1!$H$2:Sheet1!$H$10,Sheet2!A2,Sheet2!A10,3456.765,TRUE)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('17866.19');
            done();
        });
    });
    describe('Resolve the issues reported on GEOMEAN formula -> ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('applying reported formula issue in GEOMEAN', (done: Function) => {
            helper.edit('I5','=GEOMEAN(4,9)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('6');
            helper.edit('I2','=GEOMEAN(H2:H5)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('30.83913178');
            helper.edit('I3','=GEOMEAN(G2:G5)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('4.429606853');
            done();
        });
        it('applying extra found formula issues in GEOMEAN', (done: Function) => {
            helper.edit('I6','=GEOMEAN(12,23,)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#NUM!');
            helper.edit('I7','=GEOMEAN(12,,23)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#NUM!');
            helper.edit('I8','=GEOMEAN(12,34,"hello")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I9','=GEOMEAN(G2:G10)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('6.046997085');
            helper.edit('G4', 'TRUE');
            helper.edit('I10', '=GEOMEAN(G2:G10)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('5.937381762');
            helper.edit('A2', 'FALSE');
            helper.edit('I11', '=GEOMEAN(23,34,A2)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('27.96426291');
            helper.edit('I12', '=GEOMEAN(12,23,"45",22)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('22.86315018');
            helper.edit('I13', '=GEOMEAN(23,34,IF(2>1,"22",44))');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('25.81525849');
            helper.edit('I14', '=GEOMEAN(-34)');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('#NUM!');
            helper.edit('I15', '=GEOMEAN(0)');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('#NUM!');
            helper.edit('I16', '=GEOMEAN(,)');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('#NUM!');
            done();
        });
    });
    describe('Sheet References Checking for GEOMEAN -> ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                    rows: [{ cells: [{ value: '8529.22' }] },
                    { cells: [{ value: '17866.19' }] }, { cells: [{ value: '13853.09' }] }, { cells: [{ value: '2338.74' }] },
                    { cells: [{ value: '9578.45' }] }, { cells: [{ value: '19141.62' }] }, { cells: [{ value: '6543.3' }] },{ cells: [{ value: '13035.06' }] },
                    { cells: [{ value: '18488.8' }] },{ cells: [{ value: '12317.04' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('GEOMEAN Formula with absolute cell references -> ', (done: Function) => {
            helper.edit('I2', '=GEOMEAN($G$2:$G$9)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('5.550531522');
            helper.edit('I3', '=GEOMEAN($G$2,$G$3,G4)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('3.27106631');
            helper.edit('I4', '=GEOMEAN($G$2,$G$3,TRUE,G4)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('2.432299279');
            helper.edit('I5', '=GEOMEAN($G$6,$G$3,K2,1276.54)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('39.96392581');
            done();
        });
        it('GEOMEAN Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('I6', '=GEOMEAN(Sheet2!A3,Sheet1!G2,Sheet2!$A$6)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('642.4536222');
            helper.edit('I7', '=GEOMEAN(Sheet2!A3:Sheet2!A9,Sheet2!$A$6,4566.45)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('9780.322336');
            helper.edit('I8', '=GEOMEAN(Sheet1!G3,Sheet1!G2,TRUE,Sheet2!$A$4)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('10.39891401');
            helper.edit('I9', '=GEOMEAN(Sheet2!A3:Sheet2!A9,)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('#NUM!');
            done();
        });
        it('GEOMEAN Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('I10', '=GEOMEAN(Sheet2!$A$3,Sheet1!$G$2,Sheet1!G5)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('53.41293552');
            helper.edit('I11', '=GEOMEAN(Sheet2!$A$3:Sheet2!$A$9)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('9907.084654');
            helper.edit('I12', '=GEOMEAN(Sheet1!$G$3,Sheet1!$G$2,TRUE,Sheet1!G5)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('2.723269815');
            helper.edit('I13', '=GEOMEAN(Sheet2!$A$3:Sheet2!$A$9,)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('#NUM!');
            done();
        });
    });

    describe('I488682 - Checking boolean value with arithmetic operations ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Boolean value with multiplication ', (done: Function) => { 
            helper.edit('I1', 'TRUE');
            helper.edit('I2', 'FALSE');
            helper.edit('I3', '2');
            helper.edit('I4', '4');
            helper.edit('I5', '=I1*I2');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('0');
            helper.edit('I6', '=I3*I2');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('0');
            helper.edit('I7', '=I1*I4');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('4');
            helper.edit('I8', '=3*TRUE');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('3');
            done();
        });

        it('Boolean value with subtraction', (done: Function) => {
            helper.edit('I9', '=I1-I2');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('1');
            helper.edit('I10', '=I3-I2');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('2');
            helper.edit('I11', '=I1-I4');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('-3');
            helper.edit('I12', '=3-TRUE');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('2');
            done();
        });

        it('Boolean value with addition', (done: Function) => {
            helper.edit('I13', '=I1+I2;');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('1');
            helper.edit('I14', '=I3+I2');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('2');
            helper.edit('J1', '=I1+I4');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('5');
            helper.edit('J2', '=3+TRUE');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('4');
            done();
        });

        it('Boolean value with division', (done: Function) => {
            helper.edit('J3', '=I1/I2;');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J4', '=I3/I2');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J5', '=I1/I4');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0.25');
            helper.edit('J6', '=3/TRUE');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('3');
            done();
        });
        it('Arithmetic operation with percentage value', (done: Function) => {
            helper.edit('D12', '=-(D3*(100%-D2))');
            const tdEle: Element = helper.invoke('getCell', [11, 3]);
            expect(tdEle.textContent).toBe('180');
            const cell: CellModel = helper.getInstance().sheets[0].rows[11].cells[3];
            expect(cell.value).toBe('180');
            helper.edit('D12', '=-((100-D2)*D3)');
            expect(cell.value).toBe('-1800');
            expect(tdEle.textContent).toBe('-1800');
            helper.edit('D12', '=-((100%-D2)*D3)');
            expect(cell.value).toBe('180');
            expect(tdEle.textContent).toBe('180');
            helper.edit('D12', '=-((100%*D3))');
            expect(cell.value).toBe('-20');
            expect(tdEle.textContent).toBe('-20');
            helper.edit('D12', '=-(2+(100%*D4))');
            expect(cell.value).toBe('-22');
            expect(tdEle.textContent).toBe('-22');
            done();
        });
        it('I864921 -> Throws error while performing arithmetic operation with percentage formatted value', (done: Function) => {
            helper.edit('J7', '=5.68899%+1.457288%');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.07146278');
            helper.edit('J8', '=(5.68899%)+1.457288%');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0.07146278');
            helper.edit('J9', '=(5.68899%)+(1.457288%)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0.07146278');
            done();
        });
    });
    describe('Provide the support to handle the wrong formula in spreadsheet and display alert dialog -> ', () => {
        beforeEach((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterEach(() => {
            helper.invoke('destroy');
        });
        it('checking alert box throwing after entering =SUM()', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I2');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUM()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUM()';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula with an invalid arguments.');
            done();
        });
        it('checking alert box throwing after entering =MIN(IF(2>1,1,0)', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I3');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=MIN(IF(2>1,1,0)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=MIN(IF(2>1,1,0)';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula with one or more missing opening or closing parenthesis.');
            done();
        });
        it('checking alert box throwing after entering =SUMIF()', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I4');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUMIF()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUMIF()';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula which is improper.');
            done();
        });
        it('checking alert box throwing after entering =IF(2>1,1,2,3,4)', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I5');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=IF(2>1,1,2,3,4)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=IF(2>1,1,2,3,4)';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula with a wrong number of arguments.');
            done();
        });
        it('checking alert box throwing after entering =SUM{}', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I6');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUM{}';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUM{}';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula with an empty expression.');
            done();
        });
        it('checking alert box throwing after entering =IF(2>1,"Hello, "World")', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I7');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=IF(2>1,"Hello, "World")';
            helper.getElement('.e-spreadsheet-edit').textContent = '=IF(2>1,"Hello, "World")';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula with a mismatched quotes.');
            done();
        });
        it('checking alert box throwing after entering =SUM(2,I8)', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I8');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=SUM(2,I8)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=SUM(2,I8)';
            helper.triggerKeyNativeEvent(13);
            expect(helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content').textContent).toBe('We found that you typed a formula with a circular reference.');
            done();
        });
    });
    
    describe('resolve issue reported in ROUND-ROUNDUP', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{ dataSource: defaultData }] },{
                    rows: [{ cells: [{ value: 'INPUT1' }] },{ cells: [{ value: '8529.22567' }] },
                    { cells: [{ value: '17866.196789' }] }, { cells: [{ value: '13853.09239876' }] }, { cells: [{ value: '2,338.7456787' }] },
                    { cells: [{ value: '9578.454567' }] }, { cells: [{ value: '19141.626789' }] }, { cells: [{ value: '6543.30789' }] }, 
                    { cells: [{ value: '13035.065678' }] }, { cells: [{ value: '18488.808976' }] }, { cells: [{ value: '12317.04789' }] },
                    { cells: [{ value: '1' }] }, { cells: [{ value: '2' }] }, { cells: [{ value: '-1' }] }, { cells: [{ value: '-2' }] }]
                }], activeSheetIndex: 1
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('applying corner cases for ROUND', (done: Function) => {
            helper.edit('B2', '=ROUND(,)');
            expect(helper.invoke('getCell', [1, 1]).textContent).toBe('0');
            helper.edit('B3', '=ROUND(A2,)');
            expect(helper.invoke('getCell', [2, 1]).textContent).toBe('8529');
            helper.edit('B4', '=ROUND("123hello", 2)');
            expect(helper.invoke('getCell', [3, 1]).textContent).toBe('#VALUE!');
            helper.edit('B5', '=ROUND(A4,"123hello")');
            expect(helper.invoke('getCell', [4, 1]).textContent).toBe('#VALUE!');
            helper.edit('B6', '=ROUND(A5,A1)');
            expect(helper.invoke('getCell', [5, 1]).textContent).toBe('#VALUE!');
            helper.edit('B7', '=ROUND(A5,IF(2>1,"hello","world"))');
            expect(helper.invoke('getCell', [6, 1]).textContent).toBe('#VALUE!');
            helper.edit('B8', '=ROUND(A5,TRUE)');
            expect(helper.invoke('getCell', [7, 1]).textContent).toBe('2338.7');
            helper.edit('G2','1');
            helper.edit('B9', '=ROUND(A5,G2)');
            expect(helper.invoke('getCell', [8, 1]).textContent).toBe('2338.7');
            helper.edit('B10', '=ROUND(A5,IF(2>1,TRUE,FALSE))');
            expect(helper.invoke('getCell', [9, 1]).textContent).toBe('2338.7');
            helper.edit('B11', '=ROUND(A5,"TRUE")');
            expect(helper.invoke('getCell', [10, 1]).textContent).toBe('#VALUE!');
            helper.edit('F2','1');
            helper.edit('B12', '=ROUND(A5,F2)');
            expect(helper.invoke('getCell', [11, 1]).textContent).toBe('2338.7');
            helper.edit('C1','=ROUND(A10,1)');
            expect(helper.invoke('getCell', [0, 2]).textContent).toBe('18488.8');
            helper.edit('C2','=ROUND(A10,2)');
            expect(helper.invoke('getCell', [1, 2]).textContent).toBe('18488.81');
            helper.edit('C3','=ROUND(A10,3)');
            expect(helper.invoke('getCell', [2, 2]).textContent).toBe('18488.809');
            helper.edit('C4','=ROUND(A10,4)');
            expect(helper.invoke('getCell', [3, 2]).textContent).toBe('18488.809');
            helper.edit('C5','=ROUND(A10,5)');
            expect(helper.invoke('getCell', [4, 2]).textContent).toBe('18488.80898');
            helper.edit('C6','=ROUND(A10,6)');
            expect(helper.invoke('getCell', [5, 2]).textContent).toBe('18488.80898');
            helper.edit('C7','=ROUND(A10,7)');
            expect(helper.invoke('getCell', [6, 2]).textContent).toBe('18488.80898');
            helper.edit('C8','=ROUND(A10,8)');
            expect(helper.invoke('getCell', [7, 2]).textContent).toBe('18488.80898');
            helper.edit('C9','=ROUND(A10,9)');
            expect(helper.invoke('getCell', [8, 2]).textContent).toBe('18488.80898');
            done();
        });
        it('applying corner cases for ROUNDUP', (done: Function) => {
            helper.edit('D2', '=ROUNDUP(,)');
            expect(helper.invoke('getCell', [1, 3]).textContent).toBe('0');
            helper.edit('D3', '=ROUNDUP(A2,)');
            expect(helper.invoke('getCell', [2, 3]).textContent).toBe('8530');
            helper.edit('D4', '=ROUNDUP("123hello", 2)');
            expect(helper.invoke('getCell', [3, 3]).textContent).toBe('#VALUE!');
            helper.edit('D5', '=ROUNDUP(A4,"123hello")');
            expect(helper.invoke('getCell', [4, 3]).textContent).toBe('#VALUE!');
            helper.edit('D6', '=ROUNDUP(A5,A1)');
            expect(helper.invoke('getCell', [5, 3]).textContent).toBe('#VALUE!');
            helper.edit('D7', '=ROUNDUP(A5,IF(2>1,"hello","world"))');
            expect(helper.invoke('getCell', [6, 3]).textContent).toBe('#VALUE!');
            helper.edit('D8', '=ROUNDUP(A5,TRUE)');
            expect(helper.invoke('getCell', [7, 3]).textContent).toBe('2,338.80');
            helper.edit('G2','1');
            helper.edit('D9', '=ROUNDUP(A5,G2)');
            expect(helper.invoke('getCell', [8, 3]).textContent).toBe('2,338.80');
            helper.edit('D10', '=ROUNDUP(A5,IF(2>1,TRUE,FALSE))');
            expect(helper.invoke('getCell', [9, 3]).textContent).toBe('2,338.80');
            helper.edit('D11', '=ROUNDUP(A5,"TRUE")');
            expect(helper.invoke('getCell', [10, 3]).textContent).toBe('#VALUE!');
            helper.edit('F2','1');
            helper.edit('D12', '=ROUNDUP(A5,F2)');
            expect(helper.invoke('getCell', [11, 3]).textContent).toBe('2,338.80');
            helper.edit('E1','=ROUNDUP(A10,1)');
            expect(helper.invoke('getCell', [0, 4]).textContent).toBe('18488.9');
            helper.edit('E2','=ROUNDUP(A10,2)');
            expect(helper.invoke('getCell', [1, 4]).textContent).toBe('18488.81');
            helper.edit('E3','=ROUNDUP(A10,3)');
            expect(helper.invoke('getCell', [2, 4]).textContent).toBe('18488.809');
            helper.edit('E4','=ROUNDUP(A10,4)');
            expect(helper.invoke('getCell', [3, 4]).textContent).toBe('18488.809');
            helper.edit('E5','=ROUNDUP(A10,5)');
            expect(helper.invoke('getCell', [4, 4]).textContent).toBe('18488.80898');
            helper.edit('E6','=ROUNDUP(A10,6)');
            expect(helper.invoke('getCell', [5, 4]).textContent).toBe('18488.80898');
            helper.edit('E7','=ROUNDUP(A10,7)');
            expect(helper.invoke('getCell', [6, 4]).textContent).toBe('18488.80898');
            helper.edit('E8','=ROUNDUP(A10,8)');
            expect(helper.invoke('getCell', [7, 4]).textContent).toBe('18488.80898');
            helper.edit('E9','=ROUNDUP(A10,9)');
            expect(helper.invoke('getCell', [8, 4]).textContent).toBe('18488.80898');
            done();
        });
        it('applying negative integers as second parameter', (done: Function) => {
            helper.edit('F1','=ROUND(A10,-1)');
            expect(helper.invoke('getCell', [0, 5]).textContent).toBe('18490');
            helper.edit('F2','=ROUND(A10,-2)');
            expect(helper.invoke('getCell', [1, 5]).textContent).toBe('18500');
            helper.edit('F3','=ROUND(A10,-3)');
            expect(helper.invoke('getCell', [2, 5]).textContent).toBe('18000');
            helper.edit('F4','=ROUND(A10,-4)');
            expect(helper.invoke('getCell', [3, 5]).textContent).toBe('20000');
            helper.edit('F5','=ROUND(A10,-5)');
            expect(helper.invoke('getCell', [4, 5]).textContent).toBe('0');
            helper.edit('F6','=ROUND(A10,-6)');
            expect(helper.invoke('getCell', [5, 5]).textContent).toBe('0');
            helper.edit('F7','=ROUND(A10,-7)');
            expect(helper.invoke('getCell', [6, 5]).textContent).toBe('0');
            helper.edit('F8','=ROUND(A10,-8)');
            expect(helper.invoke('getCell', [7, 5]).textContent).toBe('0');
            helper.edit('F9','=ROUND(A10,-9)');
            expect(helper.invoke('getCell', [8, 5]).textContent).toBe('0');
            helper.edit('G1','=ROUNDUP(A10,-1)');
            expect(helper.invoke('getCell', [0, 6]).textContent).toBe('18490');
            helper.edit('G2','=ROUNDUP(A10,-2)');
            expect(helper.invoke('getCell', [1, 6]).textContent).toBe('18500');
            helper.edit('G3','=ROUNDUP(A10,-3)');
            expect(helper.invoke('getCell', [2, 6]).textContent).toBe('19000');
            helper.edit('G4','=ROUNDUP(A10,-4)');
            expect(helper.invoke('getCell', [3, 6]).textContent).toBe('20000');
            helper.edit('G5','=ROUNDUP(A10,-5)');
            expect(helper.invoke('getCell', [4, 6]).textContent).toBe('100000');
            helper.edit('G6','=ROUNDUP(A10,-6)');
            expect(helper.invoke('getCell', [5, 6]).textContent).toBe('1000000');
            helper.edit('G7','=ROUNDUP(A10,-7)');
            expect(helper.invoke('getCell', [6, 6]).textContent).toBe('10000000');
            helper.edit('G8','=ROUNDUP(A10,-8)');
            expect(helper.invoke('getCell', [7, 6]).textContent).toBe('100000000');
            helper.edit('G9','=ROUNDUP(A10,-9)');
            expect(helper.invoke('getCell', [8, 6]).textContent).toBe('1000000000');
            helper.edit('G10','=ROUNDUP(A10,-10)');
            expect(helper.invoke('getCell', [9, 6]).textContent).toBe('10000000000');
            done();
        });
        it('applying internal sheet reference for ROUND', (done: Function) => {
            helper.edit('H1', '=ROUND(Sheet2!A10,2)');
            expect(helper.invoke('getCell', [0, 7]).textContent).toBe('18488.81');
            helper.edit('H2', '=ROUND(Sheet2!A2,1');
            expect(helper.invoke('getCell', [1, 7]).textContent).toBe('8529.2');
            helper.edit('H3', '=ROUND(Sheet2!A3,1)');
            expect(helper.invoke('getCell', [2, 7]).textContent).toBe('17866.2');
            helper.edit('H4', '=ROUND(Sheet2!A4,3)');
            expect(helper.invoke('getCell', [3, 7]).textContent).toBe('13853.092');
            helper.edit('H5', '=ROUND(Sheet2!A4,-1)');
            expect(helper.invoke('getCell', [4, 7]).textContent).toBe('13850');
            helper.edit('H6', '=ROUND(Sheet2!$A$2,A12)');
            expect(helper.invoke('getCell', [5, 7]).textContent).toBe('8529.2');
            helper.edit('H7', '=ROUND(Sheet2!$A$2,Sheet2!$A$12)');
            expect(helper.invoke('getCell', [6, 7]).textContent).toBe('8529.2');
            helper.edit('H8', '=ROUND(Sheet2!$A$6,Sheet2!$A$13)');
            expect(helper.invoke('getCell', [7, 7]).textContent).toBe('9578.45');
            helper.edit('H9', '=ROUND(Sheet1!$A$7,Sheet2!$A$14)');
            expect(helper.invoke('getCell', [8, 7]).textContent).toBe('#VALUE!');
            helper.edit('H10', '=ROUND(Sheet1!$A$8,Sheet2!$A$15)');
            expect(helper.invoke('getCell', [9, 7]).textContent).toBe('#VALUE!');
            done();
        });
        it('applying internal sheet reference for ROUNDUP', (done: Function) => {
            helper.edit('I1', '=ROUNDUP(Sheet2!A10,2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('18488.81');
            helper.edit('I2', '=ROUNDUP(Sheet2!A2,1');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('8529.3');
            helper.edit('I3', '=ROUNDUP(Sheet2!A3,1)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('17866.2');
            helper.edit('I4', '=ROUNDUP(Sheet2!A4,3)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('13853.093');
            helper.edit('I5', '=ROUNDUP(Sheet2!A4,-1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('13860');
            helper.edit('I6', '=ROUNDUP(Sheet2!$A$2,A12)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('8529.3');
            helper.edit('I7', '=ROUNDUP(Sheet2!$A$2,Sheet2!$A$12)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('8529.3');
            helper.edit('I8', '=ROUNDUP(Sheet2!$A$6,Sheet2!$A$13)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('9578.46');
            done();
        });
        it('applying external sheet reference for ROUND', (done: Function) => {
            helper.edit('J1', '=ROUND(Sheet2!A10,2)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('18488.81');
            helper.edit('J2', '=ROUND(Sheet2!$A$2,Sheet1!$G$2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('8529.2');
            helper.edit('J3', '=ROUND(Sheet2!$A$3,Sheet1!$G$8)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('17866.197');
            helper.edit('J4', '=ROUND(Sheet2!A4,3)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('13853.092');
            helper.edit('J5', '=ROUND(Sheet2!A4,-1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('13850');
            done();
        });
        it('applying external sheet reference for ROUNDUP', (done: Function) => {
            helper.edit('K1', '=ROUNDUP(Sheet2!A10,2)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('18488.81');
            helper.edit('K2', '=ROUNDUP(Sheet2!$A$2,Sheet1!$G$2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('8529.3');
            helper.edit('K3', '=ROUNDUP(Sheet2!$A$3,Sheet1!$G$8)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('17866.197');
            helper.edit('K4', '=ROUNDUP(Sheet2!A4,3)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('13853.093');
            helper.edit('K5', '=ROUNDUP(Sheet2!A4,-1)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('13860');
            done();
        });
        it('applying reported issues and nested formulas for ROUND and ROUNDUP', (done: Function) => {
            helper.edit('K6', '=ROUNDUP(EVEN(A2),2)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('8530');
            helper.edit('K7', '=ROUND(INTERCEPT(A2:A4,A6:A8),2)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('7810.9');
            helper.edit('K8', '=ROUND(A9,-1)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('13040');
            helper.edit('K9', '=ROUNDUP(A10,-3)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('19000');
            helper.edit('K10', '=ROUND(ROUND(A2,4),2)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('8529.23');
            helper.edit('K11', '=ROUND(SUM(A2:A6),3)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('52165.715');
            helper.edit('K12', '=ROUND(PRODUCT(A2,2),4)');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('17058.4513');
            helper.edit('K13', '=ROUND(AVERAGE(A2:A6),5)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('10433.14302');
            helper.edit('K14', '=ROUND(AVERAGE(A2:A6),COUNT(A7:A9))');
            expect(helper.invoke('getCell', [13, 10]).textContent).toBe('10433.143');
            helper.edit('K15', '=ROUNDUP(ROUND(A2,4),2)');
            expect(helper.invoke('getCell', [14, 10]).textContent).toBe('8529.23');
            helper.edit('K16', '=ROUNDUP(SUM(A2:A6),3)');
            expect(helper.invoke('getCell', [15, 10]).textContent).toBe('52165.716');
            helper.edit('K17', '=ROUNDUP(PRODUCT(A2,2),4)');
            expect(helper.invoke('getCell', [16, 10]).textContent).toBe('17058.4514');
            helper.edit('K18', '=ROUNDUP(AVERAGE(A2:A6),5)');
            expect(helper.invoke('getCell', [17, 10]).textContent).toBe('10433.14303');
            helper.edit('K19', '=ROUNDUP(AVERAGE(A2:A6),COUNT(A7:A9))');
            expect(helper.invoke('getCell', [18, 10]).textContent).toBe('10433.144');
            done();
        });
    });

    describe('Resolve the issues reported on TEXT formula', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('applying TEXT formula with custom date formats', (done: Function) => {
            helper.edit('I2', '=TEXT(B2,"dd-mm-yy")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('14-02-14');
            helper.edit('I3', '=TEXT(B4,"dd-mmm-yy")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('27-Jul-14');
            helper.edit('I4', '=TEXT(B5,"dd-mmm")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('21-Nov');
            helper.edit('I5', '=TEXT(B6,"mmm-yy")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('Jun-14');
            helper.edit('I6', '=TEXT(B7,"h:mm AM/PM")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('12:00 AM');
            helper.edit('I7', '=TEXT(B8,"h:mm:ss AM/PM")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('12:00:00 AM');
            helper.edit('I8', '=TEXT(B9,"h:mm")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('00:00');
            helper.edit('I9', '=TEXT(B10,"h:mm:ss")');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('00:00:00');
            helper.edit('I10', '=TEXT(B11,"dd-mm-yy h:mm")');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('31-10-14 0:00');
            done();
        });
        it('applying TEXT formula with other formats', (done: Function) => {
            helper.edit('G2', '25000');
            helper.edit('J2', '=TEXT(G2,"0.00")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('25000.00');
            helper.edit('J3', '=TEXT(G2,"#,##0")');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('25,000');
            helper.edit('G3', '62500');
            helper.edit('J4', '=TEXT(G3,"#,##0.00")');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('62,500.00');
            helper.edit('G4', '-53973');
            helper.edit('J5', '=TEXT(G4,"#,##0_);(#,##0)")');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('(53,973)');
            helper.edit('G4', '17964');
            helper.edit('J6', '=TEXT(G4,"#,##0_);(#,##0)")');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('17,964 ');
            helper.edit('J7', '=TEXT(G4,"#,##0_);[Red](#,##0)")');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('17,964 ');
            helper.edit('J8', '=TEXT(G4,"#,##0.00_);[Red](#,##0.00)")');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('17,964.00 ');
            helper.edit('J9', '=TEXT(G2,"0%")');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('2500000%');
            helper.edit('J10', '=TEXT(G2,"0.00%")');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('2500000.00%');
            helper.edit('J11', '=TEXT(G3,"0.00E+00")');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('6.25E+04');
            helper.edit('J12', '=TEXT(G3,"##0.0E+0")');
            expect(helper.invoke('getCell', [11, 9]).textContent).toBe('62.5E+3');
            done();
        });
        it('applying corner cases of TEXT formula', (done: Function) => {
            helper.edit('K2', '=TEXT(G2,)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('25000');
            helper.edit('A12', 'dd-mm-yyyy');
            helper.edit('K3', '=TEXT(B4,A12)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('27-07-2014');
            helper.edit('K4', '=TEXT(FALSE,"0.00")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('FALSE');
            helper.edit('K5', '=TEXT(,"dd-mm-yyyyy")');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('01-01-1900');
            done();
        });
        it('applying nested formula inside TEXT formula', (done: Function) => {
            helper.edit('K8', '=TEXT(SUM(G2,G4),"0.00")');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('42964.00');
            helper.edit('K9', '=TEXT(PRODUCT(G6,20),"#,##0")');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('200');
            helper.edit('K10', '=TEXT(AVERAGE(G2:G10),"#,##0")');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('11,724');
            helper.edit('K11', '=TEXT(AVERAGEIF(G2:G10,">200"),"#,##0")');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('35,155');
            done();
        });
        it('applying extra cases like exponential, date, time with TEXT formula', (done: Function) => {
            helper.edit('L1', '4000.00%');
            helper.edit('L2', '4.05E+09');
            helper.edit('L3', '11/7/2015');
            helper.edit('L4', '3:10:00 AM');
            helper.edit('L5', '=TEXT(L1, "0.00")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('40.00');
            helper.edit('L6', '=TEXT(L2, "0.00")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('4050000000.00');
            helper.edit('L7', '=TEXT(L3,"dd-mmm")');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('07-Nov');
            helper.edit('L8', '=TEXT(L3,"#,##0.00_);(#,##0.00)")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('42,315.00 ');
            done();
        });
    });
    
    describe('Sheet References Checking for TEXT formula', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                    rows: [{ cells: [{ value: '2/14/2014' }] },
                    { cells: [{ value: '6/11/2014' }] }, { cells: [{ value: '7/27/2014' }] }, { cells: [{ value: '11/21/2014' }] },
                    { cells: [{ value: '6/23/2014' }] }, { cells: [{ value: '7/22/2014' }] },{ cells: [{ value: '13972' }] },{ cells: [{ value: '62500' }] },
                    { cells: [{ value: '25000' }] }, { cells: [{ value: 'dd-mm-yyyy' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('TEXT Formula with absolute cell refernces as arguments->', (done: Function) => {
            helper.edit('I2', '=TEXT($B$3,"dd-mm-yyyy")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('11-06-2014');
            helper.edit('I3', '=TEXT($B$4,"mmm-yy")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('Jul-14');
            helper.edit('I4', '=TEXT($B$5,"dd-mm-yy")');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('21-11-14');
            helper.edit('A12', 'dd-mm-yyyy');
            helper.edit('I5', '=TEXT($B$4,A12)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('27-07-2014');
            done();
        });
        it('TEXT Formula with Sheet refernces as arguments->', (done: Function) => {
            helper.edit('I6', '=TEXT(Sheet2!A7,"$#,##0.00_);($#,##0.00)")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('$13,972.00 ');
            helper.edit('I7', '=TEXT(Sheet2!A8,"0.00")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('62500.00');
            helper.edit('I8', '=TEXT(Sheet2!A9,"#,##0")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('25,000');
            done();
        });
        it('TEXT Formula with absolute cell of Sheet refernces as arguments->', (done: Function) => {
            helper.edit('I9', '=TEXT(Sheet2!$A$7,"$#,##0.00_);($#,##0.00)")');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('$13,972.00 ');
            helper.edit('I10', '=TEXT(Sheet2!$A$8,"0.00")');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('62500.00');
            helper.edit('I11', '=TEXT(Sheet2!$A$9,Sheet1!A12)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('11-06-1968');
            done();
        });
    });
    describe('EJ2-844967 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ rows: [
                { cells: [{ formula: '=true+true' }, { formula: '=true-true'}, { formula: '=true*true'}, { formula: '=true/true'}, { value: 'TRUE'}] },
                { cells: [{ formula:'=true+false' }, { formula: '=true-false'}, { formula: '=true*false'}, { formula: '=true/false'}, { value: 'FALSE'}] },
                { cells: [{ formula:'=false+false' }, { formula: '=false-false'}, { formula: '=false*false'}, { formula: '=false/false'}] },
                { cells: [{ formula:'=false+true' }, { formula: '=false-true'}, { formula: '=false*true'}, { formula: '=false/true'}] },
                { cells: [{ formula:'=TRUE+FALSE+2+TRUE' }, { formula: '=TRUE-FALSE-TRUE-4'}, { formula: '=TRUE>FALSE+TRUE+TRUE+TRUE'}, { formula: '=FLASE>FALSE+TRUE+TRUE+TRUE'}] },
                { cells: [{ formula:'=FLASE<FALSE+TRUE+TRUE+TRUE' }, { formula: '=4<FALSE+TRUE+TRUE+TRUE'}, { formula: '=TRUE+TRUE<FALSE+TRUE+TRUE+TRUE'}, { formula: '=TRUE+TRUE>FALSE+TRUE+TRUE+TRUE'}] },
                { cells: [{ formula:'=E1+E2' }, { formula: '=E1-E2'}, { formula: '=E1*E1'}, { formula: '=E1/E1'}] },
                { cells: [{ formula:'=E2+E1' }, { formula: '=E2-E1'}, { formula: '=E2*E1'}, { formula: '=E1/E2'}] }
            ] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Arithmetic Operations with boolean values without cell reference throws #VALUE! error', (done: Function) => {
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[0].cells[0].value).toEqual('2');
                expect(helper.getInstance().sheets[0].rows[0].cells[1].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[0].cells[2].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[0].cells[3].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[1].cells[0].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[1].cells[1].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[1].cells[2].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[1].cells[3].value).toEqual('#DIV/0!');
                expect(helper.getInstance().sheets[0].rows[2].cells[0].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[2].cells[1].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[2].cells[2].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[2].cells[3].value).toEqual('#DIV/0!');
                expect(helper.getInstance().sheets[0].rows[3].cells[0].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[3].cells[1].value).toEqual('-1');
                expect(helper.getInstance().sheets[0].rows[3].cells[2].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[3].cells[3].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[4].cells[0].value).toEqual('4');
                expect(helper.getInstance().sheets[0].rows[4].cells[1].value).toEqual('-4');
                expect(helper.getInstance().sheets[0].rows[4].cells[2].value).toEqual('TRUE');
                expect(helper.getInstance().sheets[0].rows[4].cells[3].value).toEqual('#NAME?');
                expect(helper.getInstance().sheets[0].rows[5].cells[0].value).toEqual('#NAME?');
                expect(helper.getInstance().sheets[0].rows[5].cells[1].value).toEqual('FALSE');
                expect(helper.getInstance().sheets[0].rows[5].cells[2].value).toEqual('TRUE');
                expect(helper.getInstance().sheets[0].rows[5].cells[3].value).toEqual('FALSE');
                expect(helper.getInstance().sheets[0].rows[6].cells[0].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[6].cells[1].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[6].cells[2].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[6].cells[3].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[7].cells[0].value).toEqual('1');
                expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toEqual('-1');
                expect(helper.getInstance().sheets[0].rows[7].cells[2].value).toEqual('0');
                expect(helper.getInstance().sheets[0].rows[7].cells[3].value).toEqual('#DIV/0!');
                done();
            });
        });
    });
    describe('EJ2-834243', () => {
        const model: SpreadsheetModel = {
            sheets: [{
                rows: [
                    { cells: [{ value: 'TRUE' }, { formula: '=DAY(A1)' }, { formula: '=DAY(TRUE)' }, { index: 4, formula: '=DATE(A1,A6,A7)'}, { formula: '=DATE(TRUE,A6,A7)'}] },
                    { cells: [{ value: 'FALSE' }, { formula: '=DAY(A2)' }, { formula: '=DAY(FALSE)' }, { index: 4, formula: '=DATE(A6,A7,A2)'}, { formula: '=DATE(A6,A7,FALSE)'}] },
                    { cells: [{ value: '100', format: '$#,##0.00' }, { formula: '=DAY(A3)' }, { index: 4, formula: '=DATE(10000,1,2)'}, { formula: '=DATE(10000,-1,1)' }] },
                    { cells: [{ value: '1', format: '0.00%' }, { formula: '=DAY(A4)' }, { index: 4, formula: '=DATE(0,-1,30)'}, { formula: '=DATE(0,1,1)' }] },
                    { cells: [{ value: '10', format: '0.00E+00' }, { formula: '=DAY(A5)' }, { index: 4, formula: '=DATE(9999,12,32)'}, { formula: '=DATE(10000,1,-1000)'}] },
                    { cells: [{ value: '10' }, { formula: '=DAY(A6)' }, { formula: '=DAY(6A)' }, { index: 4, formula: '=DATE(A3,Sheet1!A4,Sheet1!$A$5)'}, { formula: '=DATE(A3,Sheet1!A4,Sheet2!$A$2)'}] },
                    { cells: [{ value: '50' }, { formula: '=DAY($A$7)' }, { formula: '=DAY("7A")' }, { formula: '=DAY(Sheet2!$A$2)' }, { index: 4, formula: '=DATE(A6,Sheet2!$A$2,Sheet2!A1)'}, { formula: '=DATE(Sheet2!$A$1,Sheet2!$A$2,Sheet2!$A$1)'}] },
                    { cells: [{ formula: '=SUM(A6,A7)' }, { formula: '=DAY(Sheet1!$A$8)' }, { formula: '=DAY(Sheet2!A3)' }, { index: 4, formula: '=DATE(SUM(A6,A7),A5,A6)'}] },
                    { cells: [{ value: '"33"' }, { formula: '=DAY(A9)' }, { formula: '=DAY("33")' }, { index: 4, formula: '=DATE(A9,A9,A9)'}, { formula: '=DATE(2000,10,"30")'}] },
                    { cells: [{ value: 'text' }, { formula: '=DAY(A10)' }, { formula: '=DAY(text)' }, { index: 4, formula: '=DATE(A10,A10,A10)'}, { formula: '=DATE(2000,10,"text")'}] },
                    { cells: [{ value: 'text01' }, { formula: '=DAY(A11)' }, { formula: '=DAY(text01)' }, { index: 4, formula: '=DATE(A11,A11,A11)'}, { formula: '=DATE(2000,10,text01)'}] },
                    { cells: [{ value: '"text01"' }, { formula: '=DAY(A12)' }, { formula: '=DAY("text01")' }, { index: 4, formula: '=DATE(A12,A12,A12)'}, { formula: '=DATE(2000,10,"text01")'}] },
                    { cells: [{ value: '10/31/1900' }, { formula: '=DAY(A13)' },{ formula: '=DAY(10/31/1900)' }, { index: 4, formula: '=DATE(A13,A13,A13)'}, { formula: '=DATE(2000,10,A13)'}] },
                    { cells: [{ value: '"10/22/2000"' }, { formula: '=DAY(A14)' }, { formula: '=DAY("10/22/2000")' }, { index: 4, formula: '=DATE(A14,A14,A14)'}, { formula: '=DATE(2000,10,A14)'}] },
                    { cells: [{ value: '0' }, { formula: '=DAY(A15)' }, { formula: '=DAY(0)' }, { index: 4, formula: '=DATE(A15,A15,A15)'}, { formula: '=DATE(0,0,0)'}, { formula: '=DATE(2000,0,10)'}] },
                    { cells: [{ value: '"0"' }, { formula: '=DAY(A16)' }, { formula: '=DAY("0")' }, { index: 4, formula: '=DATE(A16,A16,A16)'}, { formula: '=DATE("0","0","0")'}, { formula: '=DATE(2000,"0",10)'}] },
                    { cells: [{ value: '' }, { formula: '=DAY(A17)' },  { formula: '=DAY(Sheet1!$A$6)' },  { index: 4, formula: '=DATE(A17,A17,A17)'}, { formula: '=DATE(,,)'}, { formula: '=DATE(2000,,10)'}] },
                    { cells: [{ value: '""' }, { formula: '=DAY(A18)' }, { formula: '=DAY("")' }, { index: 4, formula: '=DATE(A18,A18,A18)'}, { formula: '=DATE("","","")'}, { formula: '=DATE(2000,10,A18)'}] },
                    { cells: [{ value: '15/30/2014' }, { formula: '=DAY(A19)' }, { formula: '=DAY($A$13)' }, { index: 4, formula: '=DATE(2000,A19,10)'}, { formula: '=DATE("","","")'}, { formula: '=DATE(2000,10,"")'}] },
                    { cells: [{ value: '#REF!' }, { formula: '=DAY(A20)' }, { index: 4, formula: '=DATE(A20,A20,A20)'}, { formula: '=DATE(2000,A20,10)'}] },
                    { cells: [{ value: '8/21/1900  11:45:00 AM' }, { formula: '=DAY(A21)' }, { index: 4, formula: '=DATE(2000,10,A21)'}] },
                    { cells: [{ index: 1, formula: '=DAY(2/14)' }, { index: 4, formula: '=DATE(2000,10,"TRUE")'}, { formula: '=DATE(2000,FALSE,TRUE)'}] },
                    { cells: [{ index: 1, formula: '=DAY(2/14/2014)' }, { index: 4, formula: '=DATE(2000,MONTH(15),DAY(30))'}] },
                    { cells: [{ index: 1, formula: '=DAY(234.45623)' }, { index: 4, formula: '=DATE(2000,10,DAYS(25,12))'}] },
                    { cells: [{ index: 1, formula: '=DAY(SUM(A7,A8))' }, { index: 4, formula: '=DATE(2000,SUM(A7,A8),10)'}] }
                ]
            }, {
                rows: [{ cells: [{ value: '10' }] }, { cells: [{ value: '50' }] }, { cells: [{ formula: '=SUM(A1,A2)' }] }, { cells: [{ value: '10/31/1800' }] }]
            }]
        };
        beforeEach((done: Function) => {
            helper.initializeSpreadsheet(model, done);
        });
        afterEach(() => {
            helper.invoke('destroy');
        });
        it('DAY formula checking', (done: Function) => {
            expect(helper.getInstance().sheets[0].rows[0].cells[1].value).toEqual(1);
            expect(helper.getInstance().sheets[0].rows[1].cells[1].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[0].cells[2].value).toEqual(1);
            expect(helper.getInstance().sheets[0].rows[1].cells[2].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[2].cells[1].value).toEqual(9);
            expect(helper.getInstance().sheets[0].rows[3].cells[1].value).toEqual(1);
            expect(helper.getInstance().sheets[0].rows[4].cells[1].value).toEqual(10);
            expect(helper.getInstance().sheets[0].rows[5].cells[1].value).toEqual(10);
            expect(helper.getInstance().sheets[0].rows[5].cells[2].value).toEqual(10);
            expect(helper.getInstance().sheets[0].rows[6].cells[1].value).toEqual(19);
            expect(helper.getInstance().sheets[0].rows[6].cells[2].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[7].cells[1].value).toEqual(1);
            expect(helper.getInstance().sheets[0].rows[7].cells[2].value).toEqual(1);
            expect(helper.getInstance().sheets[0].rows[8].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[8].cells[2].value).toEqual(2);
            expect(helper.getInstance().sheets[0].rows[9].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[9].cells[2].value).toEqual('#NAME?');
            expect(helper.getInstance().sheets[0].rows[10].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[10].cells[2].value).toEqual('#NAME?');
            expect(helper.getInstance().sheets[0].rows[11].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[11].cells[2].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[12].cells[1].value).toEqual(31);
            expect(helper.getInstance().sheets[0].rows[12].cells[2].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[13].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[13].cells[2].value).toEqual(22);
            expect(helper.getInstance().sheets[0].rows[14].cells[1].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[14].cells[2].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[15].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[15].cells[2].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[16].cells[1].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[16].cells[2].value).toEqual(10);
            expect(helper.getInstance().sheets[0].rows[17].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[17].cells[2].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[18].cells[1].value).toEqual('#VALUE!');
            expect(helper.getInstance().sheets[0].rows[18].cells[2].value).toEqual(31);
            expect(helper.getInstance().sheets[0].rows[19].cells[1].value).toEqual('#REF!');
            expect(helper.getInstance().sheets[0].rows[20].cells[1].value).toEqual(21);
            expect(helper.getInstance().sheets[0].rows[21].cells[1].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[22].cells[1].value).toEqual(0);
            expect(helper.getInstance().sheets[0].rows[23].cells[1].value).toEqual(21);
            expect(helper.getInstance().sheets[0].rows[24].cells[1].value).toEqual(19);
            done();
        });
        it('DATE formula checking', (done: Function) => {
            expect(helper.invoke('getCell', [0, 4]).textContent).toBe('11/19/1901');
            expect(helper.invoke('getCell', [0, 5]).textContent).toBe('11/19/1901');
            expect(helper.invoke('getCell', [1, 4]).textContent).toBe('1/31/1914');
            expect(helper.invoke('getCell', [1, 5]).textContent).toBe('1/31/1914');
            expect(helper.invoke('getCell', [2, 4]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [2, 5]).textContent).toBe('11/1/9999');
            expect(helper.invoke('getCell', [3, 4]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [3, 5]).textContent).toBe('1/1/1900');
            expect(helper.invoke('getCell', [4, 4]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [4, 5]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [5, 4]).textContent).toBe('1/10/2000');
            expect(helper.invoke('getCell', [5, 5]).textContent).toBe('2/19/2000');
            expect(helper.invoke('getCell', [6, 4]).textContent).toBe('2/10/1914');
            expect(helper.invoke('getCell', [6, 5]).textContent).toBe('2/10/1914');
            expect(helper.invoke('getCell', [7, 4]).textContent).toBe('10/10/1960');
            expect(helper.invoke('getCell', [8, 4]).textContent).toBe('10/3/1935');
            expect(helper.invoke('getCell', [8, 5]).textContent).toBe('10/30/2000');
            expect(helper.invoke('getCell', [9, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [9, 5]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [10, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [10, 5]).textContent).toBe('#NAME?');
            expect(helper.invoke('getCell', [11, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [11, 5]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [12, 4]).textContent).toBe('3/1/2231');
            expect(helper.invoke('getCell', [12, 5]).textContent).toBe('8/1/2001');
            expect(helper.invoke('getCell', [13, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [13, 5]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [14, 4]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [14, 5]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [14, 6]).textContent).toBe('12/10/1999');
            expect(helper.invoke('getCell', [15, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [15, 5]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [15, 6]).textContent).toBe('12/10/1999');
            expect(helper.invoke('getCell', [16, 4]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [16, 5]).textContent).toBe('#NUM!');
            expect(helper.invoke('getCell', [16, 6]).textContent).toBe('12/10/1999');
            expect(helper.invoke('getCell', [17, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [17, 5]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [17, 6]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [18, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [18, 5]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [18, 6]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [19, 4]).textContent).toBe('#REF!');
            expect(helper.invoke('getCell', [19, 5]).textContent).toBe('#REF!');
            expect(helper.invoke('getCell', [20, 4]).textContent).toBe('5/22/2001');
            expect(helper.invoke('getCell', [21, 4]).textContent).toBe('#VALUE!');
            expect(helper.invoke('getCell', [21, 5]).textContent).toBe('12/1/1999');
            expect(helper.invoke('getCell', [22, 4]).textContent).toBe('1/30/2000');
            expect(helper.invoke('getCell', [23, 4]).textContent).toBe('10/13/2000');
            expect(helper.invoke('getCell', [24, 4]).textContent).toBe('2/10/2009');
            done();
        });
    });
    describe('EJ2-844325 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ rows: [
                { cells: [{ value:'5' }, { index: 2, formula: '=A2++A1'}, { formula: '=A2--A1'}, { formula: '=A2**A1'}, { formula: '=A2//A1'}, { formula: '=A2^^A1'}, { formula: '=A2&&A1'}] },
                { cells: [{ value:'3' }, { index: 2, formula: '=A2+-A1'}, { formula: '=A2-+A1'}, { formula: '=A2*/A1'}, { formula: '=A2/*A1'}, { formula: '=A2^+A1'}, { formula: '=A2&+A1'}] },
                { cells: [{ index: 2, formula: '=A2+*A1'}, { formula: '=A2-*A1'}, { formula: '=A2*+A1'}, { formula: '=A2/+A1'}, { formula: '=A2^-A1'}, { formula: '=A2&-A1'}] },
                { cells: [{ index: 2, formula: '=A2+/A1'}, { formula: '=A2-/A1'}, { formula: '=A2*-A1'}, { formula: '=A2/-A1'}, { formula: '=A2^*A1'}, { formula: '=A2&*A1'}] },
                { cells: [{ index: 2, formula: '=A2+^A1'}, { formula: '=A2-^A1'}, { formula: '=A2*^A1'}, { formula: '=A2/^A1'}, { formula: '=A2^/A1'}, { formula: '=A2&/A1'}] },
                { cells: [{ index: 2, formula: '=A2+&A1'}, { formula: '=A2-&A1'}, { formula: '=A2*&A1'}, { formula: '=A2/&A1'}, { formula: '=A2^&A1'}, { formula: '=A2&^A1'}] }
            ] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Formula that contains multiple plus operator throws invalid expression error', (done: Function) => {
            expect(helper.getInstance().sheets[0].rows[0].cells[2].formula).toEqual('=A2++A1');
            expect(helper.getInstance().sheets[0].rows[0].cells[2].value).toEqual('8');
            expect(helper.getInstance().sheets[0].rows[0].cells[3].formula).toEqual('=A2--A1');
            expect(helper.getInstance().sheets[0].rows[0].cells[3].value).toEqual('8');
            expect(helper.getInstance().sheets[0].rows[0].cells[4].formula).toEqual('=A2**A1');
            expect(helper.getInstance().sheets[0].rows[0].cells[4].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].formula).toEqual('=A2//A1');
            expect(helper.getInstance().sheets[0].rows[0].cells[5].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[0].cells[6].formula).toEqual('=A2^^A1');
            expect(helper.getInstance().sheets[0].rows[0].cells[6].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[0].cells[7].formula).toEqual('=A2&&A1');
            expect(helper.getInstance().sheets[0].rows[0].cells[7].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[1].cells[2].formula).toEqual('=A2+-A1');
            expect(helper.getInstance().sheets[0].rows[1].cells[2].value).toEqual('-2');
            expect(helper.getInstance().sheets[0].rows[1].cells[3].formula).toEqual('=A2-+A1');
            expect(helper.getInstance().sheets[0].rows[1].cells[3].value).toEqual('-2');
            expect(helper.getInstance().sheets[0].rows[1].cells[4].formula).toEqual('=A2*/A1');
            expect(helper.getInstance().sheets[0].rows[1].cells[4].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[1].cells[5].formula).toEqual('=A2/*A1');
            expect(helper.getInstance().sheets[0].rows[1].cells[5].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[1].cells[6].formula).toEqual('=A2^A1');
            expect(helper.getInstance().sheets[0].rows[1].cells[6].value).toEqual('243');
            expect(helper.getInstance().sheets[0].rows[1].cells[7].formula).toEqual('=A2&A1');
            expect(helper.getInstance().sheets[0].rows[1].cells[7].value).toEqual('35');
            expect(helper.getInstance().sheets[0].rows[2].cells[2].formula).toEqual('=A2+*A1');
            expect(helper.getInstance().sheets[0].rows[2].cells[2].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[2].cells[3].formula).toEqual('=A2-*A1');
            expect(helper.getInstance().sheets[0].rows[2].cells[3].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[2].cells[4].formula).toEqual('=A2*+A1');
            expect(helper.getInstance().sheets[0].rows[2].cells[4].value).toEqual('15');
            expect(helper.getInstance().sheets[0].rows[2].cells[5].formula).toEqual('=A2/+A1');
            expect(helper.getInstance().sheets[0].rows[2].cells[5].value).toEqual('0.6');
            expect(helper.getInstance().sheets[0].rows[2].cells[6].formula).toEqual('=A2^-A1');
            expect(helper.getInstance().sheets[0].rows[2].cells[6].value).toEqual('0.00411522633744856');
            expect(helper.getInstance().sheets[0].rows[2].cells[7].formula).toEqual('=A2&-A1');
            expect(helper.getInstance().sheets[0].rows[2].cells[7].value).toEqual('3-5');
            expect(helper.getInstance().sheets[0].rows[3].cells[2].formula).toEqual('=A2+/A1');
            expect(helper.getInstance().sheets[0].rows[3].cells[2].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[3].cells[3].formula).toEqual('=A2-/A1');
            expect(helper.getInstance().sheets[0].rows[3].cells[3].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[3].cells[4].formula).toEqual('=A2*-A1');
            expect(helper.getInstance().sheets[0].rows[3].cells[4].value).toEqual('-15');
            expect(helper.getInstance().sheets[0].rows[3].cells[5].formula).toEqual('=A2/-A1');
            expect(helper.getInstance().sheets[0].rows[3].cells[5].value).toEqual('-0.6');
            expect(helper.getInstance().sheets[0].rows[3].cells[6].formula).toEqual('=A2^*A1');
            expect(helper.getInstance().sheets[0].rows[3].cells[6].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[3].cells[7].formula).toEqual('=A2&*A1');
            expect(helper.getInstance().sheets[0].rows[3].cells[7].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[4].cells[2].formula).toEqual('=A2+^A1');
            expect(helper.getInstance().sheets[0].rows[4].cells[2].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[4].cells[3].formula).toEqual('=A2-^A1');
            expect(helper.getInstance().sheets[0].rows[4].cells[3].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[4].cells[4].formula).toEqual('=A2*^A1');
            expect(helper.getInstance().sheets[0].rows[4].cells[4].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[4].cells[5].formula).toEqual('=A2/^A1');
            expect(helper.getInstance().sheets[0].rows[4].cells[5].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[4].cells[6].formula).toEqual('=A2^/A1');
            expect(helper.getInstance().sheets[0].rows[4].cells[6].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[4].cells[7].formula).toEqual('=A2&/A1');
            expect(helper.getInstance().sheets[0].rows[4].cells[7].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[2].formula).toEqual('=A2+&A1');
            expect(helper.getInstance().sheets[0].rows[5].cells[2].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[3].formula).toEqual('=A2-&A1');
            expect(helper.getInstance().sheets[0].rows[5].cells[3].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[4].formula).toEqual('=A2*&A1');
            expect(helper.getInstance().sheets[0].rows[5].cells[4].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[5].formula).toEqual('=A2/&A1');
            expect(helper.getInstance().sheets[0].rows[5].cells[5].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[6].formula).toEqual('=A2^&A1');
            expect(helper.getInstance().sheets[0].rows[5].cells[6].value).toEqual('invalid expression');
            expect(helper.getInstance().sheets[0].rows[5].cells[7].formula).toEqual('=A2&^A1');
            expect(helper.getInstance().sheets[0].rows[5].cells[7].value).toEqual('invalid expression');
            done();
        });
    });

    describe('sheet reference check for ODD formula', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                    rows: [{ cells: [{ value: '23.345' }] },
                    { cells: [{ value: '-7651.34' }] }, { cells: [{ value: '-456' }] }, { cells: [{ value: '45' }] },
                    { cells: [{ value: '34' }] }, { cells: [{ value: '22' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('I2', '=ODD($G$3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('5');
            helper.edit('I3', '=ODD($G$4)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('7');
            helper.edit('I4', '=ODD($G$5)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('11');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('I5', '=ODD(Sheet2!A1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('25');
            helper.edit('I6', '=ODD(Sheet2!A2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('-7653');
            helper.edit('I7', '=ODD(Sheet2!A3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('-457');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('I5', '=ODD(Sheet2!$A$1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('25');
            helper.edit('I6', '=ODD(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('-7653');
            helper.edit('I7', '=ODD(Sheet2!$A$3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('-457');
            done();
        });
    });

    describe('EJ2-923901 -> ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ name: 'Price Details', ranges: [{ dataSource: defaultData }] }, { ranges: [{ dataSource: defaultData }] }],
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Formula cell reference value is not changed while inserting the column before or after', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            helper.invoke('goTo', ['Sheet1!I2']);
            setTimeout(function () {
                helper.edit('I2', '=SUM(Price Details!H2:H11)');
                expect(helper.invoke('getCell', [1, 8]).textContent).toBe('554');
                expect(spreadsheet.sheets[1].rows[1].cells[8].formula).toBe('=SUM(Price Details!H2:H11)');
                helper.edit('I3', '=SUM(\'Price Details\'!H2:\'Price Details\'!H11)');
                expect(helper.invoke('getCell', [2, 8]).textContent).toBe('554');
                expect(spreadsheet.sheets[1].rows[2].cells[8].formula).toBe('=SUM(\'Price Details\'!H2:\'Price Details\'!H11)');
                spreadsheet.insertColumn(7, 7, 0);
                expect(helper.invoke('getCell', [1, 8]).textContent).toBe('554');
                expect(spreadsheet.sheets[1].rows[1].cells[8].formula).toBe('=SUM(Price Details!I2:I11)');
                expect(helper.invoke('getCell', [2, 8]).textContent).toBe('554');
                expect(spreadsheet.sheets[1].rows[2].cells[8].formula).toBe('=SUM(\'Price Details\'!I2:\'Price Details\'!I11)');
                spreadsheet.insertColumn(8, 10, 0);
                expect(helper.invoke('getCell', [1, 8]).textContent).toBe('554');
                expect(spreadsheet.sheets[1].rows[1].cells[8].formula).toBe('=SUM(Price Details!L2:L11)');
                expect(helper.invoke('getCell', [2, 8]).textContent).toBe('554');
                expect(spreadsheet.sheets[1].rows[2].cells[8].formula).toBe('=SUM(\'Price Details\'!L2:\'Price Details\'!L11)');
                done();
            });
        });
    });
    
    describe('Sheet reference check for EVEN formula', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                    rows: [{ cells: [{ value: '23.456' }] },
                    { cells: [{ value: '234.45556' }] }, { cells: [{ value: '567' }] }, { cells: [{ value: '89' }] },
                    { cells: [{ value: '-345' }] }, { cells: [{ value: '-34.54' }] },{ cells: [{ value: '13972' }] }]
                }], activeSheetIndex: 0
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('I2', '=EVEN($G$3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('6');
            helper.edit('I3', '=EVEN($G$4)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('8');
            helper.edit('I4', '=EVEN($G$5)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('12');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('I5', '=EVEN(Sheet2!A1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('24');
            helper.edit('I6', '=EVEN(Sheet2!A2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('236');
            helper.edit('I7', '=EVEN(Sheet2!A3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('568');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('I5', '=EVEN(Sheet2!$A$1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('24');
            helper.edit('I6', '=EVEN(Sheet2!$A$2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('236');
            helper.edit('I7', '=EVEN(Sheet2!$A$3)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('568');
            done();
        });
    });

    describe('FLOOR formula checking', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                rows: [{ cells: [{ value: '-23.456' }] },
                { cells: [{ value: '234.45556' }] }, { cells: [{ value: '-567.547' }] }, { cells: [{ value: '-89,789' }] },
                { cells: [{ value: '-345' }] }, { cells: [{ value: '-34.54' }] },{ cells: [{ value: '13972' }] }]
            }], activeSheetIndex: 0 }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('FLOOR formula with string values', (done: Function) => {
            helper.edit('I2', '=FLOOR("3.7","2")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('2');
            helper.edit('I3', '=FLOOR("-2.5","-2")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('-2');
            helper.edit('I4', '=FLOOR(A1,2)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            helper.edit('I5', '=FLOOR(" "," ")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            helper.edit('I6', '=FLOOR("","")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            helper.edit('I7', '=FLOOR(123,"TRUE")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            helper.edit('I8', '=FLOOR(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I9', '=FLOOR(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I10', '=FLOOR(123,"FALSE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('FLOOR formula with boolean values', (done: Function) => {
            helper.edit('J2', '=FLOOR(TRUE,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('1');
            helper.edit('J3', '=FLOOR(FALSE,FALSE)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=FLOOR(123,FALSE)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J5', '=FLOOR(TRUE,1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1');
            helper.edit('J6', '=FLOOR(FALSE,1)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=FLOOR(IF(2>1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('1');
            helper.edit('J8', '=FLOOR(IF(2<1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0');
            done();
        });
        it('FLOOR formula with basic values', (done: Function) => {
            helper.edit('K2', '=FLOOR(3.7,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('2');
            helper.edit('K3', '=FLOOR(-2.5,-2)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('-2');
            helper.edit('K4', '=FLOOR(2.5,-2)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NUM!');
            helper.edit('K5', '=FLOOR(2.5,-2)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#NUM!');
            helper.edit('K6', '=FLOOR(1.58,0.1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('1.5');
            helper.edit('K7', '=FLOOR(0.234,0.01)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0.23');
            helper.edit('K8', '=FLOOR(,)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('0');
            done();
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('L2', '=FLOOR($G$3,2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('4');
            helper.edit('L3', '=FLOOR($G$4,3)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('6');
            helper.edit('L4', '=FLOOR($G$5,5)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('10');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('L5', '=FLOOR(Sheet2!A1,1)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('-24');
            helper.edit('L6', '=FLOOR(Sheet2!A2,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('234');
            helper.edit('L7', '=FLOOR(Sheet2!A3,3)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('-570');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('L8', '=FLOOR(Sheet2!$A$1,1)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('-24');
            helper.edit('L9', '=FLOOR(Sheet2!$A$2,2)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('234');
            helper.edit('L10', '=FLOOR(Sheet2!$A$3,3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('-570');
            done();
        });
        it('nested formula with FLOOR', function (done) {
            helper.edit('L11', '=FLOOR(SUM(1,2),2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('2');
            helper.edit('L12', '=FLOOR(SUM(1,G10),2)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('12');
            helper.edit('L13', '=FLOOR(PRODUCT(1,G10),12)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('12');
            helper.edit('L14', '=FLOOR(PRODUCT(1,2),2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('2');
            helper.edit('L15', '=FLOOR(AVERAGE(G3:G7),10)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('0');
            helper.edit('L16', '=FLOOR(MIN(G3:G9),12)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('0');
            helper.edit('L17', '=FLOOR(MAX(G3:G9),9)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('9');
            helper.edit('L18', '=FLOOR(IF(A2>A5,2,3),2)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('2');
            helper.edit('L19', '=MIN(FLOOR(22,3), FLOOR(12,5))');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('10');
            helper.edit('L20', '=MAX(FLOOR(22,3), FLOOR(12,5))');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('21');
            helper.edit('L21', '=SUM(FLOOR(22,3), FLOOR(12,5))');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('31');
            done();
        });
        it('FLOOR formula with empty cell referrence', (done: Function) => {
            helper.edit('M2', '=FLOOR(N2,2)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('0');
            helper.edit('M3', '=FLOOR(2,N2)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#DIV/0!');
            helper.edit('M4', '=FLOOR(N4,N2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('0');
            done();
        });
    });

    describe('CEILING formula checking', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                rows: [{ cells: [{ value: '-23.456' }] },
                { cells: [{ value: '234.45556' }] }, { cells: [{ value: '-567.547' }] }, { cells: [{ value: '-89,789' }] },
                { cells: [{ value: '-345' }] }, { cells: [{ value: '-34.54' }] },{ cells: [{ value: '13972' }] }]
            }], activeSheetIndex: 0 }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CEILING formula with string values', (done: Function) => {
            helper.edit('I2', '=CEILING("3.7","2")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('4');
            helper.edit('I3', '=CEILING("-2.5","-2")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('-4');
            helper.edit('I4', '=CEILING(A1,2)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            helper.edit('I5', '=CEILING(" "," ")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            helper.edit('I6', '=CEILING("","")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            helper.edit('I7', '=CEILING(123,"TRUE")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            helper.edit('I8', '=CEILING(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I9', '=CEILING(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I10', '=CEILING(123,"FALSE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('CEILING formula with boolean values', (done: Function) => {
            helper.edit('J2', '=CEILING(TRUE,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('1');
            helper.edit('J3', '=CEILING(FALSE,FALSE)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=CEILING(123,FALSE)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            helper.edit('J5', '=CEILING(TRUE,1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1');
            helper.edit('J6', '=CEILING(FALSE,1)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=CEILING(IF(2>1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('1');
            helper.edit('J8', '=CEILING(IF(2<1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0');
            done();
        });
        it('CEILING formula with basic values', (done: Function) => {
            helper.edit('K2', '=CEILING(3.7,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('4');
            helper.edit('K3', '=CEILING(-2.5,-2)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('-4');
            helper.edit('K4', '=CEILING(2.5,-2)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#NUM!');
            helper.edit('K5', '=CEILING(2.5,-2)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('#NUM!');
            helper.edit('K6', '=CEILING(1.58,0.1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('1.6');
            helper.edit('K7', '=CEILING(0.234,0.01)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0.24');
            helper.edit('K8', '=CEILING(,)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('0');
            done();
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('L2', '=CEILING($G$3,2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('6');
            helper.edit('L3', '=CEILING($G$4,3)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('9');
            helper.edit('L4', '=CEILING($G$5,5)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('15');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('L5', '=CEILING(Sheet2!A1,1)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('-23');
            helper.edit('L6', '=CEILING(Sheet2!A2,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('236');
            helper.edit('L7', '=CEILING(Sheet2!A3,3)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('-567');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('L8', '=CEILING(Sheet2!$A$1,1)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('-23');
            helper.edit('L9', '=CEILING(Sheet2!$A$2,2)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('236');
            helper.edit('L10', '=CEILING(Sheet2!$A$3,3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('-567');
            done();
        });
        it('nested formula with CEILING', function (done) {
            helper.edit('L11', '=CEILING(SUM(1,2),2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('4');
            helper.edit('L12', '=CEILING(SUM(1,G10),2)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('14');
            helper.edit('L13', '=CEILING(PRODUCT(1,G10),12)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('12');
            helper.edit('L14', '=CEILING(PRODUCT(1,2),2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('2');
            helper.edit('L15', '=CEILING(AVERAGE(G3:G7),10)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('10');
            helper.edit('L16', '=CEILING(MIN(G3:G9),12)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('12');
            helper.edit('L17', '=CEILING(MAX(G3:G9),9)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('18');
            helper.edit('L18', '=CEILING(IF(A2>A5,2,3),2)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('4');
            helper.edit('L19', '=MIN(CEILING(22,3), CEILING(12,5))');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('15');
            helper.edit('L20', '=MAX(CEILING(22,3), CEILING(12,5))');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('24');
            helper.edit('L21', '=SUM(CEILING(22,3), CEILING(12,5))');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('39');
            done();
        });
        it('CEILING formula with empty cell referrence', (done: Function) => {
            helper.edit('M2', '=CEILING(N2,2)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('0');
            helper.edit('M3', '=CEILING(2,N2)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('0');
            helper.edit('M4', '=CEILING(N4,N2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('0');
            done();
        });
    });
    describe('EJ2-853889 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Spreasheet throws console error when inserting rows in sheet that contains formula with column reference', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            helper.edit('J1', '=COUNTIF(H:H,">10")');
            helper.edit('A12', '=COUNTIF(10:10,">10")');
            expect(helper.invoke('getCell', [9, 0]).textContent).toBe('Cricket Shoes');
            helper.invoke('selectRange', ['A10']);
            helper.setAnimationToNone('#' + helper.id + '_contextmenu');
            helper.openAndClickCMenuItem(5, 0, [6, 1], true, false);
            setTimeout(() => {
                expect(helper.invoke('getCell', [9, 0]).textContent).toBe('');
                expect(spreadsheet.sheets[0].rows[12].cells[0].formula).toBe('=COUNTIF(11:11,">10")');
                expect(helper.invoke('getCell', [0, 7]).textContent).toBe('Profit');
                helper.invoke('selectRange', ['H1']);
                helper.setAnimationToNone('#' + helper.id + '_contextmenu');
                helper.openAndClickCMenuItem(0, 5, [6, 1], false, true);
                setTimeout(() => {
                    expect(helper.invoke('getCell', [0, 7]).textContent).toBe('');
                    expect(spreadsheet.sheets[0].rows[0].cells[10].formula).toBe('=COUNTIF(I:I,">10")');
                    helper.click('.e-add-sheet-tab');
                    setTimeout(() => {
                        helper.invoke('updateCell', [{ formula: '=SUMIF(Sheet2!I:I,">10")' }, 'Sheet1!K1']);
                        helper.invoke('updateCell', [{ formula: '=SUMIF(Sheet2!11:11,">10")' }, 'Sheet1!A13']);
                        helper.invoke('selectRange', ['H1']);
                        helper.setAnimationToNone('#' + helper.id + '_contextmenu');
                        helper.openAndClickCMenuItem(0, 5, [6, 1], false, true);
                        setTimeout(() => {
                            expect(spreadsheet.sheets[0].rows[0].cells[10].formula).toBe('=SUMIF(Sheet2!J:J,">10")');
                            helper.invoke('selectRange', ['A11']);
                            helper.setAnimationToNone('#' + helper.id + '_contextmenu');
                            helper.openAndClickCMenuItem(5, 0, [6, 1], true, false);
                            setTimeout(() => {
                                expect(helper.invoke('getCell', [10, 0]).textContent).toBe('');
                                expect(spreadsheet.sheets[0].rows[12].cells[0].formula).toBe('=SUMIF(Sheet2!12:12,">10")');
                                done();
                            });
                        });
                    });
                });
            });
        });
    });

    describe('EJ2-853889 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('MIN() and MAX() functions does not return proper value as expected when contains zero as arguments', (done: Function) => {
            helper.edit('I2', '0');
            helper.edit('I3', '1');
            helper.edit('I5', '=MIN(I2,I3)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('0');
            helper.edit('I6', '=MAX(I2,I3)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('1');
            done();
        });
    });

    describe('EJ2-861114 -> Alphanumberic value in cell references are not properly calculated ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    rows: [
                        { cells: [{ value: 'FY2022' }] }, { cells: [{ value: 'FY2022' }] },
                        { cells: [{ value: 'FY2023' }] }, { cells: [{ value: 'FY2023' }] },
                        { cells: [{ value: 'FY2022' }] }, { cells: [{ value: 'FY2022' }] },
                        { cells: [{ value: '1' }] }, { cells: [{ value: '2' }] },
                        { cells: [{ value: '3' }] }, { cells: [{ value: '4' }] },
                        { cells: [{ value: '5' }] }, { cells: [{ value: '6' }] }]
                }]
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUMIF,AVERAGEIF and COUNTIF Formula with Alphanumberic value in cell references as arguments ->', (done: Function) => {
            helper.edit('B1', '=SUMIF(A1:A6,A1,A7:A12)');
            expect(helper.invoke('getCell', [0, 1]).textContent).toBe('14');
            helper.edit('B2', '=AVERAGEIF(A1:A6,A1,A7:A12)');
            expect(helper.invoke('getCell', [1, 1]).textContent).toBe('3.5');
            helper.edit('B3', '=COUNTIF(A1:A6,A3)');
            expect(helper.invoke('getCell', [2, 1]).textContent).toBe('2');
            done();
        });
        it('SUMIFS,AVERAGEIFS and COUNTIFS Formula with Alphanumberic value in cell references as arguments ->', (done: Function) => {
            helper.edit('B4', '=SUMIFS(A7:A12,A1:A6,A1)');
            expect(helper.invoke('getCell', [3, 1]).textContent).toBe('14');
            helper.edit('B5', '=AVERAGEIFS(A7:A12,A1:A6,A3)');
            expect(helper.invoke('getCell', [4, 1]).textContent).toBe('3.5');
            helper.edit('B6', '=COUNTIFS(A1:A6,A1)');
            expect(helper.invoke('getCell', [5, 1]).textContent).toBe('4');
            done();
        });
    });

    describe('MOD formula checking', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                rows: [{ cells: [{ value: '-23.456' }] },
                { cells: [{ value: '234.45556' }] }, { cells: [{ value: '-567.547' }] }, { cells: [{ value: '-89,789' }] },
                { cells: [{ value: '-345' }] }, { cells: [{ value: '-34.54' }] },{ cells: [{ value: '13972' }] }]
            }], activeSheetIndex: 0 }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('MOD formula with string values', (done: Function) => {
            helper.edit('I2', '=MOD("3.7","2")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('1.7');
            helper.edit('I3', '=MOD("-2.5","-2")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('-0.5');
            helper.edit('I4', '=MOD(A1,2)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#VALUE!');
            helper.edit('I5', '=MOD(" "," ")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            helper.edit('I6', '=MOD("","")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            helper.edit('I7', '=MOD(123,"TRUE")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            helper.edit('I8', '=MOD(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I9', '=MOD(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I10', '=MOD(123,"FALSE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('MOD formula with boolean values', (done: Function) => {
            helper.edit('J2', '=MOD(TRUE,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            helper.edit('J3', '=MOD(FALSE,FALSE)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J4', '=MOD(123,FALSE)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('#DIV/0!');
            helper.edit('J5', '=MOD(TRUE,1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0');
            helper.edit('J6', '=MOD(FALSE,1)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=MOD(IF(2>1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0');
            helper.edit('J8', '=MOD(IF(2<1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0');
            done();
        });
        it('MOD formula with basic values', (done: Function) => {
            helper.edit('K2', '=MOD(3.7,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('1.7');
            helper.edit('K3', '=MOD(-2.5,-2)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('-0.5');
            helper.edit('K4', '=MOD(2.5,-2)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('-1.5');
            helper.edit('K5', '=MOD(2.5,-2)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('-1.5');
            helper.edit('K6', '=MOD(1.58,0.1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('0.08');
            helper.edit('K7', '=MOD(0.234,0.01)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0.004');
            helper.edit('K8', '=MOD(,)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('#DIV/0!');
            done();
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('L2', '=MOD($G$3,2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('1');
            helper.edit('L3', '=MOD($G$4,3)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('1');
            helper.edit('L4', '=MOD($G$5,5)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('1');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('L5', '=MOD(Sheet2!A1,1)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('0.544');
            helper.edit('L6', '=MOD(Sheet2!A2,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('0.45556');
            helper.edit('L7', '=MOD(Sheet2!A3,3)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('2.453');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('L8', '=MOD(Sheet2!$A$1,1)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('0.544');
            helper.edit('L9', '=MOD(Sheet2!$A$2,2)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('0.45556');
            helper.edit('L10', '=MOD(Sheet2!$A$3,3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('2.453');
            done();
        });
        it('nested formula with MOD', function (done) {
            helper.edit('L11', '=MOD(SUM(1,2),2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('1');
            helper.edit('L12', '=MOD(SUM(1,G10),2)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('1');
            helper.edit('L13', '=MOD(PRODUCT(1,G10),12)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('0');
            helper.edit('L14', '=MOD(PRODUCT(1,2),2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('0');
            helper.edit('L15', '=MOD(AVERAGE(G3:G7),10)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('9.2');
            helper.edit('L16', '=MOD(MIN(G3:G9),12)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('3');
            helper.edit('L17', '=MOD(MAX(G3:G9),9)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('4');
            helper.edit('L18', '=MOD(IF(A2>A5,2,3),2)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('1');
            helper.edit('L19', '=MIN(MOD(22,3), MOD(12,5))');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('1');
            helper.edit('L20', '=MAX(MOD(22,3), MOD(12,5))');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('2');
            helper.edit('L21', '=SUM(MOD(22,3), MOD(12,5))');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('3');
            done();
        });
    });

    describe('PRODUCT formula checking', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, {
                rows: [{ cells: [{ value: '-23.456' }] },
                { cells: [{ value: '234.45556' }] }, { cells: [{ value: '-567.547' }] }, { cells: [{ value: '-89,789' }] },
                { cells: [{ value: '-345' }] }, { cells: [{ value: '-34.54' }] },{ cells: [{ value: '13972' }] },{ cells: [{ value: 'TRUE' }] },
                { cells: [{ value: '' }] }, { cells: [{ value: '123hello' }] }]
            }], activeSheetIndex: 0 }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('PRODUCT formula with string values', (done: Function) => {
            helper.edit('I2', '=PRODUCT("3.7","2")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('7.4');
            helper.edit('I3', '=PRODUCT("-2.5","-2")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('5');
            helper.edit('I4', '=PRODUCT(A1,2)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('2');
            helper.edit('I5', '=PRODUCT(" "," ")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#VALUE!');
            helper.edit('I6', '=PRODUCT("","")');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#VALUE!');
            helper.edit('I7', '=PRODUCT(123,"TRUE")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#VALUE!');
            helper.edit('I8', '=PRODUCT(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I9', '=PRODUCT(123,"TRUE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            helper.edit('I10', '=PRODUCT(123,"FALSE")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            done();
        });
        it('PRODUCT formula with boolean values', (done: Function) => {
            helper.edit('J2', '=PRODUCT(TRUE,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('1');
            helper.edit('J3', '=PRODUCT(FALSE,FALSE)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0');
            helper.edit('J4', '=PRODUCT(123,FALSE)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0');
            helper.edit('J5', '=PRODUCT(TRUE,1)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('1');
            helper.edit('J6', '=PRODUCT(FALSE,1)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0');
            helper.edit('J7', '=PRODUCT(IF(2>1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('1');
            helper.edit('J8', '=PRODUCT(IF(2<1,TRUE,FALSE),1)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0');
            helper.edit('N1','TRUE');
            helper.edit('N2','TRUE');
            helper.edit('N3','TRUE');
            helper.edit('N4','TRUE');
            helper.edit('J9', '=PRODUCT(N1,N2,N3,N4)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0');
            done();
        });
        it('PRODUCT formula with basic values', (done: Function) => {
            helper.edit('K2', '=PRODUCT(3.7,2)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('7.4');
            helper.edit('K3', '=PRODUCT(-2.5,-2)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('5');
            helper.edit('K4', '=PRODUCT(2.5,-2)');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('-5');
            helper.edit('K5', '=PRODUCT(2.5,-2)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('-5');
            helper.edit('K6', '=PRODUCT(1.58,0.1)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('0.158');
            helper.edit('K7', '=PRODUCT(0.234,0.01)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('0.00234');
            helper.edit('K8', '=PRODUCT(,)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('0');
            done();
        });
        it('absolute cell reference check', (done: Function) => {
            helper.edit('L2', '=PRODUCT($G$3,2)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('10');
            helper.edit('L3', '=PRODUCT($G$4,3)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('21');
            helper.edit('L4', '=PRODUCT($G$5,5)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('55');
            done();
        });
        it('external sheet reference check', (done: Function) => {
            helper.edit('L5', '=PRODUCT(Sheet2!A1,1)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('-23.456');
            helper.edit('L6', '=PRODUCT(Sheet2!A2,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('468.91112');
            helper.edit('L7', '=PRODUCT(Sheet2!A3,3)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('-1702.641');
            done();
        });
        it('external sheet with absolute reference check', (done: Function) => {
            helper.edit('L8', '=PRODUCT(Sheet2!$A$1,1)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('-23.456');
            helper.edit('L9', '=PRODUCT(Sheet2!$A$2,2)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('468.91112');
            helper.edit('L10', '=PRODUCT(Sheet2!$A$3,3)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('-1702.641');
            done();
        });
        it('nested formula with PRODUCT', function (done) {
            helper.edit('L11', '=PRODUCT(SUM(1,2),2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('6');
            helper.edit('L12', '=PRODUCT(SUM(1,G10),2)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('26');
            helper.edit('L13', '=PRODUCT(PRODUCT(1,G10),12)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('144');
            helper.edit('L14', '=PRODUCT(PRODUCT(1,2),2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('4');
            helper.edit('L15', '=PRODUCT(AVERAGE(G3:G7),10)');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('92');
            helper.edit('L16', '=PRODUCT(MIN(G3:G9),12)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('36');
            helper.edit('L17', '=PRODUCT(MAX(G3:G9),9)');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('117');
            helper.edit('L18', '=PRODUCT(IF(A2>A5,2,3),2)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('6');
            helper.edit('L19', '=MIN(PRODUCT(22,3), PRODUCT(12,5))');
            expect(helper.invoke('getCell', [18, 11]).textContent).toBe('60');
            helper.edit('L20', '=MAX(PRODUCT(22,3), PRODUCT(12,5))');
            expect(helper.invoke('getCell', [19, 11]).textContent).toBe('66');
            helper.edit('L21', '=SUM(PRODUCT(22,3), PRODUCT(12,5))');
            expect(helper.invoke('getCell', [20, 11]).textContent).toBe('126');
            done();
        });
        it('PRODUCT formula with range as value', (done: Function) => {
            helper.edit('F6', 'TRUE');
            helper.edit('F7', '123hello');
            helper.edit('F9', '&*');
            helper.edit('M1', '=PRODUCT(F2:F11,1)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('1.3068E+18');
            helper.edit('M2', '=PRODUCT(F2:F11,1,TRUE)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('1.3068E+18');
            helper.edit('M3', '=PRODUCT(F2:F11,1,"hello")');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#VALUE!');
            done();
        });
        it('applying extra cases like exponential, date, time with PRODUCT formula', function (done) {
            helper.edit('L1', '4000.00%');
            helper.edit('L2', '4.05E+09');
            helper.edit('L3', '11/7/2015');
            helper.edit('L4', '3:10:00 AM');
            helper.edit('L5', '=PRODUCT(L1, 2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('80');
            helper.edit('L6', '=PRODUCT(L2, 3');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('12150000000');
            helper.edit('L7', '=PRODUCT(L3,4)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('169260');
            helper.edit('L8', '=PRODUCT(L3,5)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('211575');
            done();
        });
    });

    describe('RSQ formula checking', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{
                rows: [{ cells: [{ value: '23' },{ value: '56' }, { value: '80000000%' }, { value: '7/11/2015' }, { value: '12:32:00 AM'}, { value: '12:32:00 AM'}] },
                { cells: [{ value: '234.45556' },{ value: '234' },{ value: '430000%' }, { value: '5/12/2015' }, { value: '11:32:00 AM'}] }, 
                { cells: [{ value: '-567.547' }, { value: '235' }, { value: '800%' }, { value: '5/7/2016' }, { value: '12:32:00 PM'}] }, 
                { cells: [{ value: '-89' }, { value: '-456' }, { value: '4560%' }, { value: '6/11/2015' }, { value: '1:32:00 AM'}] },
                { cells: [{ value: '345' }, { value: '56' }, { value: '4550%' }, { value: '6/1/2015' }, { value: '7:32:00 AM'}] }, 
                { cells: [{ value: '-34.54' }, { value: '45' }, { value: '6500%' }, { value: '7/12/2015' }, { value: '12:32:00 PM'}] },
                { cells: [{ value: '139' }, { value: '99' }] }, { cells: [{ value: '-34' }, { value: '7' }] }, 
                { cells: [{ value: '-45' }, { value: '-3' }] },
                { cells: [{ value: '12' }, { value: '2' }] }, { cells: [{ value: 'hello' }, { value: 'world' }] },{ cells: [{ value: 'world' }, { value: 'hello' }] },{ cells: [{ value: '139' }, { value: '23' }] },{ cells: [{ value: '123hello' }, { value: 'sync' }] }, { cells: [{ value: '98' },{ value: '23' }] }, { cells: [{ value: 'are' }, { value: 'fusion' }] }]
            },
            {
                rows: [{ cells: [{ value: '23' },{ value: '56' }, { value: '80000000%' }, { value: '7/11/2015' }, { value: '12:32:00 AM'}, { value: '12:32:00 AM'}] },
                { cells: [{ value: '234.45556' },{ value: '234' },{ value: '430000%' }, { value: '5/12/2015' }, { value: '11:32:00 AM'}] }, 
                { cells: [{ value: '-567.547' }, { value: '235' }, { value: '800%' }, { value: '5/7/2016' }, { value: '12:32:00 PM'}] }, 
                { cells: [{ value: '-89' }, { value: '-456' }, { value: '4560%' }, { value: '6/11/2015' }, { value: '1:32:00 AM'}] },
                { cells: [{ value: '345' }, { value: '56' }, { value: '4550%' }, { value: '6/1/2015' }, { value: '7:32:00 AM'}] }, 
                { cells: [{ value: '-34.54' }, { value: '45' }, { value: '6500%' }, { value: '7/12/2015' }, { value: '12:32:00 PM'}] },
                { cells: [{ value: '139' }, { value: '99' }] }, { cells: [{ value: '-34' }, { value: '7' }] }, 
                { cells: [{ value: '-45' }, { value: '-3' }] },
                { cells: [{ value: '12' }, { value: '2' }] }, { cells: [{ value: 'hello' }, { value: 'world' }] },{ cells: [{ value: 'world' }, { value: 'hello' }] },{ cells: [{ value: '139' }, { value: '23' }] },{ cells: [{ value: '123hello' }, { value: 'sync' }] }, { cells: [{ value: '98' },{ value: '23' }] }, { cells: [{ value: 'are' }, { value: 'fusion' }] }]
            }]}, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('RSQ formula with basic case checking', (done: Function) => {
            helper.edit('I1', '=RSQ(A1:A5,B1:B5)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0.001575552');
            helper.edit('I2', '=RSQ(A1:A5,B6:B10)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('0.140267298');
            helper.edit('I3', '=RSQ(A7:A12,B7:B12)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('0.916444193');
            helper.edit('I4', '=RSQ(A10:A12,B10:B12)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('#DIV/0!');
            helper.edit('I5', '=RSQ(A10,B2)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('#DIV/0!');
            helper.edit('I6', '=RSQ(A1:A5,B1:B6)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('#N/A');
            done();
        });
        it('RSQ formula with percentage format', (done: Function) => {
            helper.edit('I7', '=RSQ(C1:C3,C4:C6)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('0.25017859');
            done();
        });
        it('RSQ formula with date format', (done: Function) => {
            helper.edit('I8', '=RSQ(D1:D3,D4:D6)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('0.99355548');
            done();
        });
        it('RSQ formula with time format', (done: Function) => {
            helper.edit('I9', '=RSQ(E1:E3,E4:E6)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('0.851214575');
            done();
        });
        it('RSQ formula with percentage format', (done: Function) => {
            helper.edit('I7', '=RSQ(C1:C3,C4:C6)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('0.25017859');
            done();
        });
        it('sheet referrence check', (done: Function) => {
            helper.edit('J1', '=RSQ(Sheet1!A2:Sheet1!A5,Sheet1!B2:Sheet1!B5)');
            expect(helper.invoke('getCell', [0, 9]).textContent).toBe('0.001856987');
            helper.edit('J2', '=RSQ(Sheet1!A3:Sheet1!A6,Sheet1!B3:Sheet1!B6)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0.065558236');
            done();
        });
        it('absolute sheet referrence check', (done: Function) => {
            helper.edit('J3', '=RSQ(Sheet1!$A$2:Sheet1!$A$5,Sheet1!$B$2:Sheet1!$B$5)');
            expect(helper.invoke('getCell', [2, 9]).textContent).toBe('0.001856987');
            done();
        });
        it('external sheet referrence check', (done: Function) => {
            helper.edit('J4', '=RSQ(Sheet1!A2:Sheet1!A5,Sheet2!B2:Sheet2!B5)');
            expect(helper.invoke('getCell', [3, 9]).textContent).toBe('0.001856987');
            helper.edit('J5', '=RSQ(Sheet1!A3:Sheet1!A6,Sheet2!B3:Sheet2!B6)');
            expect(helper.invoke('getCell', [4, 9]).textContent).toBe('0.065558236');
            done();
        });
        it('external sheet absolute referrence ', (done: Function) => {
            helper.edit('J6', '=RSQ(Sheet1!$A$2:Sheet1!$A$5,Sheet2!$B$2:Sheet2!$B$5)');
            expect(helper.invoke('getCell', [5, 9]).textContent).toBe('0.001856987');
            helper.edit('J7', '=RSQ(Sheet1!$A$3:Sheet1!$A$6,Sheet2!$B$3:Sheet2!$B$6)');
            expect(helper.invoke('getCell', [6, 9]).textContent).toBe('0.065558236');
            done();
        });
        it('RSQ formula with multiple column as input', function (done) {
            helper.edit('J8', '=RSQ(A1:B5,A6:B10)');
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('0.28186104');
            helper.edit('J9', '=RSQ(A1:B5,A6:A15)');
            expect(helper.invoke('getCell', [8, 9]).textContent).toBe('0.136777246');
            done();
        });
        it('RSQ formula with 1 and #DIV/0! as result', function (done) {
            helper.edit('J10', '=RSQ(A11:A16,B11:B16)');
            expect(helper.invoke('getCell', [9, 9]).textContent).toBe('1');
            helper.edit('J11', '=RSQ(A10:A12,B10:B12)');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('#DIV/0!');
            done();
        });
    });
    describe('EJ2-850587 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }], rows: [{ index: 12, cells: [{index: 1, value: '""' }, { value: '1'}, { value: '-1'}, { value: '11'}, { value: '"1"'}, { value: '"-1"'}, { value: '"11"'}, { value: '0'}, { value: '"0"'}, { value: 'TRUE'}, { value: '"true"'}, { value: '"TRUE"'}, { value: 'FALSE'}, { value: '"false"'}, { value: '"FALSE"'}, { value: 'test'}, { value: '"test"'}] }] }, { ranges: [{ dataSource: defaultData }] } ]}, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Sort formula checking->', (done: Function) => {
            helper.edit('J2', '=SORT(D2:D11,2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(D2:D11,1,1,2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            helper.edit('J2', '=SORT(D2:D11,1,1,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            helper.edit('J2', '=SORT(D2:D11,1,1,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            helper.edit('J2', '=SORT(A2:A11,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(A2:A11,1,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('T-Shirts');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('Casual Shoes');
            helper.edit('J2', '=SORT(A2:A11,1,1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('T-Shirts');
            helper.edit('J2', '=SORT(D2:F11,2)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('30');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('300');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('41');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('1210');
            helper.edit('J2', '=SORT(D2:F11,1,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('50');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('500');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('200');
            helper.edit('J2', '=SORT(D2:F11,1,1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('200');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('500');
            helper.edit('J2', '=SORT(D2:F11,2,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('600');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('50');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('500');
            helper.edit('J2', '=SORT(D2:F11,3,-1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('200');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('500');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('10');
            helper.edit('J2', '=SORT(A2:D11,3,1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0.482314815');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0.001203704');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('T-Shirts');
            helper.edit('J2', '=SORT(A25:C34,1,1,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0');
            helper.edit('J2', '=SORT(A2:D11,1,1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0.482314815');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0.001203704');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('T-Shirts');
            helper.edit('J2', '=SORT(A2:D11,1,1,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('0.482314815');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('0.001203704');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('T-Shirts');
            helper.edit('J2', '=SORT(A2:D11,1,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('T-Shirts');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('50');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('Casual Shoes');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,,,)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,A13,A13,A13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,A13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,A13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,A13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,"","","")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,B13,B13,B13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,B13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,B13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,B13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,1,1,1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,C13,C13,C13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,-1,-1,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,D13,D13,D13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('30');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,,,-1)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,D13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,D13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('30');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,,,D13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,11,11,11)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,E13,E13,E13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,11)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,11)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,11)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,E13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,E13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,E13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,"1","1","1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,F13,F13,F13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,,"1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,,,"1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,F13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,F13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,F13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"-1","-1","-1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,G13,G13,G13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"-1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"-1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('30');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,,,"-1")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,G13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,G13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,G13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"11","11","11")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,H13,H13,H13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"11")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"11")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"11")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,H13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,H13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,H13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,0,0,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,I13,I13,I13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,0)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,I13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,I13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,I13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,"0","0","0")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,J13,J13,J13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"0")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"0")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"0")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,J13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,J13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,J13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,TRUE,TRUE,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,K13,K13,K13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,,,TRUE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,K13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,,K13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,,,K13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,"true","true","true")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,L13,L13,L13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,L13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,L13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,L13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"true")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"true")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"true")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,"TRUE","TRUE","TRUE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,M13,M13,M13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,M13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,M13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,M13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"TRUE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"TRUE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"TRUE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('20');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('10');
            helper.edit('J2', '=SORT(E2:E11,FALSE,FALSE,FALSE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,N13,N13,N13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,N13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,N13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,N13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,FALSE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,FALSE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,FALSE)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,"false","false","false")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,O13,O13,O13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,O13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,O13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,O13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"false")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"false")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"false")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,"FALSE","FALSE","FALSE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,P13,P13,P13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,P13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,P13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,P13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"FALSE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"FALSE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"FALSE")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('10');
            expect(helper.invoke('getCell', [10, 9]).textContent).toBe('30');
            helper.edit('J2', '=SORT(E2:E11,test,test,test)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#NAME?');
            helper.edit('J2', '=SORT(E2:E11,Q13,Q13,Q13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,Q13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,Q13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,Q13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,test)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#NAME?');
            helper.edit('J2', '=SORT(E2:E11,,test)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#NAME?');
            helper.edit('J2', '=SORT(E2:E11,,,test)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#NAME?');
            helper.edit('J2', '=SORT(E2:E11,"test","test","test")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,R13,R13,R13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,R13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,R13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,R13)');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,"test")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,"test")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            helper.edit('J2', '=SORT(E2:E11,,,"test")');
            expect(helper.invoke('getCell', [1, 9]).textContent).toBe('#VALUE!');
            var inst = helper.getInstance();
            inst.activeSheetIndex = 1;
            inst.dataBind();
            setTimeout(function () {
                helper.invoke('numberFormat', ['$#,##0.00', 'A1:B1']);
                helper.invoke('numberFormat', ['_($* #,##0.00_);_($* (#,##0.00);_($* "-"??_);_(@_)', 'A1:B1']);
                helper.invoke('numberFormat', ['0.00%', 'A1:B1']);
                helper.invoke('numberFormat', ['0.00E+00', 'A1:B1']);
                helper.edit('J2', '=SORT(B2:H11,2,-1,TRUE)');
                expect(helper.invoke('getCell', [1, 9]).textContent).toBe('41684');
                expect(helper.invoke('getCell', [1, 15]).textContent).toBe('0.482314815');
                expect(helper.invoke('getCell', [10, 9]).textContent).toBe('41943');
                expect(helper.invoke('getCell', [10, 15]).textContent).toBe('0.001203704');
                helper.edit('J13', '=SORT(B2:H11,,,TRUE)');
                expect(helper.invoke('getCell', [12, 9]).textContent).toBe('0.482314815');
                expect(helper.invoke('getCell', [12, 15]).textContent).toBe('41684');
                expect(helper.invoke('getCell', [21, 9]).textContent).toBe('0.001203704');
                expect(helper.invoke('getCell', [21, 15]).textContent).toBe('41943');
                done();
            });
        });
    });

    describe('EJ2-859157 -> ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }]}, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('script error throws while deleting a value in range of UNIQUE formula', (done: Function) => {
            helper.edit('J5', '44');
            helper.edit('J2', '=UNIQUE(H2:H8)');
            helper.invoke('selectRange', ['J5']);
            helper.triggerKeyNativeEvent(46);
            expect(helper.invoke('getCell', [7, 9]).textContent).toBe('14');
            done();
        });
    });

    describe('EJ2-861473 -> SUBTOTAL Formula ranges contain an exiting subtotal result in them. ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{
                    rows: [
                        { cells: [{ value: '5' }] }, { cells: [{ value: '10' }] },
                        { cells: [{ value: '15' }] }, { cells: [{ value: '20' }] },
                        { cells: [{ formula: '=SUM(A1:A4)' }] }, { cells: [{ value: '10' }] },
                        { cells: [{ value: '10' }] }, { cells: [{ formula: '=SUBTOTAL(9,A1:A7)' }] }]
                }]
            }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUBTOTAL Formula with AVERAGE Function as argument  ->', (done: Function) => {
            helper.edit('B1', '=SUBTOTAL(1,A1:A5)');
            expect(helper.invoke('getCell', [0, 1]).textContent).toBe('20');
            helper.edit('B2', '=SUBTOTAL(1,A1:A8)');
            expect(helper.invoke('getCell', [1, 1]).textContent).toBe('17.14285714');
            helper.edit('B3', '=SUBTOTAL(1,A5)');
            expect(helper.invoke('getCell', [2, 1]).textContent).toBe('50');
            helper.edit('B4', '=SUBTOTAL(1,A8)');
            expect(helper.invoke('getCell', [3, 1]).textContent).toBe('#DIV/0!');
            done();
        });
        it('SUBTOTAL Formula with COUNT Function as argument  ->', (done: Function) => {
            helper.edit('B5', '=SUBTOTAL(2,A1:A5)');
            expect(helper.invoke('getCell', [4, 1]).textContent).toBe('5');
            helper.edit('B6', '=SUBTOTAL(2,A1:A8)');
            expect(helper.invoke('getCell', [5, 1]).textContent).toBe('7');
            helper.edit('B7', '=SUBTOTAL(2,A5)');
            expect(helper.invoke('getCell', [6, 1]).textContent).toBe('1');
            helper.edit('B8', '=SUBTOTAL(2,A8)');
            expect(helper.invoke('getCell', [7, 1]).textContent).toBe('0');
            done();
        });
        it('SUBTOTAL Formula with COUNTA Function as argument  ->', (done: Function) => {
            helper.edit('B9', '=SUBTOTAL(3,A1:A5)');
            expect(helper.invoke('getCell', [8, 1]).textContent).toBe('5');
            helper.edit('B10', '=SUBTOTAL(3,A1:A8)');
            expect(helper.invoke('getCell', [9, 1]).textContent).toBe('7');
            helper.edit('B11', '=SUBTOTAL(3,A5)');
            expect(helper.invoke('getCell', [10, 1]).textContent).toBe('1');
            helper.edit('B12', '=SUBTOTAL(3,A8)');
            expect(helper.invoke('getCell', [11, 1]).textContent).toBe('0');
            done();
        });
        it('SUBTOTAL Formula with MAX Function as argument  ->', (done: Function) => {
            helper.edit('C1', '=SUBTOTAL(4,A1:A5)');
            expect(helper.invoke('getCell', [0, 2]).textContent).toBe('50');
            helper.edit('C2', '=SUBTOTAL(4,A1:A8)');
            expect(helper.invoke('getCell', [1, 2]).textContent).toBe('50');
            helper.edit('C3', '=SUBTOTAL(4,A5)');
            expect(helper.invoke('getCell', [2, 2]).textContent).toBe('50');
            helper.edit('C4', '=SUBTOTAL(4,A8)');
            expect(helper.invoke('getCell', [3, 2]).textContent).toBe('0');
            done();
        });
        it('SUBTOTAL Formula with MIN Function as argument  ->', (done: Function) => {
            helper.edit('C5', '=SUBTOTAL(5,A1:A5)');
            expect(helper.invoke('getCell', [4, 2]).textContent).toBe('5');
            helper.edit('C6', '=SUBTOTAL(5,A1:A8)');
            expect(helper.invoke('getCell', [5, 2]).textContent).toBe('5');
            helper.edit('C7', '=SUBTOTAL(5,A5)');
            expect(helper.invoke('getCell', [6, 2]).textContent).toBe('50');
            helper.edit('C8', '=SUBTOTAL(5,A8)');
            expect(helper.invoke('getCell', [7, 2]).textContent).toBe('0');
            done();
        });
        it('SUBTOTAL Formula with PRODUCT Function as argument  ->', (done: Function) => {
            helper.edit('C9', '=SUBTOTAL(6,A1:A5)');
            expect(helper.invoke('getCell', [8, 2]).textContent).toBe('750000');
            helper.edit('C10', '=SUBTOTAL(6,A1:A8)');
            expect(helper.invoke('getCell', [9, 2]).textContent).toBe('75000000');
            helper.edit('C11', '=SUBTOTAL(6,A5)');
            expect(helper.invoke('getCell', [10, 2]).textContent).toBe('50');
            helper.edit('C12', '=SUBTOTAL(6,A8)');
            expect(helper.invoke('getCell', [11, 2]).textContent).toBe('0');
            done();
        });
        it('SUBTOTAL Formula with SUM Function as argument  ->', (done: Function) => {
            helper.edit('D1', '=SUBTOTAL(9,A1:A5)');
            expect(helper.invoke('getCell', [0, 3]).textContent).toBe('100');
            helper.edit('D2', '=SUBTOTAL(9,A1:A8)');
            expect(helper.invoke('getCell', [1, 3]).textContent).toBe('120');
            helper.edit('D3', '=SUBTOTAL(9,A5)');
            expect(helper.invoke('getCell', [2, 3]).textContent).toBe('50');
            helper.edit('D4', '=SUBTOTAL(9,A8)');
            expect(helper.invoke('getCell', [3, 3]).textContent).toBe('0');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 1 -', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: EJ2_53702_SUBTOTALS }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SUBTOTAL - 1 & 101 - I', (done: Function) => {
            helper.edit('K1', '=SUBTOTAL(101,C23:C29)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('3.4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"3.4","formula":"=SUBTOTAL(101,C23:C29)"}');
            done();
        });
        it('SUBTOTAL - 1 & 101 - II', (done: Function) => {
            helper.edit('K2', '=SUBTOTAL(101,C4:C12)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0.209019097');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"0.2090190972222222","formula":"=SUBTOTAL(101,C4:C12)"}');
            done();
        });
        it('SUBTOTAL - 1 & 101 - III', (done: Function) => {
            helper.edit('K3', '=SUBTOTAL("101",F4:F90)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('312.9777778');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"312.9777777777778","formula":"=SUBTOTAL(\\"101\\",F4:F90)"}');
            done();
        });
        it('SUBTOTAL - 2 & 102 - I', (done: Function) => {
            helper.edit('L1', '=SUBTOTAL(102,F4:F90)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('9');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":9,"formula":"=SUBTOTAL(102,F4:F90)"}');
            done();
        });
        it('SUBTOTAL - 2 & 102 - II', (done: Function) => {
            helper.edit('L2', '=SUBTOTAL(102,C23:C28)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":5,"formula":"=SUBTOTAL(102,C23:C28)"}');
            done();
        });
        it('SUBTOTAL - 2 & 102 - III', (done: Function) => {
            helper.edit('L3', '=SUBTOTAL("102",D4:D10)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":7,"formula":"=SUBTOTAL(\\"102\\",D4:D10)"}');
            done();
        });
        it('SUBTOTAL - 2 & 102 - IV', (done: Function) => {
            helper.edit('L4', '=SUBTOTAL(102,C30:C33)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":4,"formula":"=SUBTOTAL(102,C30:C33)"}');
            done();
        });
        it('SUBTOTAL - 3 & 103 - I', (done: Function) => {
            helper.edit('M1', '=SUBTOTAL(103,C4:C9)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":6,"formula":"=SUBTOTAL(103,C4:C9)"}');
            done();
        });
        it('SUBTOTAL - 3 & 103 - II', (done: Function) => {
            helper.edit('M2', '=SUBTOTAL(103,I23:I31)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":4,"formula":"=SUBTOTAL(103,I23:I31)"}');
            done();
        });
        it('SUBTOTAL - 3 & 103 - III', (done: Function) => {
            helper.edit('M3', '=SUBTOTAL(103,C23:C28)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":5,"formula":"=SUBTOTAL(103,C23:C28)"}');
            done();
        });
        it('SUBTOTAL - 3 & 103 - IV', (done: Function) => {
            helper.edit('M4', '=SUBTOTAL("103",E4:E10)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":7,"formula":"=SUBTOTAL(\\"103\\",E4:E10)"}');
            done();
        });
        it('SUBTOTAL - 3 & 103 - V', (done: Function) => {
            helper.edit('M5', '=SUBTOTAL(103,C30:C33)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":4,"formula":"=SUBTOTAL(103,C30:C33)"}');
            done();
        });
        it('SUBTOTAL - 5 & 105 - I', (done: Function) => {
            helper.edit('N1', '=SUBTOTAL(5,E4:E10)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('6.5E-08');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":"0.000000065","formula":"=SUBTOTAL(5,E4:E10)"}');
            done();
        });
        it('SUBTOTAL - 5 & 105 - II', (done: Function) => {
            helper.edit('N2', '=SUBTOTAL(K7,H2:H10)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('1.4274787505616882e+36');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":"1.4274787505616882e+36","formula":"=SUBTOTAL(K7,H2:H10)"}');
            done();
        });
        it('SUBTOTAL - 5 & 105 - III', (done: Function) => {
            helper.edit('N3', '=SUBTOTAL(K6,E4:E9)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('6.5E-08');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":"0.000000065","formula":"=SUBTOTAL(K6,E4:E9)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - I', (done: Function) => {
            helper.edit('O1', '=SUBTOTAL(6,O9,F6,D5,D8,D11)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('4500000');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[14])).toBe('{"value":"4500000","formula":"=SUBTOTAL(6,O9,F6,D5,D8,D11)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - II', (done: Function) => {
            helper.edit('O2', '=SUBTOTAL(6,J3:J11)');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('3.335745979914237e+36');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[14])).toBe('{"value":"3.335745979914237e+36","formula":"=SUBTOTAL(6,J3:J11)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - III', (done: Function) => {
            helper.edit('O3', '=SUBTOTAL(6,H3:H11)');
            expect(helper.invoke('getCell', [2, 14]).textContent).toBe('2.0614215281913453e+36');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[14])).toBe('{"value":"2.0614215281913453e+36","formula":"=SUBTOTAL(6,H3:H11)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - IV', (done: Function) => {
            helper.edit('O4', '=SUBTOTAL(K7,I15:I19)');
            expect(helper.invoke('getCell', [3, 14]).textContent).toBe('1.6279232188029734e+23');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[14])).toBe('{"value":"1.6279232188029734e+23","formula":"=SUBTOTAL(K7,I15:I19)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - V', (done: Function) => {
            helper.edit('O5', '=SUBTOTAL(106,A13:A18)');
            expect(helper.invoke('getCell', [4, 14]).textContent).toBe('-1.96140E+13');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[14])).toBe('{"value":"-19613970227617.918","formula":"=SUBTOTAL(106,A13:A18)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - VI', (done: Function) => {
            helper.edit('O6', '=SUBTOTAL(106,G24:G29)');
            expect(helper.invoke('getCell', [5, 14]).textContent).toBe('64');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[14])).toBe('{"value":"64","formula":"=SUBTOTAL(106,G24:G29)"}');
            done();
        });
        it('SUBTOTAL - 6 & 106 - VII', (done: Function) => {
            helper.edit('O7', '=SUBTOTAL("106",C23:C27)');
            expect(helper.invoke('getCell', [6, 14]).textContent).toBe('30');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[14])).toBe('{"value":"30","formula":"=SUBTOTAL(\\"106\\",C23:C27)"}');
            done();
        });
        it('SUBTOTAL - 9 & 109 - I', (done: Function) => {
            helper.edit('P1', '=SUBTOTAL(9,I15:I21)');
            expect(helper.invoke('getCell', [0, 15]).textContent).toBe('307780');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[15])).toBe('{"value":307780,"formula":"=SUBTOTAL(9,I15:I21)"}');
            done();
        });
        it('SUBTOTAL - 9 & 109 - II', (done: Function) => {
            helper.edit('P2', '=SUBTOTAL(109,C23:C30)');
            expect(helper.invoke('getCell', [1, 15]).textContent).toBe('25');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[15])).toBe('{"value":25,"formula":"=SUBTOTAL(109,C23:C30)"}');
            done();
        });
        it('SUBTOTAL - 9 & 109 - III', (done: Function) => {
            helper.edit('P3', '=SUBTOTAL(109,B27:H27)');
            expect(helper.invoke('getCell', [2, 15]).textContent).toBe('31.68690563');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[15])).toBe('{"value":"31.686905628508693","formula":"=SUBTOTAL(109,B27:H27)"}');
            done();
        });
        it('SUBTOTAL - 9 & 109 - IV', (done: Function) => {
            helper.edit('P4', '=SUBTOTAL(109,C19,C22,C25,C28,C29)');
            expect(helper.invoke('getCell', [3, 15]).textContent).toBe('9');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[15])).toBe('{"value":9,"formula":"=SUBTOTAL(109,C19,C22,C25,C28,C29)"}');
            done();
        });
        it('SUBTOTAL - Absolute cell reference - I', (done: Function) => {
            helper.edit('Q1', '=SUBTOTAL($K$14,$C$7:$C$9,$B$7:$B$9,$E$6:$E$9,$F$7:$F$10,$B$14:$B$18)');
            expect(helper.invoke('getCell', [0, 16]).textContent).toBe('14');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[16])).toBe('{"value":14,"formula":"=SUBTOTAL($K$14,$C$7:$C$9,$B$7:$B$9,$E$6:$E$9,$F$7:$F$10,$B$14:$B$18)"}');
            done();
        });
        it('SUBTOTAL - Sheet reference - I', (done: Function) => {
            helper.edit('R1', '=SUBTOTAL(Sheet1!K13,Sheet1!G9:G11,Sheet1!C7:C10,Sheet1!D6:D11,Sheet1!D13:D15)');
            expect(helper.invoke('getCell', [0, 17]).textContent).toBe('18.40200588');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[17])).toBe(
                '{"value":"18.402005876068376","formula":"=SUBTOTAL(Sheet1!K13,Sheet1!G9:G11,Sheet1!C7:C10,Sheet1!D6:D11,Sheet1!D13:D15)"}'
            );
            done();
        });
        it('SUBTOTAL - Sheet reference - II', (done: Function) => {
            helper.edit('R2', '=SUBTOTAL(Sheet1!B17,Sheet1!B4:B8,Sheet1!I5:I11)');
            expect(helper.invoke('getCell', [1, 17]).textContent).toBe('17492.10333');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[17])).toBe('{"value":"17492.103333333336","formula":"=SUBTOTAL(Sheet1!B17,Sheet1!B4:B8,Sheet1!I5:I11)"}');
            done();
        });
        it('SUBTOTAL - Invalid arguments - I', (done: Function) => {
            helper.edit('S1', '"=SUBTOTAL(1,34)');
            expect(helper.invoke('getCell', [0, 18]).textContent).toBe('"=SUBTOTAL(1,34)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[18])).toBe('{"value":"\\"=SUBTOTAL(1,34)"}');
            done();
        });
        it('SUBTOTAL - Invalid arguments - II', (done: Function) => {
            helper.edit('S2', '"=SUBTOTAL(5,)');
            expect(helper.invoke('getCell', [1, 18]).textContent).toBe('"=SUBTOTAL(5,)');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[18])).toBe('{"value":"\\"=SUBTOTAL(5,)"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 2 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('POWER - INPUTS - I', (done: Function) => {
            helper.edit('L1', '=POWER(-3.4,-2.1)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":"#NUM!","formula":"=POWER(-3.4,-2.1)"}');
            done();
        });
        it('POWER - INPUTS - II', (done: Function) => {
            helper.edit('L2', '=POWER(-43,-3.34)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":"#NUM!","formula":"=POWER(-43,-3.34)"}');
            done();
        });
        it('POWER - INPUTS - III', (done: Function) => {
            helper.edit('L3', '=POWER(-3.231,-2.345)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":"#NUM!","formula":"=POWER(-3.231,-2.345)"}');
            done();
        });
        it('POWER - INPUTS - IV', (done: Function) => {
            helper.edit('L4', '=POWER("3",3)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('27');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"27","formula":"=POWER(\\"3\\",3)"}');
            done();
        });
        it('POWER - INPUTS - V', (done: Function) => {
            helper.edit('L5', '=POWER(4,"2")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('16');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"16","formula":"=POWER(4,\\"2\\")"}');
            done();
        });
        it('POWER - INPUTS - VI', (done: Function) => {
            helper.edit('L6', '=POWER("3","2")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('9');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":"9","formula":"=POWER(\\"3\\",\\"2\\")"}');
            done();
        });
        it('POWER - INPUTS - VII', (done: Function) => {
            helper.edit('L7', '=POWER("-3","-2")');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('0.111111111');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":"0.1111111111111111","formula":"=POWER(\\"-3\\",\\"-2\\")"}');
            done();
        });
        it('POWER - INPUTS - VIII', (done: Function) => {
            helper.edit('L8', '=POWER("3.23","-2.1")');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('0.085246136');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":"0.08524613609942705","formula":"=POWER(\\"3.23\\",\\"-2.1\\")"}');
            done();
        });
        it('POWER - INPUTS - IX', (done: Function) => {
            helper.edit('L9', '=POWER("-3.23","-1.23")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":"#NUM!","formula":"=POWER(\\"-3.23\\",\\"-1.23\\")"}');
            done();
        });
        it('POWER - INPUTS - X', (done: Function) => {
            helper.edit('L10', '=POWER("3",2.6)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('17.3986384');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":"17.398638404385867","formula":"=POWER(\\"3\\",2.6)"}');
            done();
        });
        it('POWER - INPUTS - XI', (done: Function) => {
            helper.edit('L11', '=POWER("TRUE",2)');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[11])).toBe('{"value":"#VALUE!","formula":"=POWER(\\"TRUE\\",2)"}');
            done();
        });
        it('POWER - INPUTS - XII', (done: Function) => {
            helper.edit('L12', '=POWER("FALSE",2)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[11])).toBe('{"value":"#VALUE!","formula":"=POWER(\\"FALSE\\",2)"}');
            done();
        });
        it('POWER - INPUTS - XIII', (done: Function) => {
            helper.edit('L13', '=POWER(4,"TRUE")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":"#VALUE!","formula":"=POWER(4,\\"TRUE\\")"}');
            done();
        });
        it('POWER - INPUTS - XIV', (done: Function) => {
            helper.edit('L14', '=POWER(pow,2)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":"#NAME?","formula":"=POWER(pow,2)"}');
            done();
        });
        it('POWER - INPUTS - XV', (done: Function) => {
            helper.edit('L15', '=POWER(kert,"kel")');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[11])).toBe('{"value":"#NAME?","formula":"=POWER(kert,\\"kel\\")"}');
            done();
        });
        it('POWER - INPUTS - XVI', (done: Function) => {
            helper.getInstance().addDefinedName({name: 'Power1', refersTo: 'D6'});
            helper.edit('L16', '=POWER(32,Power1)');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('1.42724769270596e+45');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[11])).toBe('{"value":"1.42724769270596e+45","formula":"=POWER(32,Power1)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - I', (done: Function) => {
            helper.edit('I26', '1/4');
            helper.edit('M1', '=POWER(11,I26)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(11,I26)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - II', (done: Function) => {
            helper.edit('I27', '1/6');
            helper.edit('M2', '=POWER(5,I27)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(5,I27)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - III', (done: Function) => {
            helper.edit('I25', '1/3');
            helper.edit('M3', '=POWER(6,I25)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(6,I25)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - IV', (done: Function) => {
            helper.edit('E27', '-3.23');
            helper.edit('F28', '-3.2');
            helper.edit('M4', '=POWER(E27,F28)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(E27,F28)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - V', (done: Function) => {
            helper.edit('F28', '-3.2');
            helper.edit('G24', '-3.2');
            helper.edit('M5', '=POWER(F28,G24)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(F28,G24)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - VI', (done: Function) => {
            helper.edit('B24', '"TRUE"');
            helper.edit('M6', '=POWER(B24,2)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":"#VALUE!","formula":"=POWER(B24,2)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - VII', (done: Function) => {
            helper.edit('B25', '"FALSE"');
            helper.edit('M7', '=POWER(B25,3)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":"#VALUE!","formula":"=POWER(B25,3)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - VIII', (done: Function) => {
            helper.edit('B24', '"TRUE"');
            helper.edit('M8', '=POWER(4,B24)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":"#VALUE!","formula":"=POWER(4,B24)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - IX', (done: Function) => {
            helper.edit('B25', '"FALSE"');
            helper.edit('M9', '=POWER(32,B25)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":"#VALUE!","formula":"=POWER(32,B25)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - X', (done: Function) => {
            helper.edit('B3', '6/11/2014');
            helper.edit('J15', '4');
            helper.edit('M10', '=POWER(J15,B3)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(J15,B3)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XI', (done: Function) => {
            helper.edit('F10', '$110.00');
            helper.edit('C25', '3');
            helper.edit('M11', '=POWER(C25,F10)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('3.043252722170454e+52');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[12])).toBe('{"value":"3.043252722170454e+52","formula":"=POWER(C25,F10)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XII', (done: Function) => {
            helper.edit('C26', '4');
            helper.edit('I7', '108.32');
            helper.edit('M12', '=POWER(C26,I7)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('1.6411121494202909e+65');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[12])).toBe('{"value":"1.6411121494202909e+65","formula":"=POWER(C26,I7)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XIII', (done: Function) => {
            helper.edit('I24', '1/2');
            helper.edit('M13', '=POWER(3,I24)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(3,I24)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XIV', (done: Function) => {
            helper.edit('I27', '1/6');
            helper.edit('M14', '=POWER(34,I27)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(34,I27)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XV', (done: Function) => {
            helper.edit('E17', '#NUM!');
            helper.edit('M15', '=POWER(E17,3)');
            expect(helper.invoke('getCell', [14, 12]).textContent).toBe('#NUM!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[12])).toBe('{"value":"#NUM!","formula":"=POWER(E17,3)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XVI', (done: Function) => {
            helper.edit('E15', '#NAME?');
            helper.edit('M16', '=POWER(E15,"pow")');
            expect(helper.invoke('getCell', [15, 12]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[12])).toBe('{"value":"#NAME?","formula":"=POWER(E15,\\"pow\\")"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XVII', (done: Function) => {
            helper.edit('E15', '#NAME?');
            helper.edit('E16', '#DIV/0!');
            helper.edit('M17', '=POWER(E16,E15)');
            expect(helper.invoke('getCell', [16, 12]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[12])).toBe('{"value":"#DIV/0!","formula":"=POWER(E16,E15)"}');
            done();
        });
        it('POWER - CELL REFEREMCE - XVIII', (done: Function) => {
            helper.edit('$E$16', '#DIV/0!');
            helper.edit('$H$20', '2');
            helper.edit('M18', '=POWER($E$16,$H$20)');
            expect(helper.invoke('getCell', [17, 12]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[12])).toBe('{"value":"#DIV/0!","formula":"=POWER($E$16,$H$20)"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 3', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [ { ranges: [{ dataSource: EJ2_53702_INDEX }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - I', (done: Function) => {
            helper.edit('L1', '=INDEX(C2:C10,C23,B28)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('0.482314815');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":"0.4823148148148148","formula":"=INDEX(C2:C10,C23,B28)"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - II', (done: Function) => {
            helper.edit('L2', '=INDEX(H2:I12,"2.24","2.6")');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('104.32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":"104.32","formula":"=INDEX(H2:I12,\\"2.24\\",\\"2.6\\")"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - III', (done: Function) => {
            helper.edit('L3', '=INDEX(D12:E17,1,"1")');
            const value: string = "'" + "-45.43" + "'";
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe(value);
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":"' + value + '","formula":"=INDEX(D12:E17,1,\\"1\\")"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - IV', (done: Function) => {
            helper.edit('L4', '=INDEX(D13:E18,"2","1")');
            const value: string = "'" + "1" + "'";
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe(value);
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"' + value + '","formula":"=INDEX(D13:E18,\\"2\\",\\"1\\")"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - V', (done: Function) => {
            helper.edit('L5', '=INDEX(H2:I10,B16,2)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('103.32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"103.32","formula":"=INDEX(H2:I10,B16,2)"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - VI', (done: Function) => {
            helper.edit('L6', '=INDEX(H7:I11,C32>C31,2)');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('108.32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"formula":"=INDEX(H7:I11,C32>C31,2)","value":"108.32"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - VII', (done: Function) => {
            helper.edit('L7', '=INDEX(H8:I12,C33<C32,2)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('109.32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"formula":"=INDEX(H8:I12,C33<C32,2)","value":"109.32"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - VIII', (done: Function) => {
            helper.edit('L8', '=INDEX(H8:I12,1,C31<C32)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('6543.34579');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"formula":"=INDEX(H8:I12,1,C31<C32)","value":"6543.34578992"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - IX', (done: Function) => {
            helper.edit('L9', '=INDEX(H8:I12,2,C32>=C32)');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('13035.06876');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"formula":"=INDEX(H8:I12,2,C32>=C32)","value":"13035.068755"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - X', (done: Function) => {
            helper.edit('L10', '=INDEX(H34:J41,1,2)');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":0,"formula":"=INDEX(H34:J41,1,2)"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - XVI', (done: Function) => {
            helper.edit('L17', '=COUNT(INDEX(F14:H20,0,1))');
            expect(helper.invoke('getCell', [16, 11]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[11])).toBe('{"value":0,"formula":"=COUNT(INDEX(F14:H20,0,1))"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - XII', (done: Function) => {
            helper.edit('L12', '=INDEX(B2:E11,1,2,1)');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('0.482314815');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[11])).toBe('{"value":"0.4823148148148148","formula":"=INDEX(B2:E11,1,2,1)"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - XIII', (done: Function) => {
            helper.edit('L13', '=INDEX(,1,1,1)');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":"#VALUE!","formula":"=INDEX(,1,1,1)"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - XIV', (done: Function) => {
            helper.edit('L14', '=INDEX(3,1,1,)');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":"#REF!","formula":"=INDEX(3,1,1,)"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - XV', (done: Function) => {
            helper.edit('L16', '=MIN(INDEX(I2:J11,0,1))');
            expect(helper.invoke('getCell', [15, 11]).textContent).toBe('103.32');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[11])).toBe('{"value":"103.32","formula":"=MIN(INDEX(I2:J11,0,1))"}');
            done();
        });
        it('INDEX - FORMULA WITH CELL REFERENCE - XVI', (done: Function) => {
            helper.edit('L18', '=INDEX(Sheet1!B3:G10,Sheet1!B14,Sheet1!C25)');
            expect(helper.invoke('getCell', [17, 11]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[11])).toBe('{"value":"20","formula":"=INDEX(Sheet1!B3:G10,Sheet1!B14,Sheet1!C25)"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 4', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('ADDRESS - ->', (done: Function) => {
            helper.edit('I1', '=ADDRESS(2,2)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('$B$2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"$B$2","formula":"=ADDRESS(2,2)"}');
            done();
        });
        it('ADDRESS - with abs value as 2->', (done: Function) => {
            helper.edit('I2', '=ADDRESS(2,2,2)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('B$2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"B$2","formula":"=ADDRESS(2,2,2)"}');
            done();
        });
        it('ADDRESS - with abs value as 3->', (done: Function) => {
            helper.edit('I3', '=ADDRESS(2,2,3)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('$B2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"$B2","formula":"=ADDRESS(2,2,3)"}');
            done();
        });
        it('ADDRESS - with abs value as 4->', (done: Function) => {
            helper.edit('I4', '=ADDRESS(2,2,4)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('B2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"B2","formula":"=ADDRESS(2,2,4)"}');
            done();
        });
        it('ADDRESS - with Reference style as false and abs value as 1->', (done: Function) => {
            helper.edit('I5', '=ADDRESS(2,2,1,FALSE)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('R2C2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"R2C2","formula":"=ADDRESS(2,2,1,FALSE)"}');
            done();
        });
        it('ADDRESS - with Reference style as false and abs value as 2->', (done: Function) => {
            helper.edit('I6', '=ADDRESS(2,2,2,FALSE)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('R2C[2]');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"R2C[2]","formula":"=ADDRESS(2,2,2,FALSE)"}');
            done();
        });
        it('ADDRESS - with Reference style as false and abs value as 3->', (done: Function) => {
            helper.edit('I7', '=ADDRESS(2,2,3,FALSE)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('R[2]C2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"R[2]C2","formula":"=ADDRESS(2,2,3,FALSE)"}');
            done();
        });
        it('ADDRESS - with Reference style as false and abs value as 4->', (done: Function) => {
            helper.edit('I8', '=ADDRESS(2,2,4,FALSE)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('R[2]C[2]');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":"R[2]C[2]","formula":"=ADDRESS(2,2,4,FALSE)"}');
            done();
        });
        it('ADDRESS - with Sheet name and Reference style as false->', (done: Function) => {
            helper.edit('I9', '=ADDRESS(2,2,1,FALSE,"Price Details")');
            expect(helper.getInstance().sheets[0].rows[8].cells[8].formula).toBe('=ADDRESS(2,2,1,FALSE,"Price Details")');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('Price Details!R2C2');
            done();
        });
        it('ADDRESS - with Sheet name and Reference style as TRUE->', (done: Function) => {
            helper.edit('I10', '=ADDRESS(2,2,1,TRUE,"Price Details")');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('Price Details!$B$2');
            done();
        });
        it('ADDRESS - for workbook->', (done: Function) => {
            helper.edit('I11', '=ADDRESS(2,3,1,FALSE,"[Book1]Sheet1")');
            expect(helper.getInstance().sheets[0].rows[10].cells[8].formula).toBe('=ADDRESS(2,3,1,FALSE,"[Book1]Sheet1")');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('[Book1]Sheet1!R2C3');
            done();
        });
        it('ADDRESS - with invalid Reference style->', (done: Function) => {
            helper.edit('I12', '=ADDRESS(2,2,1,3)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('$B$2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":"$B$2","formula":"=ADDRESS(2,2,1,3)"}');
            done();
        });
        it('ADDRESS - with invalid sheet name->', (done: Function) => {
            helper.edit('I13', '=ADDRESS(2,2,1,FALSE,aa)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":"#NAME?","formula":"=ADDRESS(2,2,1,FALSE,aa)"}');
            done();
        });
        it('ADDRESS - with no input->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I14');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ADDRESS()';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ADDRESS()';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I14', '=ADDRESS(1,1)');
            done();
        });
        it('ADDRESS - with invalid input->', (done: Function) => {
            helper.edit('I15', '=ADDRESS(A,B)');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[8])).toBe('{"value":"#NAME?","formula":"=ADDRESS(A,B)"}');
            done();
        });
        it('ADDRESS - with negative values for Row and Column->', (done: Function) => {
            helper.edit('I16', '=ADDRESS(-1,-2)');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":"#VALUE!","formula":"=ADDRESS(-1,-2)"}');
            done();
        });
        it('ADDRESS - with no values for Row and Column->', (done: Function) => {
            const spreadsheet: any = helper.getInstance();
            spreadsheet.selectRange('I17');
            helper.invoke('startEdit');
            spreadsheet.editModule.editCellData.value = '=ADDRESS(,,2)';
            helper.getElement('.e-spreadsheet-edit').textContent = '=ADDRESS(,,2)';
            helper.triggerKeyNativeEvent(13);
            const dialog: HTMLElement =  helper.getElement('.e-validation-error-dlg.e-dialog .e-dlg-content');
            expect(dialog.textContent).toBe('We found that you typed a formula with an invalid arguments.');
            helper.click('.e-validation-error-dlg.e-dialog .e-btn.e-primary');
            helper.edit('I17', '=ADDRESS(1,2)');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 5 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('CODE - I', (done: Function) => {
            helper.edit('I1', '=CODE("0!")');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('48');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":48,"formula":"=CODE(\\"0!\\")"}');
            done();
        });
        it('CODE - II', (done: Function) => {
            helper.edit('I2', '=CODE("""")');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":34,"formula":"=CODE(\\"\\"\\"\\")"}');
            done();
        });
        it('CODE - III', (done: Function) => {
            helper.edit('I3', '=CODE("""   ")');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":34,"formula":"=CODE(\\"\\"\\"   \\")"}');
            done();
        });
        it('CODE - IV', (done: Function) => {
            helper.edit('J17', '"excel"');
            helper.edit('I4', '=CODE(J17)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":34,"formula":"=CODE(J17)"}');
            done();
        });
        it('CODE - V', (done: Function) => {
            helper.edit('I5', '=CODE("2/4/2000 12:00 am")');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('50');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":50,"formula":"=CODE(\\"2/4/2000 12:00 am\\")"}');
            done();
        });
        it('CODE - VI', (done: Function) => {
            helper.edit('I6', '=CODE(O23:O28)');
            expect(1).toBe(1);
            done();
        });
        it('CODE - VII', (done: Function) => {
            helper.edit('I7', '=CODE("3/4/2023")');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('51');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":51,"formula":"=CODE(\\"3/4/2023\\")"}');
            done();
        });
        it('CODE - VIII', (done: Function) => {
            helper.edit('I8', '=CODE("07-JUN")');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('48');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":48,"formula":"=CODE(\\"07-JUN\\")"}');
            done();
        });
        it('CODE - IX', (done: Function) => {
            helper.edit('L2', '"65.678"');
            helper.edit('I9', '=CODE(L2)');
            expect(helper.invoke('getCell', [8, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[8])).toBe('{"value":34,"formula":"=CODE(L2)"}');
            done();
        });
        it('CODE - X', (done: Function) => {
            helper.edit('L5', '"112"');
            helper.edit('I10', '=CODE(L5)');
            expect(helper.invoke('getCell', [9, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[8])).toBe('{"value":34,"formula":"=CODE(L5)"}');
            done();
        });
        it('CODE - XI', (done: Function) => {
            helper.edit('H9', '"0"');
            helper.edit('I11', '=CODE(H9)');
            expect(helper.invoke('getCell', [10, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[8])).toBe('{"value":34,"formula":"=CODE(H9)"}');
            done();
        });
        it('CODE - XII', (done: Function) => {
            helper.edit('G3', '""');
            helper.edit('I12', '=CODE(G3)');
            expect(helper.invoke('getCell', [11, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[8])).toBe('{"value":34,"formula":"=CODE(G3)"}');
            done();
        });
        it('CODE - XIII', (done: Function) => {
            helper.edit('I3', '"TRUE"');
            helper.edit('I13', '=CODE(I3)');
            expect(helper.invoke('getCell', [12, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[8])).toBe('{"value":34,"formula":"=CODE(I3)"}');
            done();
        });
        it('CODE - XIV', (done: Function) => {
            helper.edit('L8', '"Hi"');
            helper.edit('I14', '=CODE(L8)');
            expect(helper.invoke('getCell', [13, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[8])).toBe('{"value":34,"formula":"=CODE(L8)"}');
            done();
        });
        it('CODE - XV', (done: Function) => {
            helper.edit('G3', '""');
            helper.edit('I15', '=CODE(G3)');
            expect(helper.invoke('getCell', [14, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[8])).toBe('{"value":34,"formula":"=CODE(G3)"}');
            done();
        });
        it('CODE - XVI', (done: Function) => {
            helper.edit('H9', '"0"');
            helper.edit('I16', '=CODE(H9)');
            expect(helper.invoke('getCell', [15, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[8])).toBe('{"value":34,"formula":"=CODE(H9)"}');
            done();
        });
        it('CODE - XVII', (done: Function) => {
            helper.edit('H12', '');
            helper.edit('I17', '=CODE(H12)');
            expect(helper.invoke('getCell', [16, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[8])).toBe('{"value":"#VALUE!","formula":"=CODE(H12)"}');
            done();
        });
        it('CODE - XVIII', (done: Function) => {
            helper.edit('H14', '"07-JUN"');
            helper.edit('I18', '=CODE(H14)');
            expect(helper.invoke('getCell', [17, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[8])).toBe('{"value":34,"formula":"=CODE(H14)"}');
            done();
        });
        it('CODE - XIX', (done: Function) => {
            helper.edit('H16', '""      ""');
            helper.edit('I19', '=CODE(H16)');
            expect(helper.invoke('getCell', [18, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[8])).toBe('{"value":34,"formula":"=CODE(H16)"}');
            done();
        });
        it('CODE - XX', (done: Function) => {
            helper.edit('H15', '"     "');
            helper.edit('I20', '=CODE(H15)');
            expect(helper.invoke('getCell', [19, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[8])).toBe('{"value":34,"formula":"=CODE(H15)"}');
            done();
        });
        it('CODE - XXI', (done: Function) => {
            helper.edit('I21', '=CODE(1:10)');
            expect(1).toBe(1);
            done();
        });
        it('CODE - XXII', (done: Function) => {
            helper.edit('I22', '=CODE(C19:C28)');
            expect(1).toBe(1);
            done();
        });
        it('CODE - XXIII', (done: Function) => {
            helper.edit('I23', '=CODE(6.078%)');
            expect(helper.invoke('getCell', [22, 8]).textContent).toBe('48');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[22].cells[8])).toBe('{"value":48,"formula":"=CODE(6.078%)"}');
            done();
        });
        it('CODE - XXIV', (done: Function) => {
            helper.edit('D16', '"-3.45"');
            helper.edit('I24', '=CODE(D16)');
            expect(helper.invoke('getCell', [23, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[8])).toBe('{"value":34,"formula":"=CODE(D16)"}');
            done();
        });
        it('CODE - XXV', (done: Function) => {
            helper.edit('L8', '"Hi"');
            helper.edit('I25', '=CODE(L8)');
            expect(helper.invoke('getCell', [24, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[24].cells[8])).toBe('{"value":34,"formula":"=CODE(L8)"}');
            done();
        });
        it('CODE - XXVI', (done: Function) => {
            helper.edit('I26', '=CODE(B19:C24)');
            expect(1).toBe(1);
            done();
        });
        it('CODE - XXVII', (done: Function) => {
            helper.edit('Sheet1!K4', '"34"');
            helper.edit('I27', '=CODE(Sheet1!K4)');
            expect(helper.invoke('getCell', [26, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[26].cells[8])).toBe('{"value":34,"formula":"=CODE(Sheet1!K4)"}');
            done();
        });
        it('CODE - XXIX', (done: Function) => {
            helper.edit('Sheet1!L2', '"34"');
            helper.edit('I28', '=CODE(Sheet1!L2)');
            expect(helper.invoke('getCell', [27, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[27].cells[8])).toBe('{"value":34,"formula":"=CODE(Sheet1!L2)"}');
            done();
        });
        it('CODE - XXX', (done: Function) => {
            helper.edit('A4', 'Sandals & Floaters');
            helper.edit('Sheet1!$B$4', '=LOWER(A4)');
            helper.edit('I29', '=CODE(Sheet1!$B$4)');
            expect(helper.invoke('getCell', [28, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[28].cells[8])).toBe('{"value":"#NAME?","formula":"=CODE(Sheet1!$B$4)"}');
            done();
        });
        it('CODE - XXXI', (done: Function) => {
            helper.edit('A4', 'Sandals & Floaters');
            helper.edit('Sheet1!B4', '=LOWER(A4)');
            helper.edit('I30', '=CODE(Sheet1!B4)');
            expect(helper.invoke('getCell', [29, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[29].cells[8])).toBe('{"value":"#NAME?","formula":"=CODE(Sheet1!B4)"}');
            done();
        });
        it('CODE - XXXII', (done: Function) => {
            helper.edit('A4', 'Sandals & Floaters');
            helper.edit('Sheet1!B4', '=LOWER(A4)');
            helper.edit('I31', '=CODE(Sheet1!$B4)');
            expect(helper.invoke('getCell', [30, 8]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[30].cells[8])).toBe('{"value":"#NAME?","formula":"=CODE(Sheet1!$B4)"}');
            done();
        });
        it('CODE - XXXIII ', (done: Function) => {
            helper.edit('L3', '"33"');
            helper.edit('I32', '=CODE($L$3)');
            expect(helper.invoke('getCell', [31, 8]).textContent).toBe('34');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[31].cells[8])).toBe('{"value":34,"formula":"=CODE($L$3)"}');
            done();
        });
        it('CODE - Issue fixing: 889130 - Nested formula - 3', (done: Function) => {
            helper.edit('B18', '4Runner');
            helper.edit('Z1', '=CODE(T(B18))');
            expect(helper.invoke('getCell', [0, 25]).textContent).toBe('52');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[25])).toBe('{"value":52,"formula":"=CODE(T(B18))"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 6 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('LEN - Specific Type - I', (done: Function) => {
            helper.edit('K1', '=LEN("0!")');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":2,"formula":"=LEN(\\"0!\\")"}');
            done();
        });
        it('LEN - Specific Type - II', (done: Function) => {
            helper.edit('K2', '=LEN(2/3/2000)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('21');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":21,"formula":"=LEN(2/3/2000)"}');
            done();
        });
        it('LEN - Specific Type - III', (done: Function) => {
            helper.edit('K3', '=LEN("""")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":1,"formula":"=LEN(\\"\\"\\"\\")"}');
            done();
        });
        it('LEN - Specific Type - IV', (done: Function) => {
            helper.edit('K4', '=LEN("""   ")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":4,"formula":"=LEN(\\"\\"\\"   \\")"}');
            done();
        });
        it('LEN - Specific Type - V', (done: Function) => {
            helper.edit('K5', '=LEN("  .67   """)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('9');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":9,"formula":"=LEN(\\"  .67   \\"\\"\\")"}');
            done();
        });
        it('LEN - Direct Value - I', (done: Function) => {
            helper.edit('L1', '=LEN("3/4/2023")');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":8,"formula":"=LEN(\\"3/4/2023\\")"}');
            done();
        });
        it('LEN - Direct Value - II', (done: Function) => {
            helper.edit('L2', '=LEN("07-JUN")');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":6,"formula":"=LEN(\\"07-JUN\\")"}');
            done();
        });
        it('LEN - Cell reference - I', (done: Function) => {
            helper.edit('L2', '"65.678"');
            helper.edit('M1', '=LEN(L2)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":8,"formula":"=LEN(L2)"}');
            done();
        });
        it('LEN - Cell reference - II', (done: Function) => {
            helper.edit('L5', '"112"');
            helper.edit('M2', '=LEN(L5)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('5');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":5,"formula":"=LEN(L5)"}');
            done();
        });
        it('LEN - Cell reference - III', (done: Function) => {
            helper.edit('H9', '"0"');
            helper.edit('M3', '=LEN(H9)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":3,"formula":"=LEN(H9)"}');
            done();
        });
        it('LEN - Cell reference - IV', (done: Function) => {
            helper.edit('G3', '""');
            helper.edit('M4', '=LEN(G3)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":2,"formula":"=LEN(G3)"}');
            done();
        });
        it('LEN - Cell reference - V', (done: Function) => {
            helper.edit('I3', '"TRUE"');
            helper.edit('M5', '=LEN(I3)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":6,"formula":"=LEN(I3)"}');
            done();
        });
        it('LEN - Cell reference - VI', (done: Function) => {
            helper.edit('H5', '"-5"');
            helper.edit('M6', '=LEN(H5)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":4,"formula":"=LEN(H5)"}');
            done();
        });
        it('LEN - Cell reference - VII', (done: Function) => {
            helper.edit('L8', '"Hi"');
            helper.edit('M7', '=LEN(L8)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":4,"formula":"=LEN(L8)"}');
            done();
        });
        it('LEN - Cell reference - VIII', (done: Function) => {
            helper.edit('G3', '""');
            helper.edit('M8', '=LEN(G3)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('2');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":2,"formula":"=LEN(G3)"}');
            done();
        });
        it('LEN - Cell reference - IX', (done: Function) => {
            helper.edit('H9', '"0"');
            helper.edit('M9', '=LEN(H9)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":3,"formula":"=LEN(H9)"}');
            done();
        });
        it('LEN - Cell reference - X', (done: Function) => {
            helper.edit('H13', '"03/04/2023"');
            helper.edit('M10', '=LEN(H13)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('12');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":12,"formula":"=LEN(H13)"}');
            done();
        });
        it('LEN - Cell reference - XI', (done: Function) => {
            helper.edit('H14', '"07-JUN"');
            helper.edit('M11', '=LEN(H14)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[12])).toBe('{"value":8,"formula":"=LEN(H14)"}');
            done();
        });
        it('LEN - Cell reference - XII', (done: Function) => {
            helper.edit('F15', '" "');
            helper.edit('M12', '=LEN(F15)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[12])).toBe('{"value":3,"formula":"=LEN(F15)"}');
            done();
        });
        it('LEN - Cell reference - XIII', (done: Function) => {
            helper.edit('H15', '"     "');
            helper.edit('M13', '=LEN(H15)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[12])).toBe('{"value":7,"formula":"=LEN(H15)"}');
            done();
        });
        it('LEN - Different datatypes - I', (done: Function) => {
            helper.edit('N1', '=LEN(6/23/2014)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('21');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":21,"formula":"=LEN(6/23/2014)"}');
            done();
        });
        it('LEN - Different datatypes - II', (done: Function) => {
            helper.edit('J2', 'H123Ello');
            helper.edit('N2', '=LEN(J2:J10)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":8,"formula":"=LEN(J2:J10)"}');
            done();
        });
        it('LEN - Invalid Arguments - I', (done: Function) => {
            helper.edit('O1', '=LEN(6.078%)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[14])).toBe('{"value":7,"formula":"=LEN(6.078%)"}');
            done();
        });
        it('LEN - Invalid Arguments - II', (done: Function) => {
            helper.edit('D16', '"-3.45"');
            helper.edit('O2', '=LEN(D16)');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('7');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[14])).toBe('{"value":7,"formula":"=LEN(D16)"}');
            done();
        });
        it('LEN - Sheets - I', (done: Function) => {
            helper.edit('Sheet1!L2', '"65.678"');
            helper.edit('P1', '=LEN(Sheet1!L2)');
            expect(helper.invoke('getCell', [0, 15]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[15])).toBe('{"value":8,"formula":"=LEN(Sheet1!L2)"}');
            done();
        });
        it('LEN - Sheets - II', (done: Function) => {
            helper.edit('Sheet1!$L$2', '"65.678"');
            helper.edit('P2', '=LEN(Sheet1!$L$2)');
            expect(helper.invoke('getCell', [1, 15]).textContent).toBe('8');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[15])).toBe('{"value":8,"formula":"=LEN(Sheet1!$L$2)"}');
            done();
        });
        it('LEN - Cell Ref - I', (done: Function) => {
            helper.edit('$L$3', '"33"');
            helper.edit('Q1', '=LEN($L$3)');
            expect(helper.invoke('getCell', [0, 16]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[16])).toBe('{"value":4,"formula":"=LEN($L$3)"}');
            done();
        });
        it('LEN - Issue fixing: 889130 - Nested formula - 1', (done: Function) => {
            helper.edit('G4', '13853.09');
            helper.edit('Z1', '=LEN(TEXT(G4,"0.0%"))');
            expect(helper.invoke('getCell', [0, 25]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[25])).toBe('{"value":10,"formula":"=LEN(TEXT(G4,\\"0.0%\\"))"}');
            done();
        });
        it('LEN - Issue fixing: 889130 - Nested formula - 2', (done: Function) => {
            helper.edit('D10', 'Debit Card');
            helper.edit('Z2', '=LEN(T(D10))');
            expect(helper.invoke('getCell', [1, 25]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[25])).toBe('{"value":10,"formula":"=LEN(T(D10))"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 7 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('PROPER - Specific Type - I', (done: Function) => {
            helper.edit('J7', 'A123@!hi');
            helper.edit('K1', '=PROPER(J7)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('A123@!Hi');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"A123@!Hi","formula":"=PROPER(J7)"}');
            done();
        });
        it('PROPER - Specific Type - II', (done: Function) => {
            helper.edit('K2', '=PROPER("0!")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"0!","formula":"=PROPER(\\"0!\\")"}');
            done();
        });
        it('PROPER - Specific Type - III', (done: Function) => {
            helper.edit('K3', '=PROPER(2/3/2000)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('0.000333333');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"0.0003333333333333333","formula":"=PROPER(2/3/2000)"}');
            done();
        });
        it('PROPER - Specific Type - IV', (done: Function) => {
            helper.edit('K4', '=PROPER("""")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"\\"","formula":"=PROPER(\\"\\"\\"\\")"}');
            done();
        });
        it('PROPER - Specific Type - V', (done: Function) => {
            helper.edit('K5', '=PROPER("""   ")');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('"   ');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"\\"   ","formula":"=PROPER(\\"\\"\\"   \\")"}');
            done();
        });
        it('PROPER - Specific Type - VI', (done: Function) => {
            helper.edit('K6', '=PROPER("  .67   """)');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('  .67   "');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"  .67   \\"","formula":"=PROPER(\\"  .67   \\"\\"\\")"}');
            done();
        });
        it('PROPER - Specific Type - VII', (done: Function) => {
            helper.edit('H18', 'gentle.CS');
            helper.edit('K7', '=PROPER(H18)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('Gentle.Cs');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"Gentle.Cs","formula":"=PROPER(H18)"}');
            done();
        });
        it('PROPER - Specific Type - VIII', (done: Function) => {
            helper.edit('H19', 'hello world.agHt');
            helper.edit('K8', '=PROPER(H19)');
            expect(helper.invoke('getCell', [7, 10]).textContent).toBe('Hello World.Aght');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[10])).toBe('{"value":"Hello World.Aght","formula":"=PROPER(H19)"}');
            done();
        });
        it('PROPER - Specific Type - IX', (done: Function) => {
            helper.edit('H20', 'fellHell, BS');
            helper.edit('K9', '=PROPER(H20)');
            expect(helper.invoke('getCell', [8, 10]).textContent).toBe('Fellhell, Bs');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[10])).toBe('{"value":"Fellhell, Bs","formula":"=PROPER(H20)"}');
            done();
        });
        it('PROPER - Specific Type - X', (done: Function) => {
            helper.edit('H21', 'San deigo, CA');
            helper.edit('K10', '=PROPER(H21)');
            expect(helper.invoke('getCell', [9, 10]).textContent).toBe('San Deigo, Ca');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[10])).toBe('{"value":"San Deigo, Ca","formula":"=PROPER(H21)"}');
            done();
        });
        it('PROPER - Specific Type - XI', (done: Function) => {
            helper.edit('J17', 'excel');
            helper.edit('K11', '=PROPER(J17)');
            expect(helper.invoke('getCell', [10, 10]).textContent).toBe('Excel');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[10])).toBe('{"value":"Excel","formula":"=PROPER(J17)"}');
            done();
        });
        it('PROPER - Specific Type - XII', (done: Function) => {
            helper.edit('K12', '=PROPER("2/4/2000 12:00 am")');
            expect(helper.invoke('getCell', [11, 10]).textContent).toBe('2/4/2000 12:00 Am');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[10])).toBe('{"value":"2/4/2000 12:00 Am","formula":"=PROPER(\\"2/4/2000 12:00 am\\")"}');
            done();
        });
        it('PROPER - Specific Type - XIII', (done: Function) => {
            helper.edit('O23', 'Fell In Hell');
            helper.edit('K13', '=PROPER(O23:O28)');
            expect(helper.invoke('getCell', [12, 10]).textContent).toBe('Fell In Hell');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[10])).toBe('{"value":"Fell In Hell","formula":"=PROPER(O23:O28)"}');
            done();
        });
        it('PROPER - Direct Value - I', (done: Function) => {
            helper.edit('L1', '=PROPER(400%)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":"4","formula":"=PROPER(400%)"}');
            done();
        });
        it('PROPER - Direct Value - II', (done: Function) => {
            helper.edit('L2', '=PROPER("he""jI")');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('He"Ji');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":"He\\"Ji","formula":"=PROPER(\\"he\\"\\"jI\\")"}');
            done();
        });
        it('PROPER - Direct Value - III', (done: Function) => {
            helper.edit('L3', '=PROPER("TRUE")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":"True","formula":"=PROPER(\\"TRUE\\")"}');
            done();
        });
        it('PROPER - Direct Value - IV', (done: Function) => {
            helper.edit('L4', '=PROPER(TRUE)');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"True","formula":"=PROPER(TRUE)"}');
            done();
        });
        it('PROPER - Direct Value - V', (done: Function) => {
            helper.edit('L5', '=PROPER(FALSE)');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('FALSE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"False","formula":"=PROPER(FALSE)"}');
            done();
        });
        it('PROPER - Direct Value - VI', (done: Function) => {
            helper.edit('L6', '=PROPER("-3.0000000")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('-3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":"-3.0000000","formula":"=PROPER(\\"-3.0000000\\")"}');
            done();
        });
        it('PROPER - Direct Value - VII', (done: Function) => {
            helper.edit('M10', '/"Hi"/');
            helper.edit('L7', '=PROPER(M10)');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('/"Hi"/');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":"/\\"Hi\\"/","formula":"=PROPER(M10)"}');
            done();
        });
        it('PROPER - Direct Value - VIII', (done: Function) => {
            helper.edit('L8', '=PROPER(3/4/2023)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('0.000370737');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":"0.0003707365299060801","formula":"=PROPER(3/4/2023)"}');
            done();
        });
        it('PROPER - Direct Value - IX', (done: Function) => {
            helper.edit('L9', '=PROPER("3/4/2023")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('3/4/2023');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":"44989","formula":"=PROPER(\\"3/4/2023\\")","format":"m/d/yyyy","formattedText":"3/4/2023"}');
            done();
        });
        it('PROPER - Direct Value - X', (done: Function) => {
            helper.edit('L9', '=PROPER("07-JUN")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('6/7/2025');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":"45815","formula":"=PROPER(\\"07-JUN\\")","format":"m/d/yyyy","formattedText":"6/7/2025"}');
            done();
        });
        it('PROPER - Cell reference - I', (done: Function) => {
            helper.edit('B13', 'School Office+12"YG"');
            helper.edit('M1', '=PROPER(B13)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('School Office+12"Yg"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":"School Office+12\\"Yg\\"","formula":"=PROPER(B13)"}');
            done();
        });
        it('PROPER - Cell reference - II', (done: Function) => {
            helper.edit('B15', 'School Office "YG"');
            helper.edit('M2', '=PROPER(B15)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('School Office "Yg"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":"School Office \\"Yg\\"","formula":"=PROPER(B15)"}');
            done();
        });
        it('PROPER - Cell reference - III', (done: Function) => {
            helper.edit('B17', "RNd123+'0tRue");
            helper.edit('M3', '=PROPER(B17)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe("Rnd123+'0True");
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":"Rnd123+\'0True","formula":"=PROPER(B17)"}');
            done();
        });
        it('PROPER - Cell reference - IV', (done: Function) => {
            helper.edit('L2', '"65.678"');
            helper.edit('M4', '=PROPER(L2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('"65.678"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":"\\"65.678\\"","formula":"=PROPER(L2)"}');
            done();
        });
        it('PROPER - Cell reference - V', (done: Function) => {
            helper.edit('L5', '"112"');
            helper.edit('M5', '=PROPER(L5)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('"112"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":"\\"112\\"","formula":"=PROPER(L5)"}');
            done();
        });
        it('PROPER - Cell reference - VI', (done: Function) => {
            helper.edit('H9', '"0"');
            helper.edit('M6', '=PROPER(H9)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('"0"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":"\\"0\\"","formula":"=PROPER(H9)"}');
            done();
        });
        it('PROPER - Cell reference - VII', (done: Function) => {
            helper.edit('I3', '"TRUE"');
            helper.edit('M7', '=PROPER(I3)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('"True"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":"\\"True\\"","formula":"=PROPER(I3)"}');
            done();
        });
        it('PROPER - Cell reference - VIII', (done: Function) => {
            helper.edit('H5', '"-5"');
            helper.edit('M8', '=PROPER(H5)');
            expect(helper.invoke('getCell', [7, 12]).textContent).toBe('"-5"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[12])).toBe('{"value":"\\"-5\\"","formula":"=PROPER(H5)"}');
            done();
        });
        it('PROPER - Cell reference - IX', (done: Function) => {
            helper.edit('L8', '"Hi"');
            helper.edit('M9', '=PROPER(L8)');
            expect(helper.invoke('getCell', [8, 12]).textContent).toBe('"Hi"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[12])).toBe('{"value":"\\"Hi\\"","formula":"=PROPER(L8)"}');
            done();
        });
        it('PROPER - Cell reference - X', (done: Function) => {
            helper.edit('G3', '""');
            helper.edit('M10', '=PROPER(G3)');
            expect(helper.invoke('getCell', [9, 12]).textContent).toBe('""');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[12])).toBe('{"value":"\\"\\"","formula":"=PROPER(G3)"}');
            done();
        });
        it('PROPER - Cell reference - XI', (done: Function) => {
            helper.edit('H9', '"0"');
            helper.edit('M11', '=PROPER(H9)');
            expect(helper.invoke('getCell', [10, 12]).textContent).toBe('"0"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[12])).toBe('{"value":"\\"0\\"","formula":"=PROPER(H9)"}');
            done();
        });
        it('PROPER - Cell reference - XII', (done: Function) => {
            helper.edit('H14', '"07-JUN"');
            helper.edit('M12', '=PROPER(H14)');
            expect(helper.invoke('getCell', [11, 12]).textContent).toBe('"07-Jun"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[12])).toBe('{"value":"\\"07-Jun\\"","formula":"=PROPER(H14)"}');
            done();
        });
        it('PROPER - Cell reference - XIII', (done: Function) => {
            helper.edit('H16', '""      ""');
            helper.edit('M13', '=PROPER(H16)');
            expect(helper.invoke('getCell', [12, 12]).textContent).toBe('""      ""');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[12])).toBe('{"value":"\\"\\"      \\"\\"","formula":"=PROPER(H16)"}');
            done();
        });
        it('PROPER - Cell reference - XIV', (done: Function) => {
            helper.edit('H15', '"     "');
            helper.edit('M14', '=PROPER(H15)');
            expect(helper.invoke('getCell', [13, 12]).textContent).toBe('"     "');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[12])).toBe('{"value":"\\"     \\"","formula":"=PROPER(H15)"}');
            done();
        });
        it('PROPER - Different datatypes - I', (done: Function) => {
            helper.edit('B11', 'Flip- Flops & Slippers');
            helper.edit('N1', '=PROPER(B11)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('Flip- Flops & Slippers');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":"Flip- Flops & Slippers","formula":"=PROPER(B11)"}');
            done();
        });
        it('PROPER - Different datatypes - II', (done: Function) => {
            helper.edit('N2', '=PROPER(6/23/2014)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('0.000129528');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":"0.0001295280860066491","formula":"=PROPER(6/23/2014)"}');
            done();
        });
        it('PROPER - Different datatypes - III', (done: Function) => {
            helper.edit('N3', '=PROPER("105.""3")');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('105."3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":"105.\\"3","formula":"=PROPER(\\"105.\\"\\"3\\")"}');
            done();
        });
        it('PROPER - Different datatypes - IV', (done: Function) => {
            helper.edit('M11', '12:00:00 AM');
            helper.edit('N4', '=PROPER(M11)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[13])).toBe('{"value":"0","formula":"=PROPER(M11)"}');
            done();
        });
        it('PROPER - Invalid Arguments - I', (done: Function) => {
            helper.edit('O1', '=PROPER(6.078%)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('0.06078');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[14])).toBe('{"value":"0.06078","formula":"=PROPER(6.078%)"}');
            done();
        });
        it('PROPER - Invalid Arguments - II', (done: Function) => {
            helper.edit('G11', '$300.00');
            helper.edit('O2', '=PROPER(G11)');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('300');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[14])).toBe('{"value":"300","formula":"=PROPER(G11)"}');
            done();
        });
        it('PROPER - Invalid Arguments - III', (done: Function) => {
            helper.edit('H11', '1000.00%');
            helper.edit('O3', '=PROPER(H11)');
            expect(helper.invoke('getCell', [2, 14]).textContent).toBe('10');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[14])).toBe('{"value":"10","formula":"=PROPER(H11)"}');
            done();
        });
        it('PROPER - Invalid Arguments - IV', (done: Function) => {
            helper.edit('O4', '=PROPER(EXP(4)/FACT(3))');
            expect(helper.invoke('getCell', [3, 14]).textContent).toBe('9.099691672');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[14])).toBe('{"value":"9.099691672190707","formula":"=PROPER(EXP(4)/FACT(3))"}');
            done();
        });
        it('PROPER - Invalid Arguments - V', (done: Function) => {
            helper.edit('O5', '=PROPER(2 * PI())');
            expect(helper.invoke('getCell', [4, 14]).textContent).toBe('6.283185307');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[14])).toBe('{"value":"6.283185307179586","formula":"=PROPER(2 * PI())"}');
            done();
        });
        it('PROPER - Invalid Arguments - VI', (done: Function) => {
            helper.edit('D16', '"-3.45"');
            helper.edit('O6', '=PROPER(D16)');
            expect(helper.invoke('getCell', [5, 14]).textContent).toBe('"-3.45"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[14])).toBe('{"value":"\\"-3.45\\"","formula":"=PROPER(D16)"}');
            done();
        });
        it('PROPER - Sheets - I', (done: Function) => {
            helper.edit('Sheet1!K4', '"34"');
            helper.edit('P1', '=PROPER(Sheet1!K4)');
            expect(helper.invoke('getCell', [0, 15]).textContent).toBe('"34"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[15])).toBe('{"value":"\\"34\\"","formula":"=PROPER(Sheet1!K4)"}');
            done();
        });
        it('PROPER - Sheets - II', (done: Function) => {
            helper.edit('Sheet1!L2', '"65.678"');
            helper.edit('P2', '=PROPER(Sheet1!L2)');
            expect(helper.invoke('getCell', [1, 15]).textContent).toBe('"65.678"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[15])).toBe('{"value":"\\"65.678\\"","formula":"=PROPER(Sheet1!L2)"}');
            done();
        });
        it('PROPER - Cell Ref - I', (done: Function) => {
            helper.edit('$J$2', 'h123eLLlo');
            helper.edit('Q1', '=PROPER($J$2)');
            expect(helper.invoke('getCell', [0, 16]).textContent).toBe('H123Elllo');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[16])).toBe('{"value":"H123Elllo","formula":"=PROPER($J$2)"}');
            done();
        });
        it('PROPER - Cell Ref - II', (done: Function) => {
            helper.edit('$L$3', '"33"');
            helper.edit('Q2', '=PROPER($L$3)');
            expect(helper.invoke('getCell', [1, 16]).textContent).toBe('"33"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[16])).toBe('{"value":"\\"33\\"","formula":"=PROPER($L$3)"}');
            done();
        });
        it('PROPER - Specific case - I', (done: Function) => {
            helper.edit('R1', '=PROPER("ab-cd,ef.gh ij123kl")');
            expect(helper.invoke('getCell', [0, 17]).textContent).toBe('Ab-Cd,Ef.Gh Ij123Kl');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[17])).toBe('{"value":"Ab-Cd,Ef.Gh Ij123Kl","formula":"=PROPER(\\"ab-cd,ef.gh ij123kl\\")"}');
            done();
        });
        it('CODE - Issue fixing: 889130 - Nested formula - 4', (done: Function) => {
            helper.edit('B19', 'TSX');
            helper.edit('Z1', '=PROPER(T(B19))');
            expect(helper.invoke('getCell', [0, 25]).textContent).toBe('Tsx');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[25])).toBe('{"value":"Tsx","formula":"=PROPER(T(B19))"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 8 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('T - Specific Type - I', (done: Function) => {
            helper.edit('K1', '=T("!")');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"!","formula":"=T(\\"!\\")"}');
            done();
        });
        it('T - Specific Type - II', (done: Function) => {
            helper.edit('K2', '=T("0!")');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"0!","formula":"=T(\\"0!\\")"}');
            done();
        });
        it('T - Specific Type - III', (done: Function) => {
            helper.edit('K3', '=T("""")');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"\\"","formula":"=T(\\"\\"\\"\\")"}');
            done();
        });
        it('T - Specific Type - IV', (done: Function) => {
            helper.edit('K4', '=T("""   ")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('"   ');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"\\"   ","formula":"=T(\\"\\"\\"   \\")"}');
            done();
        });
        it('T - Specific Type - V', (done: Function) => {
            helper.edit('K5', '=T("  .67   """)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('  .67   "');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":"  .67   \\"","formula":"=T(\\"  .67   \\"\\"\\")"}');
            done();
        });
        it('T - Specific Type - VI', (done: Function) => {
            helper.edit('K6', '=T(-345+1)")');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{}');
            done();
        });
        it('T - Direct Value - I', (done: Function) => {
            helper.edit('L1', '=T("He""JI")');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('He"JI');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"He\\"JI","formula":"=T(\\"He\\"\\"JI\\")"}');
            done();
        });
        it('T - Direct Value - II', (done: Function) => {
            helper.edit('L2', '=T("6")');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('6');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":"6","formula":"=T(\\"6\\")"}');
            done();
        });
        it('T - Direct Value - III', (done: Function) => {
            helper.edit('L3', '=T("102.673902")');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('102.673902');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":"102.673902","formula":"=T(\\"102.673902\\")"}');
            done();
        });
        it('T - Direct Value - IV', (done: Function) => {
            helper.edit('L4', '=T("Hi")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('Hi');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"Hi","formula":"=T(\\"Hi\\")"}');
            done();
        });
        it('T - Direct Value - V', (done: Function) => {
            helper.edit('L5', '=T("")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"","formula":"=T(\\"\\")"}');
            done();
        });
        it('T - Direct Value - VI', (done: Function) => {
            helper.edit('L6', '=T("TRUE")');
            expect(helper.invoke('getCell', [5, 11]).textContent).toBe('TRUE');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[11])).toBe('{"value":"TRUE","formula":"=T(\\"TRUE\\")"}');
            done();
        });
        it('T - Direct Value - VII', (done: Function) => {
            helper.edit('L7', '=T("-5.4678")');
            expect(helper.invoke('getCell', [6, 11]).textContent).toBe('-5.4678');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[11])).toBe('{"value":"-5.4678","formula":"=T(\\"-5.4678\\")"}');
            done();
        });
        it('T - Direct Value - VIII', (done: Function) => {
            helper.edit('L8', '=T(-6.0000001)');
            expect(helper.invoke('getCell', [7, 11]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[11])).toBe('{"value":"","formula":"=T(-6.0000001)"}');
            done();
        });
        it('T - Direct Value - IX', (done: Function) => {
            helper.edit('L9', '=T(+"Tel")');
            expect(helper.invoke('getCell', [8, 11]).textContent).toBe('Tel');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[11])).toBe('{"value":"Tel","formula":"=T(+\\"Tel\\")"}');
            done();
        });
        it('T - Direct Value - X', (done: Function) => {
            helper.edit('L10', '=T("")');
            expect(helper.invoke('getCell', [9, 11]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[11])).toBe('{"value":"","formula":"=T(\\"\\")"}');
            done();
        });
        it('T - Direct Value - XI', (done: Function) => {
            helper.edit('L11', '=T("0")');
            expect(helper.invoke('getCell', [10, 11]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[11])).toBe('{"value":"0","formula":"=T(\\"0\\")"}');
            done();
        });
        it('T - Direct Value - XII', (done: Function) => {
            helper.edit('L12', '=T("3/4/2023")');
            expect(helper.invoke('getCell', [11, 11]).textContent).toBe('3/4/2023');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[11])).toBe('{"value":"44989","formula":"=T(\\"3/4/2023\\")","format":"m/d/yyyy","formattedText":"3/4/2023"}');
            done();
        });
        it('T - Direct Value - XIII', (done: Function) => {
            helper.edit('L13', '=T("07-JUN")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe('7-Jun');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":"45815","formula":"=T(\\"07-JUN\\")","format":"d-mmm","formattedText":"7-Jun"}');
            done();
        });
        it('T - Direct Value - XIV', (done: Function) => {
            helper.edit('L13', '=T(" ")');
            expect(helper.invoke('getCell', [12, 11]).textContent).toBe(' ');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[11])).toBe('{"value":" ","formula":"=T(\\" \\")","format":"d-mmm"}');
            done();
        });
        it('T - Direct Value - XV', (done: Function) => {
            helper.edit('L14', '=T("       ")');
            expect(helper.invoke('getCell', [13, 11]).textContent).toBe('       ');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":"       ","formula":"=T(\\"       \\")"}');
            done();
        });
        it('T - Direct Value - XVI', (done: Function) => {
            helper.edit('L15', '=T("       ")');
            expect(helper.invoke('getCell', [14, 11]).textContent).toBe('       ');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[11])).toBe('{"value":"       ","formula":"=T(\\"       \\")"}');
            done();
        });
        it('T - Cell reference - I', (done: Function) => {
            helper.edit('C7', '-7');
            helper.edit('M1', '=T(C7)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":"","formula":"=T(C7)"}');
            done();
        });
        it('T - Different datatypes - I', (done: Function) => {
            helper.edit('N1', '=T("Flip")');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('Flip');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":"Flip","formula":"=T(\\"Flip\\")"}');
            done();
        });
        it('T - Different datatypes - II', (done: Function) => {
            helper.edit('N2', '=T("105.""3")');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('105."3');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":"105.\\"3","formula":"=T(\\"105.\\"\\"3\\")"}');
            done();
        });
        it('T - Different datatypes - III', (done: Function) => {
            helper.edit('P9', '=T("He""JI")');
            helper.edit('N3', '=T(P9:P20)');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('He"JI');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":"He\\"JI","formula":"=T(P9:P20)"}');
            done();
        });
        it('T - Different datatypes - I', (done: Function) => {
            helper.edit('O1', '=T(6.078%)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[14])).toBe('{"value":"","formula":"=T(6.078%)"}');
            done();
        });
        it('T - Different datatypes - II', (done: Function) => {
            helper.edit('O2', '=T(                "fell")');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('fell');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[14])).toBe('{"value":"fell","formula":"=T(                \\"fell\\")"}');
            done();
        });
        it('T - Different datatypes - III', (done: Function) => {
            helper.edit('O3', '=T(-3.45)');
            expect(helper.invoke('getCell', [2, 14]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[14])).toBe('{"value":"","formula":"=T(-3.45)"}');
            done();
        });
        it('T - Different datatypes - III', (done: Function) => {
            helper.edit('D15', '-3.45');
            helper.edit('O4', '=T(D15)');
            expect(helper.invoke('getCell', [3, 14]).textContent).toBe('');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[14])).toBe('{"value":"","formula":"=T(D15)"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 9 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('RADIANS - Specific Type - I', (done: Function) => {
            helper.edit('J10', '#Yes!');
            helper.edit('K1', '=RADIANS(J10)');
            expect(helper.invoke('getCell', [0, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[10])).toBe('{"value":"#VALUE!","formula":"=RADIANS(J10)"}');
            done();
        });
        it('RADIANS - Specific Type - II', (done: Function) => {
            helper.edit('J7', 'A123@!hi');
            helper.edit('K2', '=RADIANS(J7)');
            expect(helper.invoke('getCell', [1, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[10])).toBe('{"value":"#VALUE!","formula":"=RADIANS(J7)"}');
            done();
        });
        it('RADIANS - Specific Type - III', (done: Function) => {
            helper.edit('J8', 'Hello123');
            helper.edit('K3', '=RADIANS(J8)');
            expect(helper.invoke('getCell', [2, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[10])).toBe('{"value":"#VALUE!","formula":"=RADIANS(J8)"}');
            done();
        });
        it('RADIANS - Specific Type - IV', (done: Function) => {
            helper.edit('K4', '=RADIANS("0!")');
            expect(helper.invoke('getCell', [3, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[10])).toBe('{"value":"#VALUE!","formula":"=RADIANS(\\"0!\\")"}');
            done();
        });
        it('RADIANS - Specific Type - V', (done: Function) => {
            helper.edit('K5', '=RADIANS(2/3/2000)');
            expect(helper.invoke('getCell', [4, 10]).textContent).toBe('0.000005818');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[10])).toBe('{"value":0.000005817764173314431,"formula":"=RADIANS(2/3/2000)"}');
            done();
        });
        it('RADIANS - Specific Type - VI', (done: Function) => {
            helper.edit('K6', '=RADIANS("""   ")');
            expect(helper.invoke('getCell', [5, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[10])).toBe('{"value":"#VALUE!","formula":"=RADIANS(\\"\\"\\"   \\")"}');
            done();
        });
        it('RADIANS - Specific Type - VII', (done: Function) => {
            helper.edit('K7', '=RADIANS("  .67   """)');
            expect(helper.invoke('getCell', [6, 10]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[10])).toBe('{"value":"#VALUE!","formula":"=RADIANS(\\"  .67   \\"\\"\\")"}');
            done();
        });
        it('RADIANS - Direct Value - I', (done: Function) => {
            helper.edit('L1', '=RADIANS(TRUE)');
            expect(helper.invoke('getCell', [0, 11]).textContent).toBe('0.017453293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[11])).toBe('{"value":0.017453292519943295,"formula":"=RADIANS(TRUE)"}');
            done();
        });
        it('RADIANS - Direct Value - II', (done: Function) => {
            helper.edit('L2', '=RADIANS(FALSE)');
            expect(helper.invoke('getCell', [1, 11]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[11])).toBe('{"value":0,"formula":"=RADIANS(FALSE)"}');
            done();
        });
        it('RADIANS - Direct Value - III', (done: Function) => {
            helper.edit('L3', '=RADIANS(3/4/2023)');
            expect(helper.invoke('getCell', [2, 11]).textContent).toBe('0.000006471');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[11])).toBe('{"value":0.000006470573104279522,"formula":"=RADIANS(3/4/2023)"}');
            done();
        });
        it('RADIANS - Direct Value - IV', (done: Function) => {
            helper.edit('L4', '=RADIANS(" ")');
            expect(helper.invoke('getCell', [3, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[11])).toBe('{"value":"#VALUE!","formula":"=RADIANS(\\" \\")"}');
            done();
        });
        it('RADIANS - Direct Value - V', (done: Function) => {
            helper.edit('L5', '=RADIANS("       ")');
            expect(helper.invoke('getCell', [4, 11]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[11])).toBe('{"value":"#VALUE!","formula":"=RADIANS(\\"       \\")"}');
            done();
        });
        it('RADIANS - Cell reference - I', (done: Function) => {
            helper.edit('J5', 'hi');
            helper.edit('M1', '=RADIANS(J5)');
            expect(helper.invoke('getCell', [0, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[12])).toBe('{"value":"#VALUE!","formula":"=RADIANS(J5)"}');
            done();
        });
        it('RADIANS - Cell reference - II', (done: Function) => {
            helper.edit('I2', 'TRUE');
            helper.edit('M2', '=RADIANS(I2)');
            expect(helper.invoke('getCell', [1, 12]).textContent).toBe('0.017453293');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[12])).toBe('{"value":0.017453292519943295,"formula":"=RADIANS(I2)"}');
            done();
        });
        it('RADIANS - Cell reference - III', (done: Function) => {
            helper.edit('I5', 'FALSE');
            helper.edit('M3', '=RADIANS(I5)');
            expect(helper.invoke('getCell', [2, 12]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[12])).toBe('{"value":0,"formula":"=RADIANS(I5)"}');
            done();
        });
        it('RADIANS - Cell reference - IV', (done: Function) => {
            helper.edit('M2', '6+2.83');
            helper.edit('M4', '=RADIANS(M2)');
            expect(helper.invoke('getCell', [3, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[12])).toBe('{"value":"#VALUE!","formula":"=RADIANS(M2)"}');
            done();
        });
        it('RADIANS - Cell reference - V', (done: Function) => {
            helper.edit('M3', '2*7');
            helper.edit('M5', '=RADIANS(M3)');
            expect(helper.invoke('getCell', [4, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[12])).toBe('{"value":"#VALUE!","formula":"=RADIANS(M3)"}');
            done();
        });
        it('RADIANS - Cell reference - VI', (done: Function) => {
            helper.edit('M4', '22/2');
            helper.edit('M6', '=RADIANS(M4)');
            expect(helper.invoke('getCell', [5, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[12])).toBe('{"value":"#VALUE!","formula":"=RADIANS(M4)"}');
            done();
        });
        it('RADIANS - Cell reference - VII', (done: Function) => {
            helper.edit('M5', '15-3');
            helper.edit('M7', '=RADIANS(M5)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":"#VALUE!","formula":"=RADIANS(M5)"}');
            done();
        });
        it('RADIANS - Different datatypes - I', (done: Function) => {
            helper.edit('B11', 'Flip- Flops & Slippers');
            helper.edit('M7', '=RADIANS(B11)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":"#VALUE!","formula":"=RADIANS(B11)"}');
            done();
        });
        it('RADIANS - Different datatypes - II', (done: Function) => {
            helper.edit('M7', '=RADIANS(6/23/2014)');
            expect(helper.invoke('getCell', [6, 12]).textContent).toBe('0.000002261');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[12])).toBe('{"value":0.0000022606915746224205,"formula":"=RADIANS(6/23/2014)"}');
            done();
        });
        it('RADIANS - Invalid Arguments - I', (done: Function) => {
            helper.edit('N1', '=RADIANS(6.078%)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('0.001060811');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":0.0010608111193621535,"formula":"=RADIANS(6.078%)"}');
            done();
        });
        it('RADIANS - Sheets - I', (done: Function) => {
            helper.edit('=RADIANS(Sheet1!M2)', '6+2.83');
            helper.edit('O1', '=RADIANS(Sheet1!M2)');
            expect(helper.invoke('getCell', [0, 14]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[14])).toBe('{"value":"#VALUE!","formula":"=RADIANS(Sheet1!M2)"}');
            done();
        });
        it('RADIANS - Sheets - II', (done: Function) => {
            helper.edit('=RADIANS(Sheet1!$M2)', '6+2.83');
            helper.edit('O2', '=RADIANS(Sheet1!$M2)');
            expect(helper.invoke('getCell', [1, 14]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[14])).toBe('{"value":"#VALUE!","formula":"=RADIANS(Sheet1!$M2)"}');
            done();
        });
        it('RADIANS - Cell Ref - I', (done: Function) => {
            helper.edit('$J$2', 'H123Ello');
            helper.edit('P1', '=RADIANS($J$2)');
            expect(helper.invoke('getCell', [0, 15]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[15])).toBe('{"value":"#VALUE!","formula":"=RADIANS($J$2)"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 10 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [
                { ranges: [{ dataSource: EJ2_53702_SLOPE_SHEET1 }] },
                { ranges: [{ dataSource: EJ2_53702_SLOPE_SHEET2 }] }
            ] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('INTERCEPT - Specific Cases - I', (done: Function) => {
            helper.edit('Q1', '=INTERCEPT(,)');
            expect(helper.invoke('getCell', [0, 16]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[16])).toBe('{"value":"#VALUE!","formula":"=INTERCEPT(,)"}');
            done();
        });
        it('INTERCEPT - Direct Value - I', (done: Function) => {
            helper.edit('R1', '=INTERCEPT("{12,-4}", "{-5,19}")');
            expect(helper.invoke('getCell', [0, 17]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[17])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(\\"{12,-4}\\", \\"{-5,19}\\")"}');
            done();
        });
        it('INTERCEPT - Cell reference - I', (done: Function) => {
            helper.edit('S1', '=INTERCEPT(H23:H26, G16:G19)');
            expect(helper.invoke('getCell', [0, 18]).textContent).toBe('-34466.81333');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[18])).toBe('{"value":"-34466.81333333333","formula":"=INTERCEPT(H23:H26, G16:G19)"}');
            done();
        });
        it('INTERCEPT - Cell reference - II', (done: Function) => {
            helper.edit('S2', '=INTERCEPT(C19:C22, G19:G22)');
            expect(helper.invoke('getCell', [1, 18]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[18])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(C19:C22, G19:G22)"}');
            done();
        });
        it('INTERCEPT - Cell reference - III', (done: Function) => {
            helper.edit('S3', '=INTERCEPT(D20:G20, J18:J21)');
            expect(helper.invoke('getCell', [2, 18]).textContent).toBe('-3731');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[18])).toBe('{"value":"-3731","formula":"=INTERCEPT(D20:G20, J18:J21)"}');
            done();
        });
        it('INTERCEPT - Cell reference - IV', (done: Function) => {
            helper.edit('S4', '=INTERCEPT(G18:G21, H20:K20)');
            expect(helper.invoke('getCell', [3, 18]).textContent).toBe('59.55');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[18])).toBe('{"value":"59.55","formula":"=INTERCEPT(G18:G21, H20:K20)"}');
            done();
        });
        it('INTERCEPT - Cell reference - V', (done: Function) => {
            helper.edit('S5', '=INTERCEPT(C5:H5, G12:L12)');
            expect(helper.invoke('getCell', [4, 18]).textContent).toBe('-67.64383562');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[18])).toBe('{"value":"-67.64383561643835","formula":"=INTERCEPT(C5:H5, G12:L12)"}');
            done();
        });
        it('INTERCEPT - Different datatypes - I', (done: Function) => {
            helper.edit('N1', '=INTERCEPT(C32:K32, B34:J34)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('28238.03977');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":"28238.03976708604","formula":"=INTERCEPT(C32:K32, B34:J34)"}');
            done();
        });
        it('INTERCEPT - Different datatypes - II', (done: Function) => {
            helper.edit('N2', '=INTERCEPT(L2:L17, M2:M17)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('-0.307635024');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":"-0.30763502449281077","formula":"=INTERCEPT(L2:L17, M2:M17)"}');
            done();
        });
        it('INTERCEPT - Different datatypes - III', (done: Function) => {
            helper.edit('N3', '=INTERCEPT(M24:M29, )');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":"#VALUE!","formula":"=INTERCEPT(M24:M29, )"}');
            done();
        });
        it('INTERCEPT - Different datatypes - IV', (done: Function) => {
            helper.edit('N4', '=INTERCEPT(, A2)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[13])).toBe('{"value":"#VALUE!","formula":"=INTERCEPT(, A2)"}');
            done();
        });
        it('INTERCEPT - Different datatypes - V', (done: Function) => {
            helper.edit('N5', '=INTERCEPT(M23:M28, M23:M28)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[13])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(M23:M28, M23:M28)"}');
            done();
        });
        it('INTERCEPT - Different datatypes - VI', (done: Function) => {
            helper.edit('N6', '=INTERCEPT(H27:H30, B28:B31)');
            expect(helper.invoke('getCell', [5, 13]).textContent).toBe('-41.28354828');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[13])).toBe('{"value":"-41.28354828184125","formula":"=INTERCEPT(H27:H30, B28:B31)"}');
            done();
        });
        it('INTERCEPT - Different datatypes - VII', (done: Function) => {
            helper.edit('N7', '=INTERCEPT(A24:M24, A26:M26)');
            expect(helper.invoke('getCell', [6, 13]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[13])).toBe('{"value":"#NAME?","formula":"=INTERCEPT(A24:M24, A26:M26)"}');
            done();
        });
        it('INTERCEPT - Sheets - I', (done: Function) => {
            helper.edit('P1', '=INTERCEPT(Sheet1!C5:Sheet1!H5, Sheet1!G12:Sheet1!L12)');
            expect(helper.invoke('getCell', [0, 15]).textContent).toBe('-67.64383562');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[15])).toBe('{"value":"-67.64383561643835","formula":"=INTERCEPT(Sheet1!C5:Sheet1!H5, Sheet1!G12:Sheet1!L12)"}');
            done();
        });
        it('INTERCEPT - Sheets - II', (done: Function) => {
            helper.edit('P2', '=INTERCEPT(Sheet1!$C$5:Sheet1!$H5, Sheet1!G$12:Sheet1!$L$12)');
            expect(helper.invoke('getCell', [1, 15]).textContent).toBe('-67.64383562');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[15])).toBe('{"value":"-67.64383561643835","formula":"=INTERCEPT(Sheet1!$C$5:Sheet1!$H5, Sheet1!G$12:Sheet1!$L$12)"}');
            done();
        });
        it('INTERCEPT - Sheets - III', (done: Function) => {
            helper.edit('P3', '=INTERCEPT(Sheet1!C5:$H$5, Sheet1!$G$12:L12)');
            expect(helper.invoke('getCell', [2, 15]).textContent).toBe('-67.64383562');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[15])).toBe('{"value":"-67.64383561643835","formula":"=INTERCEPT(Sheet1!C5:$H$5, Sheet1!$G$12:L12)"}');
            done();
        });
        it('INTERCEPT - Sheets - IV', (done: Function) => {
            helper.edit('P4', '=INTERCEPT(Sheet2!C12:Sheet2!H12, Sheet2!G19:Sheet2!L19)');
            expect(helper.invoke('getCell', [3, 15]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[15])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(Sheet2!C12:Sheet2!H12, Sheet2!G19:Sheet2!L19)"}');
            done();
        });
        it('INTERCEPT - Sheets - V', (done: Function) => {
            helper.edit('P5', '=INTERCEPT(Sheet2!$C$5:Sheet2!$H5, Sheet2!G$12:Sheet2!$L$12)');
            expect(helper.invoke('getCell', [4, 15]).textContent).toBe('-147');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[15])).toBe('{"value":"-147","formula":"=INTERCEPT(Sheet2!$C$5:Sheet2!$H5, Sheet2!G$12:Sheet2!$L$12)"}');
            done();
        });
        it('INTERCEPT - Sheets - VI', (done: Function) => {
            helper.edit('P6', '=INTERCEPT(Sheet2!C$5:$H12, Sheet2!$G$12:L19)');
            expect(helper.invoke('getCell', [5, 15]).textContent).toBe('124.7799885');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[15])).toBe('{"value":"124.77998853001691","formula":"=INTERCEPT(Sheet2!C$5:$H12, Sheet2!$G$12:L19)"}');
            done();
        });
        it('INTERCEPT - Sheets - VII', (done: Function) => {
            helper.edit('P7', '=INTERCEPT(Sheet2!H$23:H26, Sheet2!G16:G$19)');
            expect(helper.invoke('getCell', [6, 15]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[15])).toBe('{"value":"#DIV/0!","formula":"=INTERCEPT(Sheet2!H$23:H26, Sheet2!G16:G$19)"}');
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 11 - ', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [
                { ranges: [{ dataSource: EJ2_53702_SLOPE_SHEET1 }] },
                { ranges: [{ dataSource: EJ2_53702_SLOPE_SHEET2 }] }
            ] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('SLOPE - Specific Cases - I', (done: Function) => {
            helper.edit('Q1', '=SLOPE(,)');
            expect(helper.invoke('getCell', [0, 16]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[16])).toBe('{"value":"#VALUE!","formula":"=SLOPE(,)"}');
            done();
        });
        it('SLOPE - Direct Value - I', (done: Function) => {
            helper.edit('R1', '=SLOPE("{12,-4}", "{-5,19}")');
            expect(helper.invoke('getCell', [0, 17]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[17])).toBe('{"value":"#DIV/0!","formula":"=SLOPE(\\"{12,-4}\\", \\"{-5,19}\\")"}');
            done();
        });
        it('SLOPE - Cell reference - I', (done: Function) => {
            helper.edit('S1', '=SLOPE(H23:H26, G16:G19)');
            expect(helper.invoke('getCell', [0, 18]).textContent).toBe('498.5005');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[18])).toBe('{"value":"498.50049999999464","formula":"=SLOPE(H23:H26, G16:G19)"}');
            done();
        });
        it('SLOPE - Cell reference - II', (done: Function) => {
            helper.edit('S2', '=SLOPE(C19:C22, G19:G22)');
            expect(helper.invoke('getCell', [1, 18]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[18])).toBe('{"value":"#DIV/0!","formula":"=SLOPE(C19:C22, G19:G22)"}');
            done();
        });
        it('SLOPE - Cell reference - III', (done: Function) => {
            helper.edit('S3', '=SLOPE(D20:G20, J18:J21)');
            expect(helper.invoke('getCell', [2, 18]).textContent).toBe('20');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[18])).toBe('{"value":"20","formula":"=SLOPE(D20:G20, J18:J21)"}');
            done();
        });
        it('SLOPE - Cell reference - IV', (done: Function) => {
            helper.edit('S4', '=SLOPE(G18:G21, H20:K20)');
            expect(helper.invoke('getCell', [3, 18]).textContent).toBe('0.05');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[18])).toBe('{"value":"0.05","formula":"=SLOPE(G18:G21, H20:K20)"}');
            done();
        });
        it('SLOPE - Different datatypes - I', (done: Function) => {
            helper.edit('N1', '=SLOPE(C32:K32, B34:J34)');
            expect(helper.invoke('getCell', [0, 13]).textContent).toBe('-0.422273676');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[13])).toBe('{"value":"-0.4222736759740336","formula":"=SLOPE(C32:K32, B34:J34)"}');
            done();
        });
        it('SLOPE - Different datatypes - II', (done: Function) => {
            helper.edit('N2', '=SLOPE(L2:L17, M2:M17)');
            expect(helper.invoke('getCell', [1, 13]).textContent).toBe('0.997597169');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[13])).toBe('{"value":"0.9975971694248421","formula":"=SLOPE(L2:L17, M2:M17)"}');
            done();
        });
        it('SLOPE - Different datatypes - III', (done: Function) => {
            helper.edit('N3', '=SLOPE(M24:M29, )');
            expect(helper.invoke('getCell', [2, 13]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[13])).toBe('{"value":"#VALUE!","formula":"=SLOPE(M24:M29, )"}');
            done();
        });
        it('SLOPE - Different datatypes - IV', (done: Function) => {
            helper.edit('N4', '=SLOPE(, A2)');
            expect(helper.invoke('getCell', [3, 13]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[13])).toBe('{"value":"#VALUE!","formula":"=SLOPE(, A2)"}');
            done();
        });
        it('SLOPE - Different datatypes - IV', (done: Function) => {
            helper.edit('N5', '=SLOPE(M23:M28, M23:M28)');
            expect(helper.invoke('getCell', [4, 13]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[13])).toBe('{"value":"#DIV/0!","formula":"=SLOPE(M23:M28, M23:M28)"}');
            done();
        });
        it('SLOPE - Sheets - I', (done: Function) => {
            helper.edit('P1', '=SLOPE(Sheet1!C5:Sheet1!H5, Sheet1!G12:Sheet1!L12)');
            expect(helper.invoke('getCell', [0, 15]).textContent).toBe('0.547945205');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[15])).toBe('{"value":"0.547945205479452","formula":"=SLOPE(Sheet1!C5:Sheet1!H5, Sheet1!G12:Sheet1!L12)"}');
            done();
        });
        it('SLOPE - Sheets - II', (done: Function) => {
            helper.edit('P2', '=SLOPE(Sheet1!$C$5:Sheet1!$H5, Sheet1!G$12:Sheet1!$L$12)');
            expect(helper.invoke('getCell', [1, 15]).textContent).toBe('0.547945205');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[15])).toBe('{"value":"0.547945205479452","formula":"=SLOPE(Sheet1!$C$5:Sheet1!$H5, Sheet1!G$12:Sheet1!$L$12)"}');
            done();
        });
        it('SLOPE - Sheets - III', (done: Function) => {
            helper.edit('P3', '=SLOPE(Sheet1!C5:$H$5, Sheet1!$G$12:L12)');
            expect(helper.invoke('getCell', [2, 15]).textContent).toBe('0.547945205');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[15])).toBe('{"value":"0.547945205479452","formula":"=SLOPE(Sheet1!C5:$H$5, Sheet1!$G$12:L12)"}');
            done();
        });
        it('SLOPE - Sheets - IV', (done: Function) => {
            helper.edit('P4', '=SLOPE(C$5:Sheet1!$H5, $K$5:Sheet1!$K$10)');
            expect(1).toBe(1);
            done();
        });
        it('SLOPE - Sheets - V', (done: Function) => {
            helper.edit('P5', '=SLOPE(H$23:Sheet1!H26, Sheet1!G16:G$19)');
            expect(1).toBe(1);
            done();
        });
        it('SLOPE - Sheets - VI', (done: Function) => {
            helper.edit('P6', '=SLOPE(Sheet2!C12:Sheet2!H12, Sheet2!G19:Sheet2!L19)');
            expect(helper.invoke('getCell', [5, 15]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[15])).toBe('{"value":"#DIV/0!","formula":"=SLOPE(Sheet2!C12:Sheet2!H12, Sheet2!G19:Sheet2!L19)"}');
            done();
        });
        it('SLOPE - Sheets - VII', (done: Function) => {
            helper.edit('P7', '=SLOPE(Sheet2!$C$5:Sheet2!$H5, Sheet2!G$12:Sheet2!$L$12)');
            expect(helper.invoke('getCell', [6, 15]).textContent).toBe('1');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[15])).toBe('{"value":"1","formula":"=SLOPE(Sheet2!$C$5:Sheet2!$H5, Sheet2!G$12:Sheet2!$L$12)"}');
            done();
        });
        it('SLOPE - Sheets - VIII', (done: Function) => {
            helper.edit('P8', '=SLOPE(Sheet2!C$5:$H12, Sheet2!$G$12:L19)');
            expect(helper.invoke('getCell', [7, 15]).textContent).toBe('-0.531844936');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[15])).toBe('{"value":"-0.531844935606087","formula":"=SLOPE(Sheet2!C$5:$H12, Sheet2!$G$12:L19)"}');
            done();
        });
        it('SLOPE - Sheets - IX', (done: Function) => {
            helper.edit('P9', '=SLOPE(D$5:Sheet2!$D10, $E$6:Sheet2!$E$11)');
            expect(1).toBe(1);
            done();
        });
        it('SLOPE - Sheets - X', (done: Function) => {
            helper.edit('P10', '=SLOPE(Sheet2!H$23:H26, Sheet2!G16:G$19)');
            expect(helper.invoke('getCell', [8, 15]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[15])).toBe('{"value":"#REF!","formula":"=SLOPE(D$5:Sheet2!$D10, $E$6:Sheet2!$E$11)"}');
            done();
        });
        it('SLOPE - Sheets - XI', (done: Function) => {
            helper.edit('P11', '=SLOPE(Sheet1!D$5:Sheet2!$D10, Sheet2!$E$6:Sheet1!$E$11)');
            expect(1).toBe(1);
            done();
        });
    });

    describe('EJ2-53702 -> FORMULA VALIDATING 12 -', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: EJ2_53702_UNIQUE }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('UNIQUE - Specific Type - I', (done: Function) => {
            helper.edit('Z1', '=UNIQUE(Grape, FALSE, FALSE)');
            expect(helper.invoke('getCell', [0, 25]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[25])).toBe('{"value":"#NAME?","formula":"=UNIQUE(Grape, FALSE, FALSE)"}');
            done();
        });
        it('UNIQUE - Specific Type - II', (done: Function) => {
            helper.edit('Z2', '=UNIQUE(Grape, TRUE, TRUE)');
            expect(helper.invoke('getCell', [1, 25]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[25])).toBe('{"value":"#NAME?","formula":"=UNIQUE(Grape, TRUE, TRUE)"}');
            done();
        });
        it('UNIQUE - Specific Type - III', (done: Function) => {
            helper.edit('Z3', '=UNIQUE(Grape, FALSE, TRUE)');
            expect(helper.invoke('getCell', [2, 25]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[25])).toBe('{"value":"#NAME?","formula":"=UNIQUE(Grape, FALSE, TRUE)"}');
            done();
        });
        it('UNIQUE - Specific Type - IV', (done: Function) => {
            helper.edit('Z4', '=UNIQUE(Grape, TRUE, FALSE)');
            expect(helper.invoke('getCell', [3, 25]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[25])).toBe('{"value":"#NAME?","formula":"=UNIQUE(Grape, TRUE, FALSE)"}');
            done();
        });
        it('UNIQUE - Specific Type - V', (done: Function) => {
            helper.edit('Z5', '=UNIQUE(M5:N5, TRUE,)');
            expect(helper.invoke('getCell', [4, 25]).textContent).toBe('Element');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[25])).toBe('{"value":"Element","formula":"=UNIQUE(M5:N5, TRUE,)"}');
            done();
        });
        it('UNIQUE - Specific Type - VI', (done: Function) => {
            helper.edit('Z6', '=UNIQUE(M5:N5, TRUE, TRUE)');
            expect(helper.invoke('getCell', [5, 25]).textContent).toBe('#CALC!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[25])).toBe('{"value":"#CALC!","formula":"=UNIQUE(M5:N5, TRUE, TRUE)"}');
            done();
        });
        it('UNIQUE - Specific Type - VII', (done: Function) => {
            helper.edit('Z7', '=UNIQUE(M15:M16, FALSE, TRUE)');
            expect(helper.invoke('getCell', [6, 25]).textContent).toBe('#CALC!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[25])).toBe('{"value":"#CALC!","formula":"=UNIQUE(M15:M16, FALSE, TRUE)"}');
            done();
        });
        it('UNIQUE - Specific Type - VIII', (done: Function) => {
            helper.edit('Z8', '=UNIQUE(M15:M17, FALSE, TRUE)');
            expect(helper.invoke('getCell', [7, 25]).textContent).toBe('#CALC!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[25])).toBe('{"value":"#CALC!","formula":"=UNIQUE(M15:M17, FALSE, TRUE)"}');
            done();
        });
        it('UNIQUE - Specific Type - IX', (done: Function) => {
            helper.edit('Z9', '=UNIQUE(P2:P9, FALSE, TRUE)');
            expect(helper.invoke('getCell', [8, 25]).textContent).toBe('#CALC!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[25])).toBe('{"value":"#CALC!","formula":"=UNIQUE(P2:P9, FALSE, TRUE)"}');
            done();
        });
        it('UNIQUE - Specific Type - X', (done: Function) => {
            helper.edit('Z10', '=UNIQUE(O8:O14, FALSE, FALSE)');
            expect(helper.invoke('getCell', [9, 25]).textContent).toBe('Orange');
            expect(helper.invoke('getCell', [10, 25]).textContent).toBe('ori');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[25])).toBe('{"value":"Orange","formula":"=UNIQUE(O8:O14, FALSE, FALSE)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[25])).toBe('{"value":"ori"}');
            done();
        });
        it('UNIQUE - Specific Type - XI', (done: Function) => {
            helper.edit('Z12', '=UNIQUE(G38:H47, TRUE, TRUE)');
            expect(helper.invoke('getCell', [11, 25]).textContent).toBe('#CALC!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[25])).toBe('{"value":"#CALC!","formula":"=UNIQUE(G38:H47, TRUE, TRUE)"}');
            done();
        });
        it('UNIQUE - Normal value - I', (done: Function) => {
            helper.edit('T1', '=UNIQUE(L6:N6, TRUE, FALSE)');
            expect(helper.invoke('getCell', [0, 19]).textContent).toBe('yes');
            expect(helper.invoke('getCell', [0, 20]).textContent).toBe('Flag');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[19])).toBe('{"value":"yes","formula":"=UNIQUE(L6:N6, TRUE, FALSE)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[20])).toBe('{"value":"Flag"}');
            done();
        });
        it('UNIQUE - Normal value - II', (done: Function) => {
            helper.edit('T2', '=UNIQUE(M2:N4, "TRUE", TRUE)');
            expect(helper.invoke('getCell', [1, 19]).textContent).toBe('#CALC!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[19])).toBe('{"value":"#CALC!","formula":"=UNIQUE(M2:N4, \\"TRUE\\", TRUE)"}');
            done();
        });
        it('UNIQUE - Normal value - III', (done: Function) => {
            helper.edit('T3', '=UNIQUE(O8:O11, FALSE, TRUE)');
            expect(helper.invoke('getCell', [2, 19]).textContent).toBe('ori');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[19])).toBe('{"value":"ori","formula":"=UNIQUE(O8:O11, FALSE, TRUE)"}');
            done();
        });
        it('UNIQUE - Normal value - IV', (done: Function) => {
            helper.edit('T4', '=UNIQUE(M1:N4, Tue, TRUE)');
            expect(helper.invoke('getCell', [3, 19]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[19])).toBe('{"value":"#NAME?","formula":"=UNIQUE(M1:N4, Tue, TRUE)"}');
            done();
        });
        it('UNIQUE - Normal value - V', (done: Function) => {
            helper.edit('T5', '=UNIQUE(M1:N4, T, T)');
            expect(helper.invoke('getCell', [4, 19]).textContent).toBe('#NAME?');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[19])).toBe('{"value":"#NAME?","formula":"=UNIQUE(M1:N4, T, T)"}');
            done();
        });
        it('UNIQUE - Normal value - VI', (done: Function) => {
            helper.edit('T6', '=UNIQUE(L28, FALSE, )');
            expect(helper.invoke('getCell', [5, 19]).textContent).toBe('12:00AM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[19])).toBe('{"value":"12:00AM","formula":"=UNIQUE(L28, FALSE, )"}');
            done();
        });
        it('UNIQUE - Normal value - VII', (done: Function) => {
            helper.edit('T7', '=UNIQUE(C20:C27, 0, 0)');
            expect(helper.invoke('getCell', [6, 19]).textContent).toBe('Apple');
            expect(helper.invoke('getCell', [7, 19]).textContent).toBe('Ball');
            expect(helper.invoke('getCell', [8, 19]).textContent).toBe('"apple"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[19])).toBe('{"value":"Apple","formula":"=UNIQUE(C20:C27, 0, 0)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[19])).toBe('{"value":"Ball"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[19])).toBe('{"value":"\\"apple\\""}');
            done();
        });
        it('UNIQUE - Normal value - VIII', (done: Function) => {
            helper.edit('T10', '=UNIQUE(C20:C27, FALSE, 1)');
            expect(helper.invoke('getCell', [9, 19]).textContent).toBe('Ball');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[19])).toBe('{"value":"Ball","formula":"=UNIQUE(C20:C27, FALSE, 1)"}');
            done();
        });
        it('UNIQUE - Normal value - IX', (done: Function) => {
            helper.edit('T11', '=UNIQUE(C20:C27, , 1)');
            expect(helper.invoke('getCell', [10, 19]).textContent).toBe('Ball');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[19])).toBe('{"value":"Ball","formula":"=UNIQUE(C20:C27, , 1)"}');
            done();
        });
        it('UNIQUE - Normal value - X', (done: Function) => {
            helper.edit('T12', '=UNIQUE(C20:C27, 0, 1)');
            expect(helper.invoke('getCell', [11, 19]).textContent).toBe('Ball');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[19])).toBe('{"value":"Ball","formula":"=UNIQUE(C20:C27, 0, 1)"}');
            done();
        });
        it('UNIQUE - Normal value - XI', (done: Function) => {
            helper.edit('T13', '=UNIQUE(C20:C27, FALSE, FALSE)');
            expect(helper.invoke('getCell', [12, 19]).textContent).toBe('Apple');
            expect(helper.invoke('getCell', [13, 19]).textContent).toBe('Ball');
            expect(helper.invoke('getCell', [14, 19]).textContent).toBe('"apple"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[19])).toBe('{"value":"Apple","formula":"=UNIQUE(C20:C27, FALSE, FALSE)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[19])).toBe('{"value":"Ball"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[19])).toBe('{"value":"\\"apple\\""}');
            done();
        });
        it('UNIQUE - Normal value - XII', (done: Function) => {
            helper.edit('T16', '=UNIQUE(C20:C27, FALSE, "1")');
            expect(helper.invoke('getCell', [15, 19]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[19])).toBe('{"value":"#VALUE!","formula":"=UNIQUE(C20:C27, FALSE, \\"1\\")"}');
            done();
        });
        it('UNIQUE - Normal value - XIII', (done: Function) => {
            helper.edit('T17', '=UNIQUE(C20:C27, FALSE, "true")');
            expect(helper.invoke('getCell', [16, 19]).textContent).toBe('Ball');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[19])).toBe('{"value":"Ball","formula":"=UNIQUE(C20:C27, FALSE, \\"true\\")"}');
            done();
        });
        it('UNIQUE - Normal value - XIV', (done: Function) => {
            helper.edit('T18', '=UNIQUE(C20:C27, FALSE, "0")');
            expect(helper.invoke('getCell', [17, 19]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[19])).toBe('{"value":"#VALUE!","formula":"=UNIQUE(C20:C27, FALSE, \\"0\\")"}');
            done();
        });
        it('UNIQUE - Cell reference - I', (done: Function) => {
            helper.edit('T19', '=UNIQUE(L6:N6, 59, FALSE)');
            expect(helper.invoke('getCell', [18, 19]).textContent).toBe('yes');
            expect(helper.invoke('getCell', [18, 20]).textContent).toBe('Flag');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[19])).toBe('{"value":"yes","formula":"=UNIQUE(L6:N6, 59, FALSE)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[20])).toBe('{"value":"Flag"}');
            done();
        });
        it('UNIQUE - Cell reference - II', (done: Function) => {
            helper.edit('U2', '=UNIQUE(L6:N6, L21, L25)');
            expect(helper.invoke('getCell', [1, 20]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[20])).toBe('{"value":"#VALUE!","formula":"=UNIQUE(L6:N6, L21, L25)"}');
            done();
        });
        it('UNIQUE - Cell reference - III', (done: Function) => {
            helper.edit('U3', '=UNIQUE(D27:D29, I23, I25)');
            expect(helper.invoke('getCell', [2, 20]).textContent).toBe('#DIV/0!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[20])).toBe('{"value":"#DIV/0!","formula":"=UNIQUE(D27:D29, I23, I25)"}');
            done();
        });
        it('UNIQUE - Cell reference - IV', (done: Function) => {
            helper.edit('U4', '=UNIQUE(D27:D29,TRUE, I25)');
            expect(helper.invoke('getCell', [3, 20]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[20])).toBe('{"value":"#REF!","formula":"=UNIQUE(D27:D29,TRUE, I25)"}');
            done();
        });
        it('UNIQUE - Cell reference - V', (done: Function) => {
            helper.edit('U5', '=UNIQUE(L21:L30, FALSE, TRUE)');
            expect(helper.invoke('getCell', [7, 20]).textContent).toBe('567.9');
            expect(helper.invoke('getCell', [9, 20]).textContent).toBe('44989');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[20])).toBe('{"value":"567.9"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[20])).toBe('{"value":"44989"}');
            done();
        });
        it('UNIQUE - Cell reference - VI', (done: Function) => {
            helper.edit('S1', '=UNIQUE(L21:L30, TRUE, FALSE)');
            expect(helper.invoke('getCell', [5, 18]).textContent).toBe('TRUE');
            expect(helper.invoke('getCell', [7, 18]).textContent).toBe('12:00AM');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[18])).toBe('{"value":"True"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[18])).toBe('{"value":"12:00AM"}');
            done();
        });
        it('UNIQUE - Cell Ref - I', (done: Function) => {
            helper.edit('V1', '=UNIQUE($C$20:$C$27, FALSE, 1)');
            expect(helper.invoke('getCell', [0, 21]).textContent).toBe('Ball');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[21])).toBe('{"value":"Ball","formula":"=UNIQUE($C$20:$C$27, FALSE, 1)"}');
            done();
        });
        it('UNIQUE - Cell Ref - II', (done: Function) => {
            helper.edit('V2', '=UNIQUE($C20:C$27, 0, 0)');
            expect(helper.invoke('getCell', [1, 21]).textContent).toBe('Apple');
            expect(helper.invoke('getCell', [2, 21]).textContent).toBe('Ball');
            expect(helper.invoke('getCell', [3, 21]).textContent).toBe('"apple"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[21])).toBe('{"value":"Apple","formula":"=UNIQUE($C20:C$27, 0, 0)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[21])).toBe('{"value":"Ball"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[21])).toBe('{"value":"\\"apple\\""}');
            done();
        });
        it('UNIQUE - Different datatypes - I', (done: Function) => {
            helper.edit('W1', '=UNIQUE(Q21:Q28, 0, 1)');
            expect(helper.invoke('getCell', [0, 22]).textContent).toBe('22/2');
            expect(helper.invoke('getCell', [1, 22]).textContent).toBe('15-3');
            expect(helper.invoke('getCell', [2, 22]).textContent).toBe('10.009+E8');
            expect(helper.invoke('getCell', [3, 22]).textContent).toBe('!True');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[22])).toBe('{"value":"22/2","formula":"=UNIQUE(Q21:Q28, 0, 1)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[22])).toBe('{"value":"15-3"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[22])).toBe('{"value":"10.009+E8"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[22])).toBe('{"value":"!True"}');
            done();
        });
        it('UNIQUE - Different datatypes - II', (done: Function) => {
            helper.edit('W5', '=UNIQUE(2+2, 0, 0)');
            expect(helper.invoke('getCell', [4, 22]).textContent).toBe('4');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[22])).toBe('{"value":"4","formula":"=UNIQUE(2+2, 0, 0)"}');
            done();
        });
        it('UNIQUE - Different datatypes - III', (done: Function) => {
            helper.edit('W5', '=UNIQUE(Q21:Q24, 0, 0)');
            expect(helper.invoke('getCell', [4, 22]).textContent).toBe('6+2.83');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[22])).toBe('{"value":"6+2.83","formula":"=UNIQUE(Q21:Q24, 0, 0)"}');
            done();
        });
        it('UNIQUE - Different datatypes - IV', (done: Function) => {
            helper.edit('W9', '=UNIQUE(M19:M29, 0, 1)');
            expect(helper.invoke('getCell', [8, 22]).textContent).toBe('123Hello');
            expect(helper.invoke('getCell', [9, 22]).textContent).toBe('hell');
            expect(helper.invoke('getCell', [10, 22]).textContent).toBe('hi');
            expect(helper.invoke('getCell', [11, 22]).textContent).toBe('@');
            expect(helper.invoke('getCell', [12, 22]).textContent).toBe('A123@!hi');
            expect(helper.invoke('getCell', [13, 22]).textContent).toBe('Jim324');
            expect(helper.invoke('getCell', [14, 22]).textContent).toBe('#Yes!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[22])).toBe('{"value":"123Hello","formula":"=UNIQUE(M19:M29, 0, 1)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[22])).toBe('{"value":"hell"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[22])).toBe('{"value":"hi"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[22])).toBe('{"value":"@"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[22])).toBe('{"value":"A123@!hi"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[22])).toBe('{"value":"Jim324"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[22])).toBe('{"value":"#Yes!"}');
            done();
        });
        it('UNIQUE - Different datatypes - V', (done: Function) => {
            helper.edit('W16', '=UNIQUE(Q21:Q28, 0, 0)');
            expect(helper.invoke('getCell', [15, 22]).textContent).toBe('6+2.83');
            expect(helper.invoke('getCell', [16, 22]).textContent).toBe('2*7');
            expect(helper.invoke('getCell', [17, 22]).textContent).toBe('22/2');
            expect(helper.invoke('getCell', [18, 22]).textContent).toBe('15-3');
            expect(helper.invoke('getCell', [19, 22]).textContent).toBe('10.009+E8');
            expect(helper.invoke('getCell', [20, 22]).textContent).toBe('!True');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[22])).toBe('{"value":"6+2.83","formula":"=UNIQUE(Q21:Q28, 0, 0)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[22])).toBe('{"value":"2*7"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[22])).toBe('{"value":"22/2"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[18].cells[22])).toBe('{"value":"15-3"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[19].cells[22])).toBe('{"value":"10.009+E8"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[20].cells[22])).toBe('{"value":"!True"}');
            done();
        });
        it('UNIQUE - Different datatypes - III', (done: Function) => {
            helper.edit('W22', '=UNIQUE(M19:M29, 0, 0)');
            expect(helper.invoke('getCell', [21, 22]).textContent).toBe('hello123');
            expect(helper.invoke('getCell', [22, 22]).textContent).toBe('h123eLLlo');
            expect(helper.invoke('getCell', [23, 22]).textContent).toBe('123Hello');
            expect(helper.invoke('getCell', [24, 22]).textContent).toBe('hell');
            expect(helper.invoke('getCell', [25, 22]).textContent).toBe('hi');
            expect(helper.invoke('getCell', [26, 22]).textContent).toBe('@');
            expect(helper.invoke('getCell', [27, 22]).textContent).toBe('A123@!hi');
            expect(helper.invoke('getCell', [28, 22]).textContent).toBe('Jim324');
            expect(helper.invoke('getCell', [29, 22]).textContent).toBe('#Yes!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[21].cells[22])).toBe('{"value":"hello123","formula":"=UNIQUE(M19:M29, 0, 0)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[22].cells[22])).toBe('{"value":"h123eLLlo"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[23].cells[22])).toBe('{"value":"123Hello"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[24].cells[22])).toBe('{"value":"hell"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[25].cells[22])).toBe('{"value":"hi"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[26].cells[22])).toBe('{"value":"@"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[27].cells[22])).toBe('{"value":"A123@!hi"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[28].cells[22])).toBe('{"value":"Jim324"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[29].cells[22])).toBe('{"value":"#Yes!"}');
            done();
        });
        it('UNIQUE - Sheets - I', (done: Function) => {
            helper.edit('X1', '=UNIQUE(Sheet1!Q21:Sheet1!Q28, 0, 1)');
            expect(helper.invoke('getCell', [0, 23]).textContent).toBe('22/2');
            expect(helper.invoke('getCell', [1, 23]).textContent).toBe('15-3');
            expect(helper.invoke('getCell', [2, 23]).textContent).toBe('10.009+E8');
            expect(helper.invoke('getCell', [3, 23]).textContent).toBe('!True');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[23])).toBe('{"value":"22/2","formula":"=UNIQUE(Sheet1!Q21:Sheet1!Q28, 0, 1)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[23])).toBe('{"value":"15-3"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[23])).toBe('{"value":"10.009+E8"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[23])).toBe('{"value":"!True"}');
            done();
        });
        it('UNIQUE - Sheets - II', (done: Function) => {
            helper.edit('X5', '=UNIQUE(Sheet1!L6:N6, $L$21, FALSE)');
            expect(helper.invoke('getCell', [4, 23]).textContent).toBe('yes');
            expect(helper.invoke('getCell', [4, 24]).textContent).toBe('Flag');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[23])).toBe('{"value":"yes","formula":"=UNIQUE(Sheet1!L6:N6, $L$21, FALSE)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[24])).toBe('{"value":"Flag"}');
            done();
        });
        it('UNIQUE - Sheets - II', (done: Function) => {
            helper.edit('X6', '=UNIQUE(Sheet1!C$20:Sheet1!$C27, 0, 0)');
            expect(helper.invoke('getCell', [5, 23]).textContent).toBe('Apple');
            expect(helper.invoke('getCell', [6, 23]).textContent).toBe('Ball');
            expect(helper.invoke('getCell', [7, 23]).textContent).toBe('"apple"');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[23])).toBe('{"value":"Apple","formula":"=UNIQUE(Sheet1!C$20:Sheet1!$C27, 0, 0)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[23])).toBe('{"value":"Ball"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[23])).toBe('{"value":"\\"apple\\""}');
            done();
        });
        it('UNIQUE - Sheets - III', (done: Function) => {
            helper.edit('X9', '=UNIQUE(A1:A10, LEN("h"), FALSE)');
            expect(helper.invoke('getCell', [8, 23]).textContent).toBe('1');
            expect(helper.invoke('getCell', [9, 23]).textContent).toBe('Ball');
            expect(helper.invoke('getCell', [10, 23]).textContent).toBe('Cell');
            expect(helper.invoke('getCell', [11, 23]).textContent).toBe('Drink');
            expect(helper.invoke('getCell', [12, 23]).textContent).toBe('Element');
            expect(helper.invoke('getCell', [13, 23]).textContent).toBe('Flag');
            expect(helper.invoke('getCell', [14, 23]).textContent).toBe('Gell');
            expect(helper.invoke('getCell', [15, 23]).textContent).toBe('Hike');
            expect(helper.invoke('getCell', [16, 23]).textContent).toBe('Ink');
            expect(helper.invoke('getCell', [17, 23]).textContent).toBe('Jag');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[8].cells[23])).toBe('{"value":"1","formula":"=UNIQUE(A1:A10, LEN(\\"h\\"), FALSE)"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[9].cells[23])).toBe('{"value":"Ball"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[10].cells[23])).toBe('{"value":"Cell"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[11].cells[23])).toBe('{"value":"Drink"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[12].cells[23])).toBe('{"value":"Element"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[13].cells[23])).toBe('{"value":"Flag"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[14].cells[23])).toBe('{"value":"Gell"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[15].cells[23])).toBe('{"value":"Hike"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[16].cells[23])).toBe('{"value":"Ink"}');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[17].cells[23])).toBe('{"value":"Jag"}');
            done();
        });
    });
    describe('Checking defined names cases ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Adding defined names without reference by changing sheet name ->', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            helper.triggerMouseAction('dblclick', null, helper.getElementFromSpreadsheet('.e-sheet-tab .e-toolbar-items'), helper.getElementFromSpreadsheet('.e-sheet-tab .e-active .e-text-wrap'));
            let editorElem: HTMLInputElement = <HTMLInputElement>helper.getElementFromSpreadsheet('.e-sheet-tab .e-sheet-rename');
            setTimeout(() => {
                editorElem.click();
                editorElem.value = 'Price Details';
                helper.triggerKeyNativeEvent(13, false, false, editorElem);
                expect(spreadsheet.sheets[0].name).toBe('Price Details');
                helper.invoke('selectRange', ['A1']);
                spreadsheet.addDefinedName({ name: 'Hello' });
                expect(spreadsheet.definedNames[0].name).toBe('Hello');
                expect(spreadsheet.definedNames[0].refersTo).toBe("='Price Details'!A1");
                done();
            });
        });
    });

    describe('Improve the formula recalculation performance when deleting the values on the formula dependent cells ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({
                sheets: [{ ranges: [{}] }],
                created: (): void => {
                    const spreadsheet: Spreadsheet = helper.getInstance();
                    spreadsheet.updateCell({ value: '6-6-2024' }, 'A1');
                    spreadsheet.updateCell({ value: '7-7-2024' }, 'A2');
                    spreadsheet.updateCell({ value: '1000000' }, 'A3');
                    for (let index: number = 1; index < 42; index++) {
                        spreadsheet.updateCell({ formula: stringFormat('=62000', index.toString()) }, stringFormat('B{0}', index.toString()));
                        spreadsheet.updateCell({ formula: stringFormat('=F{0}*(DAYS(A2,A1)/((A3/100)/30))', (index - 1).toString()) }, stringFormat('D{0}', index.toString()));
                        spreadsheet.updateCell({ formula: stringFormat('=D{0} - B1', index.toString()) }, stringFormat('E{0}', index.toString()));
                        spreadsheet.updateCell({ formula: stringFormat('=F{1} - E{0}', index.toString(), (index - 1).toString()) }, stringFormat('F{0}', index.toString()));
                    }
                    spreadsheet.updateCell({ formula: '=5300000' }, 'F1');
                    spreadsheet.updateCell({ formula: '=0' }, 'D1');
                }
            }, done);
            function stringFormat(str: string, ...args: string[]): string {
                return str.replace(/{(\d+)}/g, (match, index) => args[index] || '');
            }
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        beforeEach((done: Function) => {
            setTimeout(() => { done(); }, 100);
        });
        it('Deleting single cell with the formula dependent cells', (done: Function) => {
            helper.invoke('selectRange', ['D2']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[1].cells[3].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[3].value).toBeUndefined;
                done();
            });
        });
        it('Deleting in between ranges with the formula dependent cells', (done: Function) => {
            helper.invoke('selectRange', ['E2:F5']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[1].cells[4].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[4].value).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[4].cells[5].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[4].cells[5].value).toBeUndefined;
                done();
            });
        });
        it('Deleting whole ranges of cells with the formula dependent cells', (done: Function) => {
            helper.invoke('selectRange', ['D6:F40']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[5].cells[3].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[5].cells[3].value).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[14].cells[4].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[14].cells[4].value).toBeUndefined;
                helper.click('#spreadsheet_undo');
                helper.click('#spreadsheet_undo');
                helper.click('#spreadsheet_undo');
                done();
            });
        });
        it('Deleting in between ranges with the formula dependent cells and empty cells', (done: Function) => {
            helper.invoke('selectRange', ['E2:H2']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[1].cells[4].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[4].value).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[5].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[5].value).toBeUndefined;
                done();
            });
        });
        it('Deleting in between ranges with in between empty cells and the formula dependent cells', (done: Function) => {
            helper.invoke('selectRange', ['E6']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                helper.invoke('selectRange', ['D4:F8']);
                helper.triggerKeyNativeEvent(46);
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[3].cells[3].formula).toBeUndefined;
                    expect(helper.getInstance().sheets[0].rows[3].cells[3].value).toBeUndefined;
                    expect(helper.getInstance().sheets[0].rows[6].cells[4].formula).toBeUndefined;
                    expect(helper.getInstance().sheets[0].rows[6].cells[4].value).toBeUndefined;
                    done();
                });
            });
        });
        it('Checking formula recalculation for the formula dependent cells while deleting and undo', (done: Function) => {
            helper.invoke('selectRange', ['D2:E8']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[2].cells[5].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[2].cells[5].formula).toBe('=F2 - E3');
                helper.click('#spreadsheet_undo');
                setTimeout(() => {
                    expect(helper.getInstance().sheets[0].rows[2].cells[5].value).toBe('62000');
                    expect(helper.getInstance().sheets[0].rows[2].cells[5].formula).toBe('=F2 - E3');
                    done();
                });
            });
        });
        it('Checking formula recalculation for the formula dependent cells while deleting and redo', (done: Function) => {
            helper.click('#spreadsheet_redo');
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[2].cells[5].value).toBe('0');
                expect(helper.getInstance().sheets[0].rows[2].cells[5].formula).toBe('=F2 - E3');
                helper.click('#spreadsheet_undo');
                helper.click('#spreadsheet_undo');
                done();
            });
        });
        it('Deleting cells with reverse selection', (done: Function) => {
            helper.invoke('selectRange', ['H10:D1']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[9].cells[5].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[9].cells[5].value).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[0].cells[3].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[0].cells[3].value).toBeUndefined;
                done();
            });
        });
        it('Deleting non formula dependent cells', (done: Function) => {
            helper.invoke('selectRange', ['B3']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[2].cells[1].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[2].cells[1].value).toBeUndefined;
                helper.click('#spreadsheet_undo');
                done();
            });
        });
        it('Deleting cells with cut and paste', (done: Function) => {
            helper.invoke('cut', ['E13:F13']).then(() => { helper.invoke('paste', ['H2:I2']); });
            helper.invoke('selectRange', ['H2:I2']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[1].cells[7].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[7].value).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[8].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[1].cells[8].value).toBeUndefined;
                done();
            });
        });
        it('Deleting non formula dependent cells with 0 as cell value', (done: Function) => {
            const spreadsheet: Spreadsheet = helper.getInstance();
            spreadsheet.updateCell({ value: '0' }, 'B3');
            helper.invoke('selectRange', ['B3']);
            helper.triggerKeyNativeEvent(46);
            setTimeout(() => {
                expect(helper.getInstance().sheets[0].rows[2].cells[1].formula).toBeUndefined;
                expect(helper.getInstance().sheets[0].rows[2].cells[1].value).toBeUndefined;
                done();
            });
        });
    });
    describe('EJ2-974770: Aggegrate formula Not displayed the values correctly ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Aggregate valus should be displayed fully for formatted cells', (done: Function) => {
            helper.edit('I2', '0.967896589');
            helper.edit('I3', '0.967896598');
            helper.edit('I4', '0.967896889');
            helper.edit('I5', '0.967896599');
            helper.invoke('selectRange', ['I2:I5']);
            helper.getElement('#' + helper.id + '_number_format').click();
            helper.getElement('#' + helper.id + '_Text').click();
            setTimeout(() => {
                let aggregateBtn: HTMLElement = helper.getElement(`#${helper.id}_aggregate`);
                expect(aggregateBtn).not.toBeNull();
                expect(aggregateBtn.textContent).toBe('Sum: 3.871586675');
                helper.click('#' + helper.id + '_aggregate');
                let Element: NodeListOf<HTMLElement> = document.querySelectorAll("#spreadsheet_aggregate-popup li");
                expect(Element[0].textContent).toBe('Count: 4');
                expect(Element[1].textContent).toBe('Sum: 3.871586675');
                expect(Element[2].textContent).toBe('Avg: 0.96789666875');
                expect(Element[3].textContent).toBe('Min: 0.967896589');
                expect(Element[4].textContent).toBe('Max: 0.967896889');
                done();
            });
        });
    });

    describe('EJ2-971975 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ activeSheetIndex: 0, sheets: [{ ranges: [{ dataSource: defaultData }] },{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{ name: 'IF', rows: [{ index: 4, cells: [{ value: 'Sandals & Floaters'}, { value: '50'}]}]},{},{}] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('Check sheet reference with more than 20 sheets->', (done: Function) => {
            helper.edit('I1', '=Sheet20!A5');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"0","formula":"=Sheet20!A5"}');
            helper.edit('I2', '=Sheet21!C16');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('0');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"0","formula":"=Sheet21!C16"}');
            done();
        });
        it('Check sheet reference with the sheet name as IF->', (done: Function) => {
            helper.edit('I3', '=IF!A5');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('Sandals & Floaters');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"Sandals & Floaters","formula":"=IF!A5"}');
            helper.edit('I4', '=IF!B5');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('50');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"50","formula":"=IF!B5"}');
            done();
        });
    });

    describe('EJ2-975034 ->', () => {
        beforeAll((done: Function) => {
            helper.initializeSpreadsheet({ sheets: [{ ranges: [{ dataSource: defaultData }] }, { ranges: [{ dataSource: defaultData }] }] }, done);
        });
        afterAll(() => {
            helper.invoke('destroy');
        });
        it('INDEX formula with multiple ranges as first argument', (done: Function) => {
            helper.edit('I1', '=INDEX((A2:B8,C2:E8,F2:H8),3,1)');
            expect(helper.invoke('getCell', [0, 8]).textContent).toBe('Formal Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[0].cells[8])).toBe('{"value":"Formal Shoes","formula":"=INDEX((A2:B8,C2:E8,F2:H8),3,1)"}');
            helper.edit('I2', '=INDEX((A2:B8,C2:E8,F2:H8),1,1)');
            expect(helper.invoke('getCell', [1, 8]).textContent).toBe('Casual Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[1].cells[8])).toBe('{"value":"Casual Shoes","formula":"=INDEX((A2:B8,C2:E8,F2:H8),1,1)"}');
            done();
        });
        it('INDEX formula with and without fourth argument', (done: Function) => {
            helper.edit('I3', '=INDEX((A2:B8,C2:E8,F2:H8),1,1,3)');
            expect(helper.invoke('getCell', [2, 8]).textContent).toBe('200');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[2].cells[8])).toBe('{"value":"200","formula":"=INDEX((A2:B8,C2:E8,F2:H8),1,1,3)"}');
            helper.edit('I4', '=INDEX((A2:B8,C2:E8,F2:H8),3,3,2)');
            expect(helper.invoke('getCell', [3, 8]).textContent).toBe('15');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[3].cells[8])).toBe('{"value":"15","formula":"=INDEX((A2:B8,C2:E8,F2:H8),3,3,2)"}');
            done();
        });
        it('INDEX formula with multiple sheet references as first argument', (done: Function) => {
            helper.edit('I5', '=INDEX((Sheet1!A2:C8,Sheet1!D2:F8,Sheet1!G2:H8),2,1,1)');
            expect(helper.invoke('getCell', [4, 8]).textContent).toBe('Sports Shoes');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[4].cells[8])).toBe('{"value":"Sports Shoes","formula":"=INDEX((Sheet1!A2:C8,Sheet1!D2:F8,Sheet1!G2:H8),2,1,1)"}');
            helper.edit('I6', '=INDEX((Sheet1!A2:C8,Sheet1!D2:F8,Sheet1!G2:H8),2,Sheet1!G8,2)');
            expect(helper.invoke('getCell', [5, 8]).textContent).toBe('600');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[5].cells[8])).toBe('{"value":"600","formula":"=INDEX((Sheet1!A2:C8,Sheet1!D2:F8,Sheet1!G2:H8),2,Sheet1!G8,2)"}');
            done();
        });
        it('INDEX formula with multiple references as first argument (invalid case)', (done: Function) => {
            helper.edit('I7', '=INDEX((A2:B8,C2:E8,F2:H8),1,1,4)');
            expect(helper.invoke('getCell', [6, 8]).textContent).toBe('#REF!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[6].cells[8])).toBe('{"value":"#REF!","formula":"=INDEX((A2:B8,C2:E8,F2:H8),1,1,4)"}');
            helper.edit('I8', '=INDEX((A2:B8,C2:E8,F2:H8),3,3,0)');
            expect(helper.invoke('getCell', [7, 8]).textContent).toBe('#VALUE!');
            expect(JSON.stringify(helper.getInstance().sheets[0].rows[7].cells[8])).toBe('{"value":"#VALUE!","formula":"=INDEX((A2:B8,C2:E8,F2:H8),3,3,0)"}');
            done();
        });
    });

});
