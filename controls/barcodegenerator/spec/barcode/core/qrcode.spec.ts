//import { BarcodeGenerator } from "../../../src/barcode/barcode";
import { QRCodeGenerator } from "../../../src/qrcode/qrcode";
import { createElement } from "@syncfusion/ej2-base";
import { ErrorCorrectionLevel, QRCodeVersion } from "../../../src/barcode/enum/enum";
import { profile, inMB, getMemoryProfile } from '../../common.spec';

let element; let length;
function output(barcode: QRCodeGenerator): void {
    // element = barcode.element.childNodes[0].childNodes;
    // length = element.length;
    // let output = 'expect( length ==' + length + '&& (element[Math.round(length/2)] as HTMLElement).getAttribute("x") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") + '"&& ' +
    //     '(element[Math.round(length/2)] as HTMLElement).getAttribute("y") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") + '"&& ' +
    //     '(element[Math.round(length/2)] as HTMLElement).getAttribute("width") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") + '"&& ' +
    //     '(element[Math.round(length/2)] as HTMLElement).getAttribute("height") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") + '").toBe(true);';
    // console.log(output);
}
function output1(barcode: QRCodeGenerator): void {
    element = barcode.element.childNodes[0].childNodes;
    length = element.length;
    let output = 'expect( length ==' + length + '&& (element[Math.round(length/2)] as HTMLElement).getAttribute("x") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") + '"&& ' +
        '(element[Math.round(length/2)] as HTMLElement).getAttribute("y") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") + '"&& ' +
        '(element[Math.round(length/2)] as HTMLElement).getAttribute("width") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") + '"&& ' +
        '(element[Math.round(length/2)] as HTMLElement).getAttribute("height") =="' + (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") + '").toBe(true);';
    console.log(output);
}


let barcode: QRCodeGenerator;
let ele: HTMLElement;

describe('Barcode Control', () => {

    describe('QRCode - Versions and combination of error correction level (binary data)', () => {
        describe('Version1', () => {
            describe('Low error correction', () => {

                const isDef = (o: any) => o !== undefined && o !== null;
                if (!isDef(window.performance)) {
                    console.log("Unsupported environment, window.performance.memory is unavailable");
                    pending(); //Skips test (in Chai)
                    return;
                }

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary1' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary1');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 220 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "64.15384615384616" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.76923076923079" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 225 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "77.59615384615384" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.76923076923079" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary3' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary3');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 216 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "140.326923076923" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.76923076923079" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary4' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary4');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 308 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "111.65000000000008" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version2', () => {
            describe('Low error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary5' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary5');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 321 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "134.9500000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary6' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary6');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 330 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "127.18333333333344" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary7' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary7');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 413 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "120.55882352941171" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary8' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary8');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 314 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "57.28333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
        });
        describe('Version3', () => {
            describe('Low error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary9' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary9');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 458 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "113.70588235294113" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "61.397058823529434" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary10' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary10');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 454 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "65.73529411764707" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary11' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary11');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 441 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "130.8382352941176" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {
                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary12' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary12');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 439 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "120.55882352941171" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
        });
        describe('Version4', () => {
            describe('Low error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary13' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary13');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 579 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "118.39473684210519" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary14' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionaqwsedrfgtyhjqa",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary14');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 560 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "133.72368421052624" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary15' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionasdfvgb",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary15');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 547 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "90.80263157894734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary16' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary16');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 552 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "115.32894736842098" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version5', () => {
            describe('Low error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary17' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary17');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 739 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "108.3214285714285" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary18' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusysdcfvbncfusionsyncfusionsyncfusionsdcfvgbasdfvgaqsdfv",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary18');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 709 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "122.19047619047609" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary19' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary19');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 884 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "115.19565217391299" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {

                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary20' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary20');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 712 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "97.22619047619042" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version6', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary21' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary21');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 875 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "125.32608695652168" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary22' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary22');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 869 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "122.7934782608695" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary23' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary23');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 877 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "97.46739130434779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary24' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary24');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 846 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "77.20652173913041" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.24999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version7', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary25' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary25');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1121 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "141.94" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.91999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary26' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsynncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary26');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1090 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "127.95999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.58999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary27' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncdfghj",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary27');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1032 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "139.60999999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.91999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary28' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusions",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary28');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1066 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "86.01999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.91999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version8', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary29' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary29');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1248 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "137.69444444444443" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "234.61111111111106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.63888888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.63888888888889").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary30' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncf",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary30');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1211 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "132.36111111111103" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.09259259259257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary31' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary31');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1237 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "136.67592592592587" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.09259259259257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary32' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "cfusionsyncfusionsyncfusionsyncfusionsyncfusionsynaswdefrghjsdfghnj",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary32');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1208 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "52.537037037037024" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.09259259259257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version9', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary33' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary33');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 1510 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "225.8706896551725" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "227.16379310344834" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.043103448275861" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.043103448275861").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary34' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfu",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary34');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1443 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "130.12931034482767" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.24137931034487" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.0086206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.0086206896551726").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary35' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfuncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary35');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1642 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "60.540322580645196" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000004" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary36' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionasdfvgbn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary36');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1441 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "47.77586206896552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.24137931034487" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.0086206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.0086206896551726").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version10', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary37' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary37');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1701 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "347.81451612903214" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.72580645161304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.524193548387097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.524193548387097").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary38' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary38');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1649 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "133.8225806451612" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.37096774193553" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary39' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary39');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1694 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "101.87903225806448" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000004" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary40' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary40');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1608 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "143.21774193548376" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.37096774193553" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version11', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary41' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary41');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2032 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "299.4772727272726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.18181818181807" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.068181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.068181818181818").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary42' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusioncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary42');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1917 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "87.6439393939394" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.4848484848485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.7651515151515151" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.7651515151515151").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary43' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusionsyncfusi",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary43');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1941 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "78.81818181818183" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.7651515151515151" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.7651515151515151").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary44' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusionsyncfusionsyncfusionsynncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary44');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1954 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "73.52272727272728" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.4848484848485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.7651515151515151" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.7651515151515151").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version12', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary45' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary45');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2153 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "303.31428571428563" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "229.9214285714285" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.664285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.664285714285715").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary46' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary46');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2167 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "60.05714285714282" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.24999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.6642857142857144" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.6642857142857144").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary47' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary47');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2104 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "144.93571428571408" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.92142857142852" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.6642857142857144" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.6642857142857144").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary48' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusioncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synazsxdcfgbh",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary48');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2163 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "90.01428571428562" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.58571428571423" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.6642857142857144" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.6642857142857144").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version13', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary49' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary49');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2515 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "168.04729729729732" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.94594594594608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.304054054054054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.304054054054054").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary50' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary50');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2526 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "117.3175675675675" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.67567567567563" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.5743243243243243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.5743243243243243").toBe(true);
                    output(barcode);
                    done();
                });
                it('memory leak', () => {
                    profile.sample();
                    let average: any = inMB(profile.averageChange)
                    //Check average change in memory samples to not be over 10MB
                    //expect(average).toBeLessThan(10);
                    let memory: any = inMB(getMemoryProfile())
                    //Check the final memory usage against the first usage, there should be little change if everything was properly deallocated
                    //expect(memory).toBeLessThan(profile.samples[0] + 0.25);
                })

            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary51' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary51');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2403 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "151.9527027027026" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.10135135135131" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.5743243243243243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.5743243243243243").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary52' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion s",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary52');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2432 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "101.57432432432427" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.24999999999996" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.5743243243243243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.5743243243243243").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version14', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary53' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary53');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2748 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "417.4615384615382" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "231.28846153846143" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.980769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.980769230769231").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary54' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion sync",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary54');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2819 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "144.80769230769215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.26282051282054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.4935897435897436" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.4935897435897436").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary55' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary55');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2766 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "65.6474358974359" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.4935897435897436" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.4935897435897436").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary56' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary56');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2748 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "92.53205128205117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.75641025641028" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.4935897435897436" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.4935897435897436").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version15', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary57' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary57');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3108 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "323.95731707317066" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.56097560975607" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.689024390243903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.689024390243903").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary58' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary58');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3102 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "50.274390243902445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000003" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.420731707317073" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.420731707317073").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary59' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusionsyncfusionsyncfusion ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary59');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3041 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "50.274390243902445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.82926829268295" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.420731707317073" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.420731707317073").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary60' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary60');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3021 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "149.7256097560974" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.82926829268295" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.420731707317073" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.420731707317073").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version16', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary61' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary61');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3391 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "108.9651162790698" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary62' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sync",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary62');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3449 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "51.232558139534866" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.89534883720927" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.3546511627906976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.3546511627906976").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary63' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary63');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3378 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "110.8372093023257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.89534883720927" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.3546511627906976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.3546511627906976").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary64' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfu",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary64');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3320 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "70.19767441860463" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.89534883720927" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.3546511627906976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.3546511627906976").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version17', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary65' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary65');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    debugger
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3744 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "415.8666666666669" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.0666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.183333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.183333333333334").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary66' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary66');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3763 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "50.81111111111111" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2944444444444445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2944444444444445").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary67' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion sncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary67');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3695 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "57.28333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.95555555555556" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2944444444444445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2944444444444445").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary68' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary68');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3732 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "67.6388888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2944444444444445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2944444444444445").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version18', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary69' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary69');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4062 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "51.48936170212765" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.28723404255308" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.962765957446808" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.962765957446808").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary70' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synon syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary70');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4049 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "143.37765957446783" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "67.01063829787233" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2393617021276595" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2393617021276595").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary71' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary71');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4072 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "82.64893617021266" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "67.01063829787233" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2393617021276595" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2393617021276595").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary72' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary72');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4151 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "60.340425531914896" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "67.01063829787233" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2393617021276595" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2393617021276595").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version19', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary73' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusioncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary73');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4474 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "349.9642857142856" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary74' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary74');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4447 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "359.4846938775509" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary75' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary75');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4480 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "364.24489795918356" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary76' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusioncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary76');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4496 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "127.55102040816321" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.1020408163264" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.8979591836734695" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.8979591836734695").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version20', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary77' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary77');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4861 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "126.51470588235298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.67647058823508" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary78' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary78');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4450 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "273.8010204081632" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary79' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary79');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4797 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "103.64705882352943" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.67647058823508" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary80' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary80');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4819 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "174.70588235294125" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.00000000000017" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.705882352941177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.705882352941177").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version21', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary81' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary81');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5312 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "399.63207547169776" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "234.44811320754698" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary82' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary82');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5326 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "175.18396226415084" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary83' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary83');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5276 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "426.0377358490562" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary84' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary84');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5313 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "354.1509433962268" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.47169811320776" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.528301886792453" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.528301886792453").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version22', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary85' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary85');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5700 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "33.71363636363637" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000014" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary86' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary86');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5666 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "372.98636363636405" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "234.76818181818194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary87' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary87');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5676 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "250.00000000000017" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.00909090909104" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary88' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary88');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 5660 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "367.81818181818227" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.63636363636385" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.363636363636363" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.363636363636363").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version23', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary89' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary89');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6245 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "450.5131578947378" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.15789473684194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary90' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary90');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6200 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "286.82894736842104" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.15789473684194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary91' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary91');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6179 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "188.61842105263148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.15789473684194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary92' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary92');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6137 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "81.57894736842107" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.0000000000003" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.2105263157894735" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.2105263157894735").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version24', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary93' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary93');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6736 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "269.76694915254257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.29661016949177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary94' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary94');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6579 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "234.18644067796632" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.29661016949177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary95' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "sxdcfvbnmyncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary95');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6554 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "265.8135593220341" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.29661016949177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary96' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary96');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6631 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "290.6779661016949" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.9322033898306" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.067796610169491" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.067796610169491").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version25', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary97' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary97');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7207 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "177.34836065573774" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.4262295081969" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary98' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfu",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary98');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7151 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "269.1188524590165" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.4262295081969" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary99' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary99');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6999 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "89.40163934426228" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2500000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary100' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary100');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 6957 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "470.3278688524581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.0655737704919" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9344262295081966" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9344262295081966").toBe(true);
                    output(barcode);
                    done();
                });
                it('memory leak', () => {
                    profile.sample();
                    let average: any = inMB(profile.averageChange)
                    //Check average change in memory samples to not be over 10MB
                    //expect(average).toBeLessThan(10);
                    let memory: any = inMB(getMemoryProfile())
                    //Check the final memory usage against the first usage, there should be little change if everything was properly deallocated
                    //expect(memory).toBeLessThan(profile.samples[0] + 0.25);
                })

            });
        });
        describe('Version26', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary101' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion  syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary101');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7638 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "113.01190476190469" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.5476190476193" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary102' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary102');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7603 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "342.5595238095243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.5476190476193" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary103' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusioncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary103');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7507 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "46.369047619047606" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.5476190476193" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary104' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary104');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7575 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "417.6190476190466" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.1904761904757" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8095238095238093" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8095238095238093").toBe(true);
                    output(barcode);
                    done();
                });
            });
        });
        describe('Version27', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary105' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary105');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7996 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "145.93461538461543" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary106' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary106');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 8091 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "282.2961538461538" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary107' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary107');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 8032 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "31.10384615384615" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999983" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary108' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary108');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 7959 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "475.23076923076803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "267.6153846153842" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.6923076923076925" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.6923076923076925").toBe(true);
                    done();
                });
            });
        });
        describe('Version28', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary109' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary109');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 8673 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "319.6268656716412" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.76865671641758" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary110' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary110');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 8586 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "44.60074626865672" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.76865671641758" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary111' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary111');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 8629 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "187.33582089552223" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.76865671641758" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary112' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusioncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary112');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 8604 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "192.68656716417934" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.4179104477616" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.582089552238806" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.582089552238806").toBe(true);
                    done();
                });
            });
        });
        describe('Version29', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary113' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary113');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9293 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "361.5543478260866" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary114' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary114');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9189 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "385.2173913043474" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    output(barcode);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary115' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary115');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9199 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "40.41304347826087" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary116' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfus",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary116');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9168 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "361.3043478260862" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "268.04347826086956" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4782608695652173" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4782608695652173").toBe(true);
                    done();
                });
            });
        });
        describe('Version30', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary117' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary117');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9755 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "92.30985915492954" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary118' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusionfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synasdfghjasdefrghdfg",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary118');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9693 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "450.39788732394345" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary119' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary119');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9581 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "417.54577464788713" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.67957746478865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary120' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synsdfghj",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary120');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 9749 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "422.39436619718356" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "268.239436619718" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380281690140845" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380281690140845").toBe(true);
                    done();
                });
            });
        });
        describe('Version31', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary121' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary121');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10357 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "419.3458904109591" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.05479452054803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary122' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusionfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary122');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10305 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "381.0034246575344" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.05479452054803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary123' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary123');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10135 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "77.45890410958907" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary124' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfus",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary124');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10164 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "33.01369863013698" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.71232876712315" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.287671232876712" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.287671232876712").toBe(true);
                    done();
                });
            });
        });
        describe('Version32', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary125' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary125');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10890 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "396.17000000000115" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary126' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary126');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10820 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "277.99000000000063" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.03000000000046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary127' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary127');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10820 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "380.6200000000011" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary128' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synsyncfusion syncfusion syncfusion syncfu",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary128');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 10866 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "198.7999999999998" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.7999999999996" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.2" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.2").toBe(true);
                    done();
                });
            });
        });
        describe('Version33', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary129' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary129');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 11465 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "253.02922077922136" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2500000000005" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary130' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary130');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 11486 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "452.9577922077937" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.19155844155893" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary131' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synazsdfghdfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synsdfghderftghgh",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary131');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 11488 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "34.925324675324674" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2500000000005" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary132' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion s",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary132');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 11442 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "324.80519480519473" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.8831168831168" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.116883116883117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.116883116883117").toBe(true);
                    done();
                });
            });
        });
        describe('Version34', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary133' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary133');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12081 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.28481012658236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary134' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary134');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12094 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "61.03797468354432" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary135' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary135');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12148 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "250.00000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary136' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusi",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary136');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 11995 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "292.5316455696197" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.9620253164552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.037974683544304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.037974683544304").toBe(true);
                    done();
                });
            });
        });
        describe('Version35', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary137' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary137');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12853 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "82.98148148148154" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary138' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary138');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12776 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "293.19444444444395" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary139' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary139');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12618 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "448.6944444444434" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary140' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncsdfgh",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary140');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 12661 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "42.59259259259258" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.0370370370371" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.962962962962963" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.962962962962963").toBe(true);
                    done();
                });
            });
        });
        describe('Version36', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary141' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary141');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 13513 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "238.75903614457823" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary142' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary142');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 13373 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "134.78012048192767" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary143' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary143');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 13327 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "112.2981927710843" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary144' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary144');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 13374 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "192.1686746987952" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.10843373494" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.891566265060241" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.891566265060241").toBe(true);
                    done();
                });
            });
        });
        describe('Version37', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary145' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary145');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14263 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "41.447058823529396" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary146' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusi",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary146');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14143 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "129.25882352941184" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary147' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary147');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 13976 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "255.48823529411797" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary148' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary148');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14021 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "286.7058823529407" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.17647058823485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.823529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.823529411764706").toBe(true);
                    done();

                });
            });
        });
        describe('Version38', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary149' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary149');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14876 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "429.6293103448271" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.56896551724185" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary150' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary150');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14765 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "201.7413793103451" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.56896551724185" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary151' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusionncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary151');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14709 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "461.80172413793036" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.20689655172458" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary152' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary152');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 14629 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "291.37931034482773" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.241379310345" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7586206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7586206896551726").toBe(true);
                    done();
                });
            });
        });
        describe('Version39', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary153' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary153');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 15492 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "121.58146067415716" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.6292134831462" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary154' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusionsyncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary154');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 15466 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "286.691011235955" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.6292134831462" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary155' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfus",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary155');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 15397 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "82.26966292134827" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.00842696629226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary156' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "ncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary156');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 15402 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "360.56179775280924" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.30337078651655" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.696629213483146" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.696629213483146").toBe(true);
                    sessionStorage.clear();
                    window.localStorage.clear();
                    done();

                });
            });
        });

        describe('Version40', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_binary_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sy",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_binary_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 16292 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "229.49450549450518" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.68681318681283" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary157' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary157');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 16379 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "365.34340659340575" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.12362637362602" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary158' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        //type: 'QRCode',
                        value: "fusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion synncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syn",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary158');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 16032 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "175.6675824175823" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.68681318681283" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_binary159' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        //type: 'QRCode',
                        value: "syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion syncfusion sync",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_binary159');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 16170 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "123.4065934065935" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.362637362637" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6373626373626373" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6373626373626373").toBe(true);
                    done();
                });
            });
        });
    });


    ///////////////////divide 

    describe('QRCode - Versions and combination of error correction level (Alpha Numeric data)', () => {
        describe('Version1', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYNM1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 229 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "106.46153846153847" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "225.30769230769226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "17.942307692307693" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "17.942307692307693").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYNM1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 219 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.05769230769226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "207.36538461538458" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "17.942307692307693" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "17.942307692307693").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYNM1234567",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version1 Quartile error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    var children = document.getElementById('QrCode3_AlphaNumeric_Data2').children[0];
                    expect(length == 225&&children.getAttribute("id")==="QrCode3_AlphaNumeric_Data2content" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "142.34615384615387" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "225.30769230769226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "17.942307692307693" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "17.942307692307693").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYM12",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version1 High error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 232 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "214.11538461538458" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "225.30769230769226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "17.942307692307693" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "17.942307692307693").toBe(true);
                    done();
                });
            });
        });
        describe('Version2', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 339 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "141.14999999999998" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "227.70000000000007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "15.55" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "15.55").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 319 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "203.35000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "227.70000000000007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "15.55" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "15.55").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBN",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version2 Quartile error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 310 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "343.3000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "212.15000000000006" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "15.55" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "15.55").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version2 High error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 320 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "203.35000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "227.70000000000007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "15.55" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "15.55").toBe(true);
                    done();
                });
            });
        });
        describe('Version3', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version3 Low error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 440 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "222.55882352941174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "229.52941176470586" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "13.720588235294118" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "13.720588235294118").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version3 Medium error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    // Error scan text
                    output1(barcode);
                    expect(length == 429 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "291.1617647058824" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "229.52941176470586" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "13.720588235294118" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "13.720588235294118").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIO",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version3 Quartile error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 412 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "428.3676470588238" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "215.80882352941174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "13.720588235294118" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "13.720588235294118").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM123456",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 413 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "153.95588235294116" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "229.52941176470586" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "13.720588235294118" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "13.720588235294118").toBe(true);
                    done();
                });
            });
        });
        describe('Version4', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version4 Low error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 574 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "385.0394736842108" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "218.69736842105272" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "12.276315789473685" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "12.276315789473685").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASXDFGSDFGHJZAXSCVBNMASDFGHSSDFV",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version4 Medium error correction Rendering ");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 560 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "385.0394736842108" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "230.97368421052641" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "12.276315789473685" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "12.276315789473685").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASXDFGSDFGHJZAXSCVBNMASDFGHS",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version4 Quartile error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect( length ==552&& (element[Math.round(length/2)] as HTMLElement).getAttribute("x") =="102.6842105263158"&& (element[Math.round(length/2)] as HTMLElement).getAttribute("y") =="230.97368421052641"&& (element[Math.round(length/2)] as HTMLElement).getAttribute("width") =="12.276315789473685"&& (element[Math.round(length/2)] as HTMLElement).getAttribute("height") =="12.276315789473685").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASXDFGSDFGH",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 565 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "372.7631578947371" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "230.97368421052641" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "12.276315789473685" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "12.276315789473685").toBe(true);
                    done();
                });
            });
        });
        describe('Version5', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version5 Low error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 680 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "38.964285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000006" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "11.107142857142858" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "11.107142857142858").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 695 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "294.4285714285714" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "221.03571428571433" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "11.107142857142858" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "11.107142857142858").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASXDFGSDFGHJZAXSCVBNMASDFGHSXDCFV",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 685 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "61.17857142857143" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000006" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "11.107142857142858" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "11.107142857142858").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASXDFGSDFGHJZAXSCVBNM",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 695 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "416.60714285714255" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "221.03571428571433" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "11.107142857142858" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "11.107142857142858").toBe(true);
                    done();
                });
            });
        });
        describe('Version6', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYU",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version6 Low error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 862 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "128.304347826087" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.108695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "10.141304347826088" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "10.141304347826088").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOSXDCFVGBNPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQASDFGHJASDFGHNJMDFGH",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version6 Medium error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 845 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "77.59782608695653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "10.141304347826088" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "10.141304347826088").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 825 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "108.02173913043481" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.108695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "10.141304347826088" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "10.141304347826088").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDF",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version6 High error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 890 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "280.4239130434783" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.108695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "10.141304347826088" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "10.141304347826088").toBe(true);
                    done();
                });
            });
        });
        describe('Version7', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 1087 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "417.9399999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.92000000000013" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "9.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "9.33").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUISXDCFVG",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version7 Medium error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 1047 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "72.72999999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.92000000000013" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "9.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "9.33").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQASXDCFGASDCF",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 1054 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "352.63" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.92000000000013" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "9.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "9.33").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output(barcode);
                    expect(length == 1052 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "445.92999999999984" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.92000000000013" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "9.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "9.33").toBe(true);
                    done();
                });
            });
        });
        describe('Version8', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHASXDCFVGBHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQASDFGHJNASDFGHJSDFGHJ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version8 Low error correction Rendering");
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    output1(barcode);
                    expect(length == 1225 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "206.80555555555551" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.63888888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.63888888888889").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1226 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "319.11111111111126" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "234.61111111111106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.63888888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.63888888888889").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQAWSEDRFSWDFGBHNTGASXDCFVGBN",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1235 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "111.77777777777776" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "234.61111111111106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.63888888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.63888888888889").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQAWSEDRFSWDFGBHNTG",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1235 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "258.63888888888886" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "225.97222222222217" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.63888888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.63888888888889").toBe(true);
                    done();
                });
            });
        });
        describe('Version9', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQSDFGHJWSERFTGYHWERFTGYHSWDEF",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version9 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1447 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "56.9655172413793" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.2068965517242" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.043103448275861" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.043103448275861").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFASDERFTGYHUJIKAZSXDFGHJGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version9 Medium error correction Rendering")
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1423 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "185.65517241379314" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.043103448275861" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.043103448275861").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFG",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1419 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "370.6465517241382" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.2068965517242" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.043103448275861" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.043103448275861").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTY",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version9 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1448 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "290.2155172413795" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.2068965517242" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.043103448275861" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.043103448275861").toBe(true);
                    done();
                });
            });
        });
        describe('Version10', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1658 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "377.91129032258044" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.72580645161304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.524193548387097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.524193548387097").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1631 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "392.9596774193546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.72580645161304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.524193548387097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.524193548387097").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1647 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "265.0483870967743" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.72580645161304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.524193548387097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.524193548387097").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPAASDFGHBAWSEDFGHDFGB",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version10 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1649 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "280.09677419354847" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.72580645161304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.524193548387097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.524193548387097").toBe(true);
                    done();
                });
            });
        });
        describe('Version11', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1871 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "426.7045454545452" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.18181818181807" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.068181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.068181818181818").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIAWSEDRFTGYHAZSXDCFVGUJ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1886 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "129.84090909090907" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2499999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.068181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.068181818181818").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQAZSXDCFVGBHNJMKAZSXDCFGHJASXDFG",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version11 Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1955 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "30.88636363636364" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.18181818181807" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.068181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.068181818181818").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGH",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 1908 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "228.79545454545445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.18181818181807" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.068181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.068181818181818").toBe(true);
                    done();
                });
            });
        });
        describe('Version12', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2154 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "336.6357142857142" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.5857142857142" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.664285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.664285714285715").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQASDFGHJKDCFG",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2113 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "329.9714285714285" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.5857142857142" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.664285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.664285714285715").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2131 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "383.28571428571416" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.5857142857142" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.664285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.664285714285715").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERT",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    // Error scan data
                    console.log("Version12 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2139 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "243.3357142857142" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.5857142857142" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.664285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.664285714285715").toBe(true);
                    done();
                });
            });
        });
        describe('Version13', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version13 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2388 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "218.47972972972983" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.94594594594608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.304054054054054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.304054054054054").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJK",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version13 Medium error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2415 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "313.04054054054075" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.94594594594608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.304054054054054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.304054054054054").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version13 Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2394 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "350.8648648648651" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.94594594594608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.304054054054054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.304054054054054").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDF",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version13 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2407 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "388.6891891891895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.94594594594608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.304054054054054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.304054054054054").toBe(true);
                    done();
                });
            });
        });
        describe('Version14', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2754 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "297.8461538461537" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.26923076923066" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.980769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.980769230769231").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2714 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.0576923076922" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.26923076923066" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.980769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.980769230769231").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPAASDFVGB",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2643 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "184.2115384615384" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.26923076923066" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.980769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.980769230769231").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3047 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "215.86585365853654" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.56097560975607" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.689024390243903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.689024390243903").toBe(true);
                    done();
                });
            });
        });
        describe('Version15', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 2993 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "420.670731707317" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.56097560975607" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.689024390243903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.689024390243903").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3352 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "260.84883720930213" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3001 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "124.84146341463412" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.56097560975607" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.689024390243903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.689024390243903").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3047 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "215.86585365853654" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.56097560975607" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.689024390243903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.689024390243903").toBe(true);
                    done();
                });
            });
        });
        describe('Version16', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3329 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "369.33720930232573" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3357 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "434.4302325581399" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDF",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3354 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "136.08720930232562" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPAS",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3266 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "184.90697674418598" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    done();
                });
            });
        });
        describe('Version17', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3649 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "322.56666666666683" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.0666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.183333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.183333333333334").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3717 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "421.05000000000024" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.0666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.183333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.183333333333334").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3650 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "224.08333333333346" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.0666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.183333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.183333333333334").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3680 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "374.4000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.0666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.183333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.183333333333334").toBe(true);
                    done();
                });
            });
        });
        describe('Version18', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 3992 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "195.40957446808503" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.28723404255308" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.962765957446808" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.962765957446808").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4120 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "274.813829787234" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.28723404255308" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.962765957446808" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.962765957446808").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOP",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version18 Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4060 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "200.37234042553183" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.28723404255308" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.962765957446808" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.962765957446808").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQSDFGHJMKSDFRTGYHJ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version18 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    length = element.length;
                    expect(length == 4064 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "140.81914893617017" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2499999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.962765957446808" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.962765957446808").toBe(true);
                    done();
                });
            });
        });
        describe('Version19', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4299 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "169.07653061224485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "233.7295918367346" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4442 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "140.51530612244895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999991" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "DFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOP",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version19 Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4274 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "269.04081632653055" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQW",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4353 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "294.0816326530612" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.1020408163264" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.8979591836734695" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.8979591836734695").toBe(true);
                    done();
                });
            });
        });
        describe('Version20', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4767 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "153.95588235294116" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999977" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4736 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "144.80882352941177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.67647058823508" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4888 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "144.80882352941177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.67647058823508" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4736 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "47.647058823529406" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.294117647059" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.705882352941177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.705882352941177").toBe(true);
                    done();
                });
            });
        });
        describe('Version21', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5145 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "355.62264150943366" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5194 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "254.4009433962262" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5208 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "355.62264150943366" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJK",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version21 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5127 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "109.62264150943393" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.0000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.528301886792453" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.528301886792453").toBe(true);
                    done();
                });
            });
        });
        describe('Version22', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5553 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "296.65000000000026" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.00909090909104" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5667 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "148.2181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000014" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5676 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "93.08636363636361" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.00909090909104" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version22 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5640 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "284.90909090909116" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.63636363636385" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.363636363636363" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.363636363636363").toBe(true);
                    done();
                });
            });
        });
        describe('Version23', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version23 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5988 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "450.5131578947378" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.06578947368405" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6082 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "57.67105263157896" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.15789473684194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version23 Quartile error correction Rendering")
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6054 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "364.5789473684215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999983" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIO",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5970 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "182.63157894736858" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.7894736842108" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.2105263157894735" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.2105263157894735").toBe(true);
                    done();
                });
            });
        });
        describe('Version24', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6370 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "305.3474576271187" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.29661016949177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6545 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "194.65254237288147" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.29661016949177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6497 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "32.563559322033896" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000026" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6416 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "254.06779661016967" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.9322033898306" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.067796610169491" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.067796610169491").toBe(true);
                    done();
                });
            });
        });
        describe('Version25', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version25 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6991 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "154.405737704918" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.4262295081969" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6990 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "93.22540983606555" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2500000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version25 Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7020 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "238.52868852459034" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.4262295081969" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version25 High error correction Rendering")
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6972 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "340.4918032786883" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.0655737704919" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9344262295081966" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9344262295081966").toBe(true);
                    done();
                });
            });
        });
        describe('Version26', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7382 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "64.88095238095235" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.5476190476193" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7428 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "461.03571428571513" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.84523809523833" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7442 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "242.59523809523833" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.5476190476193" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7449 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "451.9047619047608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.1904761904757" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8095238095238093" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8095238095238093").toBe(true);
                    done();
                });
            });
        });
        describe('Version27', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKL",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version27 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7829 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "321.76923076923094" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8007 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "372.00769230769276" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7961 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "400.71538461538523" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version27 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7955 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "357.0769230769223" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.30769230769187" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.6923076923076925" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.6923076923076925").toBe(true);
                    done();
                });
            });
        });
        describe('Version28', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8385 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "173.41044776119392" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.76865671641758" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8463 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "23.712686567164177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999966" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version28 Quartile error correction Rendering");
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8491 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "152.52238805970146" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.2873134328355" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8468 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "178.3582089552241" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.0000000000004" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.582089552238806" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.582089552238806").toBe(true);
                    done();
                });
            });
        });
        describe('Version29', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9042 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "412.2608695652169" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9013 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "429.16304347826036" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8857 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "239.8586956521738" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8979 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "357.826086956521" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.52173913043475" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4782608695652173" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4782608695652173").toBe(true);
                    done();
                });
            });
        });
        describe('Version30', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version30 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9580 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "197.43661971830977" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999991" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9395 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "213.86267605633793" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9730 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "135.01760563380276" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999991" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9483 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "351.40845070422546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.61971830985885" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380281690140845" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380281690140845").toBe(true);
                    done();
                });
            });
        });
        describe('Version31', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10094 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "218.04794520547955" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.05479452054803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10117 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "464.0787671232879" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.85958904109597" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version31 Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10073 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "297.92808219178096" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.05479452054803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10087 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "240.1369863013697" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.71232876712315" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.287671232876712" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.287671232876712").toBe(true);
                    done();
                });
            });
        });
        describe('Version32', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version32 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10632 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "206.46000000000032" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6082 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "57.67105263157896" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.15789473684194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11276 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "389.34415584415706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10636 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "122.00000000000007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.7999999999996" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.2" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.2").toBe(true);
                    done();
                });
            });
        });
        describe('Version33', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11168 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "465.0746753246769" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11069 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "392.37337662337785" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11285 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "459.0162337662353" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11214 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "340.3896103896103" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.8831168831168" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.116883116883117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.116883116883117").toBe(true);
                    done();
                });
            });
        });
        describe('Version34', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11717 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "196.8544303797469" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11861 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "300.19303797468325" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11910 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "276.5727848101265" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version34 High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11787 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "356.3291139240498" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.9620253164552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.037974683544304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.037974683544304").toBe(true);
                    done();
                });
            });
        });
        describe('Version35', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12643 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "350.7870370370363" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12597 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "22.50925925925926" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12512 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "316.2314814814809" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12542 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "324.0740740740746" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.0370370370371" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.962962962962963" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.962962962962963").toBe(true);
                    done();
                });
            });
        });
        describe('Version36', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13207 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "435.47590361445947" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.62951807228907" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13119 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "160.07228915662645" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13153 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "443.9066265060258" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13214 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "134.33734939759023" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.10843373494" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.891566265060241" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.891566265060241").toBe(true);
                    done();
                });
            });
        });
        describe('Version37', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13803 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "33.21470588235293" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13822 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "406.41470588235353" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.76176470588265" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13744 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "241.76764705882383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13829 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "238.70588235294085" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "274.99999999999955" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.823529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.823529411764706").toBe(true);
                    done();
                });
            });
        });
        describe('Version38', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14412 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "282.17241379310383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.56896551724185" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14399 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "233.9137931034487" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.56896551724185" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14348 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "121.31034482758615" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000048" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14521 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "15.517241379310345" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.241379310345" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7586206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7586206896551726").toBe(true);
                    done();
                });
            });
        });
        describe('Version39', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15410 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "111.09831460674145" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.6292134831462" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15223 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "45.57865168539326" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.6292134831462" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15195 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "270.9662921348315" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.6292134831462" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15283 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "414.4943820224725" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.30337078651655" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.696629213483146" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.696629213483146").toBe(true);
                    done();
                });
            });
        });
        describe('Version40', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("Version40 Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15639 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "411.4807692307682" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999963" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15928 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "378.15934065933976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999963" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUISDFGHJ",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15764 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "137.21978021978026" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.68681318681283" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_AlphaNumeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQDFGHJKLQWERRTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQQWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLZXCVBNM1234567890QWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUIOPASDFGHJKLQWERTYUI",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_AlphaNumeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15852 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "223.62637362637338" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.362637362637" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6373626373626373" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6373626373626373").toBe(true);
                    done();
                });
            });
        });
    });


    ////////////////////////////////divide

    describe('QRCode - Versions and combination of error correction level (Numeric data)', () => {
        describe('Version1', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data1' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data1');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 230 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "113.44230769230765" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "59.288461538461554" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 231 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "135.84615384615378" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "59.288461538461554" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data3' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data3');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 216 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "64.15384615384616" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.76923076923079" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data4' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data4');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 220 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "55.1923076923077" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.76923076923079" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.480769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.480769230769231").toBe(true);
                    done();
                });
            });
        });
        describe('Version2', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data5' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data5');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 307 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "96.11666666666672" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data6' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data6');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 310 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "76.70000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data7' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data7');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 324 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "80.58333333333336" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data8' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data8');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 298 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "100.00000000000006" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
        });
        describe('Version3', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data9' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data9');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 425 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "62.30882352941178" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data10' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data10');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 433 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "65.73529411764707" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data11' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data11');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 427 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "69.16176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data12' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data12');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 433 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "113.70588235294113" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.82352941176472" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.426470588235294" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.426470588235294").toBe(true);
                    done();
                });
            });
        });
        describe('Version4', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data13' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data13');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 552 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "66.2763157894737" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data14' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data14');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 568 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "66.2763157894737" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data15' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data15');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 567 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "103.06578947368416" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data16' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data16');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 555 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "139.85526315789468" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
        });
        describe('Version5', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data17' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data17');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 697 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "77.8095238095238" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data18' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data18');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 695 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "80.58333333333331" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data19' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data19');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 683 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "99.99999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data20' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567811111",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data20');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 712 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "72.26190476190476" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    done();
                });
            });
        });
        describe('Version6', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data21' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data21');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 849 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "132.92391304347822" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data22' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data22');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 831 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "97.46739130434779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data23' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data23');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 819 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "62.01086956521738" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data24' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data24');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 813 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "105.0652173913043" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.7173913043478" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.532608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.532608695652174").toBe(true);
                    done();
                });
            });
        });
        describe('Version7', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data25' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data25');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1038 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "125.62999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.91999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data26' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data26');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1058 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "51.06999999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.91999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data27' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data27');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1008 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "102.32999999999996" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.91999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data28' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data28');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1020 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "51.06999999999999" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.24999999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.33" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.33").toBe(true);
                    done();
                });
            });
        });
        describe('Version8', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data29' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data29');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1234 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "241.36111111111106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "234.61111111111106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.63888888888889" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.63888888888889").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data30' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901212345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data30');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode)

                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1227 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "102.15740740740733" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.09259259259257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data31' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data31');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1249 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "71.95370370370367" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.09259259259257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data32' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data32');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1219 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "125.88888888888879" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "63.935185185185155" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    done();
                });
            });
        });
        describe('Version9', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data33' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data33');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1438 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "56.9655172413793" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.2068965517242" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "8.043103448275861" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "8.043103448275861").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data34' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data34');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1446 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "47.77586206896552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.24137931034487" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.0086206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.0086206896551726").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data35' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data35');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1431 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "110.04310344827593" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.24137931034487" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.0086206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.0086206896551726").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data36' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data36');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1425 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "87.94827586206901" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.24137931034487" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.0086206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.0086206896551726").toBe(true);
                    done();
                });
            });
        });
        describe('Version10', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data37' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data37');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1653 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "265.0483870967743" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.72580645161304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.524193548387097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.524193548387097").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data38' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data38');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1642 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "135.7016129032257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.49193548387102" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data39' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data39');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1644 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "120.66935483870961" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.37096774193553" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data40' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data40');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1662 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "73.6935483870968" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000004" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.8790322580645162" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.8790322580645162").toBe(true);
                    done();
                });
            });
        });
        describe('Version11', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data41' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data41');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1900 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "207.590909090909" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.18181818181807" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "7.068181818181818" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "7.068181818181818").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data42' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data42');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1968 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "131.77272727272725" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.4848484848485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.7651515151515151" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.7651515151515151").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data43' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data43');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1878 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "124.71212121212123" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.4848484848485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.7651515151515151" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.7651515151515151").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data44' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data44');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1955 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "144.12878787878776" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.4848484848485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.7651515151515151" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.7651515151515151").toBe(true);
                    done();
                });
            });
        });
        describe('Version12', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data45' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data45');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2072 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "256.66428571428565" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999991" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.664285714285715" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.664285714285715").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data46' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data46');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2159 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "88.34999999999991" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.58571428571423" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.6642857142857144" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.6642857142857144").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data47' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data47');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2120 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "151.59285714285693" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.92142857142852" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.6642857142857144" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.6642857142857144").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data48' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data48');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2166 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "116.642857142857" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.58571428571423" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.6642857142857144" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.6642857142857144").toBe(true);
                    done();
                });
            });
        });
        describe('Version13', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data49' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data49');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2355 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "281.52027027027043" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.94594594594608" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "6.304054054054054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "6.304054054054054").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data50' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data50');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2387 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "65.36486486486484" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.67567567567563" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.5743243243243243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.5743243243243243").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data51' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data51');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2412 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "125.18918918918911" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.67567567567563" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.5743243243243243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.5743243243243243").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data52' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data52');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2420 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "122.04054054054046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.10135135135131" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.5743243243243243" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.5743243243243243").toBe(true);
                    done();
                });
            });
        });
        describe('Version14', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data53' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data53');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2768 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "357.65384615384596" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.26923076923066" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.980769230769231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.980769230769231").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data54' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data54');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2685 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "98.50641025641012" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.75641025641028" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.4935897435897436" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.4935897435897436").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data55' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data55');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2689 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "129.87179487179463" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.75641025641028" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.4935897435897436" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.4935897435897436").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data56' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data56');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2740 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "149.2884615384614" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.75641025641028" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.4935897435897436" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.4935897435897436").toBe(true);
                    done();
                });
            });
        });
        describe('Version15', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data57' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data57');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3006 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "341.02439024390236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.56097560975607" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.689024390243903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.689024390243903").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data58' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data58');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3101 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "70.16463414634148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000003" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.420731707317073" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.420731707317073").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data59' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data59');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3009 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "125.57317073170738" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.40853658536588" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.420731707317073" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.420731707317073").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data60' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data60');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 2998 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "65.90243902439026" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.25000000000003" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.420731707317073" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.420731707317073").toBe(true);
                    done();
                });
            });
        });
        describe('Version16', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data61' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data61');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3359 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "141.51162790697677" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.82558139534865" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.424418604651163" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.424418604651163").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data62' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data62');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3366 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "93.22674418604657" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.89534883720927" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.3546511627906976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.3546511627906976").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data63' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data63');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3394 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "148.76744186046537" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.54069767441857" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.3546511627906976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.3546511627906976").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data64' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data64');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3245 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "58.00581395348834" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.89534883720927" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.3546511627906976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.3546511627906976").toBe(true);
                    done();
                });
            });
        });
        describe('Version17', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data65' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data65');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3659 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "53.033333333333346" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.0666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.183333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.183333333333334").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data66' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data66');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3638 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "146.60000000000042" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.66111111111111" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2944444444444445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2944444444444445").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data67' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data67');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3653 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "145.30555555555597" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.66111111111111" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2944444444444445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2944444444444445").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data68' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data68');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3710 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "48.22222222222222" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.95555555555556" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2944444444444445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2944444444444445").toBe(true);
                    done();
                });
            });
        });
        describe('Version18', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data69' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data69');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4047 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "76.30319148936168" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.28723404255308" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.962765957446808" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.962765957446808").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data70' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data70');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4102 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "145.85638297872316" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.77127659574468" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2393617021276595" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2393617021276595").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data71' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "67890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data71');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4011 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "123.5478723404252" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "67.01063829787233" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2393617021276595" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2393617021276595").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data72' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data72');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 3991 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "140.8989361702125" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "67.01063829787233" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "1.2393617021276595" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "1.2393617021276595").toBe(true);
                    done();
                });
            });
        });
        describe('Version19', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data73' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data73');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4375 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "54.83163265306122" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data74' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data74');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4402 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "126.23469387755098" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data75' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data75');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4367 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "197.63775510204076" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.48979591836726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.760204081632653" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.760204081632653").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data76' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data76');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4301 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "421.428571428572" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "265.2040816326529" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.8979591836734695" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.8979591836734695").toBe(true);
                    done();
                });
            });
        });
        describe('Version20', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data77' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data77');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4700 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "405.49999999999943" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999977" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data78' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data78');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4747 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "76.20588235294117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.67647058823508" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data79' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data79');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4736 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "172.24999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999977" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.573529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.573529411764706").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data80' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data80');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 4815 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "259.4117647058826" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.294117647059" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.705882352941177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.705882352941177").toBe(true);
                    done();
                });
            });
        });
        describe('Version21', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data81' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data81');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5135 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "29.95283018867925" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2499999999998" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data82' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data82');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5192 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "131.17452830188674" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data83' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data83');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5181 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "236.79716981132057" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data84' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data84');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5175 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "295.2830188679248" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.47169811320776" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.528301886792453" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.528301886792453").toBe(true);
                    done();
                });
            });
        });
        describe('Version22', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data85' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data85');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5529 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "245.75909090909107" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.00909090909104" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data86' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data86');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5607 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "322.09545454545486" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.00909090909104" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.240909090909091" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.240909090909091").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data87' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data87');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5181 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "236.79716981132057" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.8490566037734" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.400943396226415" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.400943396226415").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data88' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data88');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 5658 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "136.54545454545448" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "270.63636363636385" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.363636363636363" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.363636363636363").toBe(true);
                    done();
                });
            });
        });
        describe('Version23', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data89' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data89');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6004 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "425.9605263157903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "235.06578947368405" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.092105263157895" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.092105263157895").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data90' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data90');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7900 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.05769230769215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data91' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data91');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10681 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "256.22000000000054" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data92' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data92');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13897 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "187.88235294117632" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.17647058823485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.823529411764706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.823529411764706").toBe(true);
                    done();
                });
            });
        });
        describe('Version24', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data93' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data93');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6450 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "447.6694915254231" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.29661016949177" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.9533898305084745" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.9533898305084745").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data94' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data94');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8479 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "37.63805970149254" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.24999999999966" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data95' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data95');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11209 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "325.7305194805204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data96' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data96');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15017 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "171.7977528089887" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.30337078651655" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.696629213483146" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.696629213483146").toBe(true);
                    done();
                });
            });
        });
        describe('Version25', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data97' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data97');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 6826 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "215.5860655737706" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.4262295081969" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8237704918032787" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8237704918032787").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data98' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data98');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8998 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "202.67391304347822" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data99' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data99');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11765 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "111.23101265822788" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data100' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data100');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15925 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "310.6593406593401" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.362637362637" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6373626373626373" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6373626373626373").toBe(true);
                    done();
                });
            });
        });
        describe('Version26', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data101' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data101');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7405 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "375.880952380953" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.5476190476193" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.7023809523809526" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.7023809523809526").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data102' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data102');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9563 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "105.45070422535207" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data103' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data103');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13253 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "424.2349397590377" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.62951807228907" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data104' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789056789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789090",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data104');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7375 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "139.5238095238095" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.1904761904757" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8095238095238093" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8095238095238093").toBe(true);
                    done();
                });
            });
        });
        describe('Version27', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data105' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data105');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 7832 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.05769230769215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.6615384615383" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.5884615384615386" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.5884615384615386").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data106' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678920123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678900123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data106');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8976 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "131.68478260869577" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data107' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data107');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8951 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "118.16304347826097" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data108' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567811234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data108');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9029 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "48.2608695652174" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "274.99999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4782608695652173" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4782608695652173").toBe(true);
                    done();
                });
            });
        });
        describe('Version28', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data109' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data109');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8395 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "277.8507462686563" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.76865671641758" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.4813432835820897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.4813432835820897").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data110' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data110');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9588 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "177.72535211267598" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data111' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data111');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9561 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "92.30985915492954" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data112' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678920123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678112345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data112');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log('Version28 High error correction Rendering');
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9482 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "229.71830985915463" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "268.239436619718" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380281690140845" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380281690140845").toBe(true);
                    done();
                });
            });
        });
        describe('Version29', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data113' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data113');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 8928 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "141.82608695652183" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.86956521739117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.380434782608696" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.380434782608696").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data114' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data114');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10142 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "198.8767123287672" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.05479452054803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data115' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data115');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10079 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "253.19520547945217" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.05479452054803" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data116' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789201234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456781012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data116');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10225 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "394.657534246576" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.71232876712315" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.287671232876712" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.287671232876712").toBe(true);
                    done();
                });
            });
        });
        describe('Version30', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data117' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data117');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9602 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "75.88380281690138" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "239.96478873239428" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.285211267605634" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.285211267605634").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data118' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data118');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10708 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "302.87000000000074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data119' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567811234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data119');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10645 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "253.11000000000053" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data120' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data120');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10758 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "179.59999999999988" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.7999999999996" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.2" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.2").toBe(true);
                    done();
                });
            });
        });
        describe('Version31', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data121' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data121');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 9979 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "435.3219178082194" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "236.85958904109597" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.1952054794520546" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.1952054794520546").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data122' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data122');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11249 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "310.58441558441643" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data123' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data123');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11329 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "289.3798701298709" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.19155844155893" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data124' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data124');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11289 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "156.49350649350646" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.8831168831168" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.116883116883117" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.116883116883117").toBe(true);
                    done();
                });
            });
        });
        describe('Version32', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data125' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data125');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 10521 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "333.9700000000009" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.14000000000047" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.11" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.11").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data126' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data126');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11790 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.28481012658236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data127' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data127');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11822 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "72.8481012658228" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data128' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data128');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11849 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "76.83544303797471" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.9620253164552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.037974683544304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.037974683544304").toBe(true);
                    done();
                });
            });
        });
        describe('Version33', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data129' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data129');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11175 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "304.52597402597485" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.22077922077972" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.029220779220779" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.029220779220779").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data130' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data130');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12547 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "129.05555555555566" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data131' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data131');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12496 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "45.546296296296305" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2499999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data132' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data132');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12507 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "113.70370370370367" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.0000000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.962962962962963" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.962962962962963").toBe(true);
                    done();
                });
            });
        });
        describe('Version34', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data133' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data133');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11725 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "368.1012658227839" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.34493670886084" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data134' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data134');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12547 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "129.05555555555566" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data135' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data135');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12496 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "45.546296296296305" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2499999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data136' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data136');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11865 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "134.5569620253165" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.9620253164552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.037974683544304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.037974683544304").toBe(true);
                    done();
                });
            });
        });
        describe('Version35', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data137' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data137');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12566 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "391.101851851851" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data138' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data138');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12547 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "129.05555555555566" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.37037037037007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data139' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data139');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 12496 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "45.546296296296305" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2499999999997" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8796296296296298" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8796296296296298").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data140' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data140');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11865 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "134.5569620253165" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "271.9620253164552" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.037974683544304" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.037974683544304").toBe(true);
                    done();
                });
            });
        });
        describe('Version36', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data141' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data141');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13167 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "131.96987951807225" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data142' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789201234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456781",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data142');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13074 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "219.0873493975903" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.4397590361445" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data143' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data143');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13153 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "373.6506024096396" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "237.62951807228907" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.8102409638554215" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.8102409638554215").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data144' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789201234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456781",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data144');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13197 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "64.93975903614458" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.0000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.891566265060241" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.891566265060241").toBe(true);
                    done();
                });
            });
        });
        describe('Version37', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data145' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data145');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13841 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "173.1647058823531" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data146' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data146');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13848 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "387.2058823529417" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.2500000000003" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data147' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678921234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567892012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data147');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13695 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "101.81764705882357" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.50588235294148" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7441176470588236" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7441176470588236").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data148' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data148');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 13197 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "64.93975903614458" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "275.0000000000002" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.891566265060241" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.891566265060241").toBe(true);
                    done();
                });
            });
        });
        describe('Version38', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data149' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data149');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14484 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "426.9482758620685" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.56896551724185" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
                // it('memory leak', () => {
                //     profile.sample();
                //     let average: any = inMB(profile.averageChange)
                //     //Check average change in memory samples to not be over 10MB
                //     //expect(average).toBeLessThan(10);
                //     let memory: any = inMB(getMemoryProfile())
                //     //Check the final memory usage against the first usage, there should be little change if everything was properly deallocated
                //     //expect(memory).toBeLessThan(profile.samples[0] + 0.25);
                // })

            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data150' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data150');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes;
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14432 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "464.48275862068897" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.56896551724185" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data151' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data151');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14392 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "97.18103448275858" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000048" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6810344827586206" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6810344827586206").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data152' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data152');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 14436 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "92.75862068965522" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.241379310345" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7586206896551726" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7586206896551726").toBe(true);
                    done();
                });
            });
        });
        describe('Version39', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data153' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data153');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 11894 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "123.04113924050637" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.29746835443046" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.9525316455696204" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.9525316455696204").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data154' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data154');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15274 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "202.82584269662925" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.6292134831462" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data155' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data155');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15081 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "302.41573033707846" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "243.25000000000014" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6207865168539324" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6207865168539324").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data156' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data156');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15213 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "201.46067415730317" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "269.6067415730334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.696629213483146" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.696629213483146").toBe(true);
                    done();
                });
            });
        });
        describe('Version40', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data157' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data157');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15756 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "378.15934065933976" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.68681318681283" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data158' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value: "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data158');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15938 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "175.6675824175823" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "240.68681318681283" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data159' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '500px',
                        ////type: 'QRCode',
                        value
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data159');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15756 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "232.05769230769198" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "238.12362637362602" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.5631868131868134" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.5631868131868134").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode3_Numeric_Data160' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '500px', height: '550px',
                        ////type: 'QRCode',
                        value: "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789123456789012345678900123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567891234567890123456789001234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678912345678901234567890012345678901234567890123456789012345678901234567890",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode3_Numeric_Data160');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 15969 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "271.0989010989007" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "272.362637362637" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.6373626373626373" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.6373626373626373").toBe(true);
                    done();
                });
            });
        });
    });


    ////////////////////////////////divide

    describe('QRCode - user define version', () => {

        describe('Alpha Numeric data', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_AlphaNumeric_version1' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM 1234567890  $%*+-./:",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG',
                        version: QRCodeVersion.Version04
                    });
                    barcode.appendTo('#QrCode_AlphaNumeric_version1');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("QRCode - user define version Alpha Numeric data Low error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 549 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "118.39473684210519" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_AlphaNumeric_version2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM 1234567890  $%*+-./:",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG',
                        version: QRCodeVersion.Version05
                    });
                    barcode.appendTo('#QrCode_AlphaNumeric_version2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("QRCode - user define version Alpha Numeric data Medium error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 688 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "99.99999999999994" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_AlphaNumeric_version3' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM 1234567890  $%*+-./:",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG',
                        version: QRCodeVersion.Version04
                    });
                    barcode.appendTo('#QrCode_AlphaNumeric_version3');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("QRCode - user define version Alpha Numeric data Quartile error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 520 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "109.19736842105257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_AlphaNumeric_version4' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "QWERTYUIOPASDFGHJKLZXCVBNM 1234567890  $%*+-./:",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        version: QRCodeVersion.Version08,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_AlphaNumeric_version4');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    console.log("QRCode - user define version Alpha Numeric data High error correction Rendering");
                    output1(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 1248 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "46.06481481481481" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "66.09259259259257" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.1574074074074074" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.1574074074074074").toBe(true);
                    done();
                });
            });
        });
        describe('Numeric data', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Numeric_version1' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG',
                        version: QRCodeVersion.Version02
                    });
                    barcode.appendTo('#QrCode_Numeric_version1');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 332 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "61.166666666666664" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Numeric_version2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG',
                        version: QRCodeVersion.Version02
                    });
                    barcode.appendTo('#QrCode_Numeric_version2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 312 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "49.516666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Numeric_version3' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG',
                        version: QRCodeVersion.Version02
                    });
                    barcode.appendTo('#QrCode_Numeric_version3');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 309 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "68.93333333333334" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Numeric_version4' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "1234567890",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        version: QRCodeVersion.Version02,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_Numeric_version4');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 308 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "88.35000000000004" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
        });
        describe('Binary data', () => {
            describe('Low error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Binary_version1' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "asxdfgh1234567[]",
                        margin: { left: 0, right: 0, top: 10, bottom: 10 },

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Low, mode: 'SVG',
                        version: QRCodeVersion.Version02
                    });
                    barcode.appendTo('#QrCode_Binary_version1');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 316 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "134.9500000000001" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
                it('property change', (done: Function) => {
                    barcode.mode = 'Canvas'
                    barcode.value = 'rrrrr';
                    barcode.width = 300;
                    barcode.height = 300;
                    barcode.backgroundColor = 'red';
                    barcode.dataBind();
                    done();
                });
            });
            describe('Medium error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Binary_version2' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "asxdfgh1234567",

                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Medium, mode: 'SVG',
                        version: QRCodeVersion.Version02
                    });
                    barcode.appendTo('#QrCode_Binary_version2');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 330 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "72.81666666666668" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "64.36666666666666" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.8833333333333333" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.8833333333333333").toBe(true);
                    done();
                });
            });
            describe('Quartile error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Binary_version3' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "asxdfgh1234567",
                        xDimension: 3,
                        errorCorrectionLevel: ErrorCorrectionLevel.Quartile, mode: 'SVG',
                        version: QRCodeVersion.Version05
                    });
                    barcode.appendTo('#QrCode_Binary_version3');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 665 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "91.67857142857139" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.4761904761905" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "2.7738095238095237" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "2.7738095238095237").toBe(true);
                    done();
                });
            });
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Binary_version4' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        value: "asxdfgh1234567[]",
                        xDimension: 3,
                        version: QRCodeVersion.Version04,
                        errorCorrectionLevel: ErrorCorrectionLevel.High, mode: 'SVG'
                    });
                    barcode.appendTo('#QrCode_Binary_version4');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    output(barcode);
                    element = barcode.element.childNodes[0].childNodes; length = element.length;
                    expect(length == 531 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "124.5263157894736" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "65.18421052631581" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                    done();
                });
            });
            //on propertychange
            describe('High error correction', () => {


                beforeAll((): void => {
                    ele = createElement('div', { id: 'QrCode_Binary_version4' });
                    document.body.appendChild(ele);
                    barcode = new QRCodeGenerator({
                        width: '200px', height: '150px',
                        ////type: 'QRCode',
                        mode: 'Canvas',
                        value: "asxdfgh1234567[]",
                        xDimension: 3,
                        version: QRCodeVersion.Version04,
                        errorCorrectionLevel: ErrorCorrectionLevel.High,
                    });
                    barcode.appendTo('#QrCode_Binary_version4');
                });

                afterAll((): void => {
                    barcode.destroy();
                    ele.remove();
                });

                it('Rendering', (done: Function) => {
                    barcode.value = 'rrrrr';
                    barcode.width = 300;
                    barcode.height = 300;
                    barcode.backgroundColor = 'red';
                    barcode.dataBind();
                    done();
                });
            });
        });


    });

    describe('User Not denfied error coorection level', () => {

        describe('Binary Data', () => {


            beforeAll((): void => {
                ele = createElement('div', { id: 'QrCode_Binary_version5' });
                document.body.appendChild(ele);
                barcode = new QRCodeGenerator({
                    width: '200px', height: '150px',
                    ////type: 'QRCode',
                    value: "1234567[]",
                    xDimension: 3,
                    version: QRCodeVersion.Version04,
                    mode: 'SVG'
                });
                barcode.appendTo('#QrCode_Binary_version5');
            });

            afterAll((): void => {
                barcode.destroy();
                ele.remove();
            });

            it('Rendering', (done: Function) => {
                element = barcode.element.childNodes[0].childNodes; length = element.length;
                output(barcode);
                expect(length == 544 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "139.85526315789468" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "62.118421052631604" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "3.0657894736842106" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "3.0657894736842106").toBe(true);
                done();
            });
        });
    });
    describe('margin coverage issue', () => {

        describe('margin coverage1 issue', () => {


            beforeAll((): void => {
                ele = createElement('div', { id: 'QrCode_Binary_version5' });
                document.body.appendChild(ele);
                barcode = new QRCodeGenerator({
                    width: '200px', height: '200px',
                    value: "bar",
                    displayText: {
                        //position:'Top',
                        margin: { top: 20, bottom: 20 }
                    },
                    mode: 'SVG'
                });
                barcode.appendTo('#QrCode_Binary_version5');
            });

            afterAll((): void => {
                barcode.destroy();
                ele.remove();
            });

            it('Rendering', (done: Function) => {
                element = barcode.element.childNodes[0].childNodes; length = element.length;
                output1(barcode);
                expect(length == 229 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "46.480769230769226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "68.38461538461537" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.865384615384615" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.865384615384615").toBe(true);
                done();
            });
        });
        describe('margin coverage2 issue', () => {


            beforeAll((): void => {
                ele = createElement('div', { id: 'QrCode_Binary_version5' });
                document.body.appendChild(ele);
                barcode = new QRCodeGenerator({
                    width: '200px', height: '200px',
                    value: "bar",
                    displayText: {
                        position: 'Top',
                        margin: { top: 20, bottom: 20 }
                    },
                    mode: 'SVG'
                });
                barcode.appendTo('#QrCode_Binary_version5');
            });

            afterAll((): void => {
                barcode.destroy();
                ele.remove();
            });

            it('Rendering', (done: Function) => {
                element = barcode.element.childNodes[0].childNodes; length = element.length;
                output1(barcode);
                expect(length == 229 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "46.480769230769226" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "115.13461538461536" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "4.865384615384615" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "4.865384615384615").toBe(true);
                done();
            });
        });

        describe('margin coverage4 invalid character', () => {


            beforeAll((): void => {
                ele = createElement('div', { id: 'QrCode_Binary_version5' });
                document.body.appendChild(ele);
                barcode = new QRCodeGenerator({
                    width: '200px', height: '200px',
                    value: "மெய்",
                    mode: 'SVG'
                });
                barcode.appendTo('#QrCode_Binary_version5');
            });

            afterAll((): void => {
                barcode.destroy();
                ele.remove();
            });

            it('Rendering', (done: Function) => {
                done();
            });
        });

        describe('margin coverage3 issue', () => {


            beforeAll((): void => {
                ele = createElement('div', { id: 'QrCode_Binary_version5' });
                document.body.appendChild(ele);
                barcode = new QRCodeGenerator({
                    width: '200px', height: '200px',
                    value: "bar",
                    displayText: {
                        position: 'Top',
                        margin: { top: 0, bottom: 20 }
                    },
                    mode: 'SVG'
                });
                barcode.appendTo('#QrCode_Binary_version5');
            });

            afterAll((): void => {
                barcode.destroy();
                ele.remove();
            });

            it('Rendering', (done: Function) => {
                element = barcode.element.childNodes[0].childNodes; length = element.length;
                output1(barcode);
                expect(length == 229 && (element[Math.round(length / 2)] as HTMLElement).getAttribute("x") == "38.019230769230774" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("y") == "104.36538461538464" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("width") == "5.634615384615385" && (element[Math.round(length / 2)] as HTMLElement).getAttribute("height") == "5.634615384615385").toBe(true);
                done();
            });
        });
    });

    describe('Customer Issue - 262067', () => {


        beforeAll((): void => {
            ele = createElement('div', { id: 'QrCode_Customer_issue1' });
            document.body.appendChild(ele);
            barcode = new QRCodeGenerator({
                width: '200px', height: '150px',
                value: "ELEM-004:TITRE-TEST",
                xDimension: 3,
                errorCorrectionLevel: ErrorCorrectionLevel.Low,
                mode: 'SVG'
            });
            barcode.appendTo('#QrCode_Customer_issue1');
        });

        afterAll((): void => {
            barcode.destroy();
            ele.remove();
        });

        it('Rendering', (done: Function) => {
            output1(barcode);
            element = barcode.element.childNodes[0].childNodes; length = element.length;
            expect( length ==226&& (element[Math.round(length/2)] as HTMLElement).getAttribute("x") =="59.673076923076934"&& (element[Math.round(length/2)] as HTMLElement).getAttribute("y") =="63.76923076923079"&& (element[Math.round(length/2)] as HTMLElement).getAttribute("width") =="4.480769230769231"&& (element[Math.round(length/2)] as HTMLElement).getAttribute("height") =="4.480769230769231").toBe(true);
            done();
        });
    });

     describe('Customer Issue - 264414', () => {


        beforeAll((): void => {
            ele = createElement('div', { id: 'QrCode_Customer_issue1' });
            document.body.appendChild(ele);
            barcode = new QRCodeGenerator({
                width: '300px',
                height: '200px',
                displayText: { visibility: true, size: 9,  text: "service--01|fragment--0001|Login|11/12/2020|test"},
                mode: 'Canvas',
                value: "service--01|fragment--0001|Login|11/01/2020",
            });
            barcode.appendTo('#QrCode_Customer_issue1');
        });

        afterAll((): void => {
            barcode.destroy();
            ele.remove();
        });

        it('QR code is not render the center', (done: Function) => {
            element = document.getElementById("QrCode_Customer_issue1").children[0];
            var height = element.getAttribute("height");
            var width = element.getAttribute("width");
            var style = element.getAttribute("style");
            expect(height == "300" && width == "450" && style == "transform: scale(0.666667); transform-origin: 0px 0px;").toBe(true);
            done();
        });
    });

});
describe('QRCode Logo', () => {
    describe('Rendering', ()=> {
        beforeAll(() : void => {
            ele = createElement('div', {id: 'QRCodeLogo'});
            document.body.appendChild(ele);
            barcode = new QRCodeGenerator({
                width: '200px', height: '150px',
                value: 'Syncfusion',
                displayText: {text: 'Syncfusion'},
                logo: {imageSource: 'https://www.syncfusion.com/web-stories/wp-content/uploads/sites/2/2022/02/cropped-Syncfusion-logo.png'}
            });
            barcode.appendTo('#QRCodeLogo');
        });
        afterAll(() : void => {
            barcode.destroy();
            ele.remove();
        });
        it('QRCode Logo', (done: Function) =>{
            var image = barcode.element.children[0].lastElementChild;
            expect(image !== null && image.tagName.toLowerCase() === 'image' && image.getAttribute("x") === "83.64519230769231" && image.getAttribute("y") === "51.89519230769231" && image.getAttribute("width") === "28.228846153846153" && image.getAttribute("height") === "28.228846153846153").toBe(true);
            done();
        });
    });
    describe('property change', ()=> {
        beforeAll(() : void => {
            ele = createElement('div', {id: 'QRCodeLogo'});
            document.body.appendChild(ele);
            barcode = new QRCodeGenerator({
                width: '200px', height: '150px',
                value: 'Syncfusion',
                displayText: {text: 'Syncfusion'},
                logo: {imageSource: 'https://www.syncfusion.com/web-stories/wp-content/uploads/sites/2/2022/02/cropped-Syncfusion-logo.png'},
            });
            barcode.appendTo('#QRCodeLogo');
        });
        afterAll(() : void => {
            barcode.destroy();
            ele.remove();
        });
        it('remove logo at runtime', (done: Function) =>{
            barcode.logo.imageSource = '';
            barcode.dataBind();
            var lastElementChild = barcode.element.children[0].lastElementChild;
            expect(lastElementChild !== null && lastElementChild.tagName.toLowerCase() !== 'image').toBe(true);
            done();
        });
        it('add logo at runtime', (done: Function) =>{
            barcode.logo.imageSource = 'https://www.syncfusion.com/web-stories/wp-content/uploads/sites/2/2022/02/cropped-Syncfusion-logo.png';   
            barcode.dataBind();
            var image = barcode.element.children[0].lastElementChild;
            expect(image !== null && image.tagName.toLowerCase() === 'image' && image.getAttribute("x") === "83.64519230769231" && image.getAttribute("y") === "51.89519230769231" && image.getAttribute("width") === "28.228846153846153" && image.getAttribute("height") === "28.228846153846153").toBe(true);
            done();
        });
        it('mode change at runtime', (done: Function) =>{
            barcode.mode = 'Canvas';
            barcode.dataBind();
            barcode.mode = 'SVG';
            barcode.dataBind();
            var image = barcode.element.children[0].lastElementChild;
            expect(image !== null && image.tagName.toLowerCase() === 'image' && image.getAttribute("x") === "83.64519230769231" && image.getAttribute("y") === "51.89519230769231" && image.getAttribute("width") === "28.228846153846153" && image.getAttribute("height") === "28.228846153846153").toBe(true);
            done();
        });
    });
});

describe('QRCode export', () => {
    beforeAll((): void => {
        ele = createElement('div', { id: 'QRCode' });
        document.body.appendChild(ele);
        barcode = new QRCodeGenerator({
            width: '200px', height: '150px',
            value: "ABCD",
            displayText: { visibility: true, size: 9,  text: "ABCD"},
        });
        barcode.appendTo('#QRCode');
    });

    afterAll((): void => {
        barcode.destroy();
        ele.remove();
    });
    
    it('QRcode export - return Base64 in PNG format',(done: Function) => {
        barcode.exportAsBase64Image('PNG');
        done()
    });
    it('QRcode export - return Base64 in JPG format', (done: Function) => {
        barcode.exportAsBase64Image('JPG');
        done()
    });
    it('QRCode export - Download the image in JPG format', (done: Function) => {
        let svg: any; 
        svg = barcode.exportImage('Export','JPG');
        expect(svg).not.toBeNull();
        done()
    });
});
