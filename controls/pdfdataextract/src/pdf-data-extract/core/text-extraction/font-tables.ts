export class _fontTables {
    _verticalPresentationTable: number[][] = [[0x2013, 0xfe32],  [0x2014, 0xfe31], [0x2025, 0xfe30], [0x2026, 0xfe19],
        [0x3001, 0xfe11], [0x3002, 0xfe12], [0x3008, 0xfe3f], [0x3009, 0xfe40], [0x300a, 0xfe3d],
        [0x300b, 0xfe3e], [0x300c, 0xfe41], [0x300d, 0xfe42], [0x300e, 0xfe43], [0x300f, 0xfe44], [0x3010, 0xfe3b],
        [0x3011, 0xfe3c], [0x3014, 0xfe39], [0x3015, 0xfe3a], [0x3016, 0xfe17], [0x3017, 0xfe18], [0xfe4f, 0xfe34],
        [0xff01, 0xfe15], [0xff08, 0xfe35], [0xff09, 0xfe36], [0xff0c, 0xfe10], [0xff1a, 0xfe13], [0xff1b, 0xfe14],
        [0xff1f, 0xfe16], [0xff3b, 0xfe47], [0xff3d, 0xfe48], [0xff3f, 0xfe33], [0xff5b, 0xfe37], [0xff5d, 0xfe38]
    ];
    _verticalMapTable: Map<number, number[]>  = new Map<number, number[]>();
    constructor() {
        for (let i: number = 0; i < this._verticalPresentationTable.length; i++) {
            this._verticalMapTable.set(this._verticalPresentationTable[Number.parseInt(i.toString(), 10)][0],
                                       this._verticalPresentationTable[Number.parseInt(i.toString(), 10)]);
        }
    }
}
