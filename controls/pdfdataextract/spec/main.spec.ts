import { PdfDocument, PdfPage, PdfPen } from '@syncfusion/ej2-pdf';
import { pdfSuccinctly, annotations } from './inputs.spec';
import { PdfDataExtractor } from '../src/pdf-data-extract/core/pdf-data-extractor';
import { TextLine } from '../src/pdf-data-extract/core/text-structure';
describe('Pdf Text Extraction', () => {
    it('Pdf Extract Text', () => {
        let document: PdfDocument = new PdfDocument(pdfSuccinctly);
        let extractor: PdfDataExtractor = new PdfDataExtractor(document);
        let text: string = extractor.extractText({ startPageIndex: 0, endPageIndex: 0 });
        expect(text).toEqual(' \r\n1\r\n \r\n \r\nCreated with a trial version of Syncfusion Essential PDF\r\n\r\nCreated with a trial version of Syncfusion Essential PDF\r\n\r\n');
        text = extractor.extractText({ startPageIndex: 1, endPageIndex: 1 });
        expect(text).toEqual(' \r\n2\r\n \r\nPDF\r\n \r\nSuccinctly\r\n \r\n \r\nBy \r\n \r\nRyan Hodson\r\n \r\n \r\nForeword by Daniel Jeb\r\naraj\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n');
        text = extractor.extractText({ startPageIndex: 2, endPageIndex: 2 });
        expect(text).toEqual(' \r\n3\r\n \r\nCopyright Â© 2012 by Syncfusion Inc.\r\n \r\n2501 Aerial Center Parkway\r\n \r\nSuite 200\r\n \r\nMorrisville, NC 27560\r\n \r\nUSA\r\n \r\nAll rights reserved.\r\n \r\n \r\nmportant licensing information. Please read.\r\n \r\nThis bo\r\nok is available for free download from \r\nwww.syncfusion.com\r\n \r\non completion of a \r\nregistration form.\r\n \r\nIf you obtained this book from any other source, please register and download a free copy from \r\nwww.syncfusion.com\r\n.\r\n \r\nThis book is licensed for reading only if obtained from \r\nwww.syncfusion.com\r\n.\r\n \r\nThis book is licensed strictly for personal, educational use.\r\n \r\nRedistribution in any form is prohibi\r\nted.\r\n \r\nThe authors and copyright holders provide absolutely no warranty for any information provided.\r\n \r\nThe authors and copyright holders shall not be liable for any claim, damages, or any other \r\nliability arising from, out of, or in connection with the informa\r\ntion in this book.\r\n \r\nPlease do not use this book if the listed terms are unacceptable.\r\n \r\nUse shall constitute acceptance of the terms listed.\r\n \r\n \r\ndited by\r\n \r\nThis publication was edited by \r\nStephen Jebaraj\r\n, \r\nsenior product manager\r\n, Syncf\r\nus\r\nion, Inc.\r\n \r\nI\r\n \r\nE\r\n \r\n');
        text = extractor.extractText({ startPageIndex: 3, endPageIndex: 3 });
        expect(text).toEqual(' \r\n4\r\n \r\nTable of \r\nContent\r\ns\r\n \r\nThe Story Behind the \r\nSuccinctly\r\n \r\nSeries  of Books\r\n \r\n................................\r\n.....................\r\n \r\n8\r\n \r\nIntroduction\r\n \r\n................................\r\n................................\r\n................................\r\n.................\r\n \r\n10\r\n \r\nThe PDF standard\r\n \r\n................................\r\n................................\r\n................................\r\n....\r\n \r\n10\r\n \r\nChapter 1\r\n \r\n \r\nConceptual Overview\r\n \r\n................................\r\n................................\r\n................\r\n \r\n11\r\n \r\nHeader\r\n \r\n................................\r\n................................\r\n................................\r\n.....................\r\n \r\n11\r\n \r\nBody\r\n \r\n................................\r\n................................\r\n................................\r\n.........................\r\n \r\n12\r\n \r\nCross\r\n-\r\nreference table\r\n \r\n................................\r\n................................\r\n...............................\r\n \r\n13\r\n \r\nTrailer\r\n \r\n................................\r\n................................\r\n................................\r\n.......................\r\n \r\n13\r\n \r\nSummary\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n14\r\n \r\nChapter 2\r\n \r\n \r\nBuilding a PDF\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n15\r\n \r\nHeader\r\n \r\n................................\r\n................................\r\n................................\r\n.....................\r\n \r\n15\r\n \r\nBody\r\n \r\n................................\r\n................................\r\n................................\r\n.........................\r\n \r\n15\r\n \r\nThe page tree\r\n \r\n................................\r\n................................\r\n................................\r\n......\r\n \r\n15\r\n \r\nPage(s)\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n16\r\n \r\nResources\r\n \r\n................................\r\n................................\r\n................................\r\n............\r\n \r\n17\r\n \r\nContent\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n18\r\n \r\nCatalog\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n19\r\n \r\nCross\r\n-\r\nreference table\r\n \r\n................................\r\n................................\r\n...............................\r\n \r\n19\r\n \r\nTrailer\r\n \r\n................................\r\n................................\r\n................................\r\n.......................\r\n \r\n19\r\n \r\nCompiling the valid PDF\r\n \r\n................................\r\n................................\r\n...........................\r\n \r\n20\r\n \r\nHeader binary\r\n \r\n................................\r\n................................\r\n................................\r\n......\r\n \r\n20\r\n \r\nContent stream length\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n21\r\n \r\nCross\r\n-\r\nreference table\r\n \r\n................................\r\n................................\r\n...........................\r\n \r\n21\r\n \r\nTrailer dictionary\r\n \r\n................................\r\n................................\r\n................................\r\n..\r\n \r\n21\r\n \r\n')
        text = extractor.extractText({ startPageIndex: 4, endPageIndex: 4 });
        expect(text).toEqual(" \r\n5\r\n \r\nSummary\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n22\r\n \r\nChapter 3\r\n \r\n \r\nText Operators\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n23\r\n \r\nThe basics\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n23\r\n \r\nPositioning text\r\n................................\r\n................................\r\n................................\r\n.....\r\n \r\n24\r\n \r\nText state operators\r\n \r\n................................\r\n................................\r\n................................\r\n..\r\n \r\n25\r\n \r\nThe Tf operator\r\n \r\n................................\r\n................................\r\n................................\r\n....\r\n \r\n25\r\n \r\nThe Tc operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n26\r\n \r\nThe Tw operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n26\r\n \r\nThe Tr operator\r\n \r\n................................\r\n................................\r\n................................\r\n....\r\n \r\n27\r\n \r\nThe Ts operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n27\r\n \r\nThe TL operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n28\r\n \r\nText positioning operators\r\n \r\n................................\r\n................................\r\n........................\r\n \r\n29\r\n \r\nThe Td operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n29\r\n \r\nThe T* operator\r\n \r\n................................\r\n................................\r\n................................\r\n....\r\n \r\n30\r\n \r\nThe Tm operator\r\n \r\n................................\r\n................................\r\n................................\r\n..\r\n \r\n30\r\n \r\nText painting operators\r\n \r\n................................\r\n................................\r\n.............................\r\n \r\n31\r\n \r\nThe Tj operator\r\n \r\n................................\r\n................................\r\n................................\r\n....\r\n \r\n32\r\n \r\nThe ' (single quote) operator\r\n \r\n................................\r\n................................\r\n................\r\n \r\n32\r\n \r\nThe "+'"'+' (double quote) operator\r\n \r\n................................\r\n................................\r\n..............\r\n \r\n32\r\n \r\nThe TJ operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n33\r\n \r\nSummary\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n34\r\n \r\nChapter 4\r\n \r\n \r\nGraphics Operators\r\n \r\n................................\r\n................................\r\n..................\r\n \r\n35\r\n \r\nThe basics\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n35\r\n \r\nGraphics state operators\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n36\r\n \r\nThe w operator\r\n \r\n................................\r\n................................\r\n................................\r\n.....\r\n \r\n37\r\n \r\nThe d operator\r\n \r\n................................\r\n................................\r\n................................\r\n.....\r\n \r\n37\r\n \r\n');
        text = extractor.extractText({ startPageIndex: 5, endPageIndex: 5 });
        expect(text).toEqual(' \r\n6\r\n \r\nThe J, j, and M operators\r\n \r\n................................\r\n................................\r\n.....................\r\n \r\n37\r\n \r\nThe cm operator\r\n \r\n................................\r\n................................\r\n................................\r\n...\r\n \r\n39\r\n \r\nThe q and Q operators\r\n \r\n................................\r\n................................\r\n.........................\r\n \r\n40\r\n \r\nThe RG, rg, K, and k operators\r\n \r\n................................\r\n................................\r\n............\r\n \r\n40\r\n \r\nPath construction operators\r\n \r\n................................\r\n................................\r\n......................\r\n \r\n41\r\n \r\nThe m operator\r\n \r\n................................\r\n................................\r\n................................\r\n....\r\n \r\n41\r\n \r\nThe l (lowercase L) operator\r\n \r\n................................\r\n................................\r\n................\r\n \r\n41\r\n \r\nThe c operator\r\n................................\r\n................................\r\n................................\r\n......\r\n \r\n42\r\n \r\nThe h operator\r\n \r\n................................\r\n................................\r\n................................\r\n.....\r\n \r\n42\r\n \r\nGraphics painting operators\r\n \r\n................................\r\n................................\r\n......................\r\n \r\n43\r\n \r\nThe S and s operators\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n43\r\n \r\nThe f operator\r\n \r\n................................\r\n................................\r\n................................\r\n......\r\n \r\n43\r\n \r\nThe B and b operators\r\n \r\n................................\r\n................................\r\n.........................\r\n \r\n44\r\n \r\nThe * (asterisk) operators\r\n \r\n................................\r\n................................\r\n.....................\r\n \r\n44\r\n \r\nSummary\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n45\r\n \r\nChapter 5 \r\n  \r\nNavigation\r\n \r\nand Annotations\r\n \r\n................................\r\n................................\r\n....\r\n \r\n46\r\n \r\nPreparations\r\n \r\n................................\r\n................................\r\n................................\r\n.............\r\n \r\n46\r\n \r\nThe document outline\r\n \r\n................................\r\n................................\r\n...............................\r\n \r\n47\r\n \r\nThe \r\ninitial destination\r\n \r\n................................\r\n................................\r\n...........................\r\n \r\n50\r\n \r\nHyperlinks\r\n \r\n................................\r\n................................\r\n................................\r\n.................\r\n \r\n50\r\n \r\nText annotations\r\n \r\n................................\r\n................................\r\n................................\r\n.......\r\n \r\n51\r\n \r\nSummary\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n52\r\n \r\nChapter 6\r\n  \r\nCreating PDFs in C#\r\n \r\n................................\r\n................................\r\n..................\r\n \r\n53\r\n \r\nDisclaimer\r\n \r\n................................\r\n................................\r\n................................\r\n.................\r\n \r\n53\r\n \r\nInstallation\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n53\r\n \r\nThe basics\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n53\r\n \r\n');
        text = extractor.extractText({ startPageIndex: 6, endPageIndex: 6 });
        expect(text).toEqual(' \r\n7\r\n \r\nCompiling\r\n \r\n................................\r\n................................\r\n................................\r\n.............\r\n \r\n54\r\n \r\niTextSharp text objects\r\n \r\n................................\r\n................................\r\n.............................\r\n \r\n55\r\n \r\nChunks\r\n \r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n55\r\n \r\nPhrases\r\n................................\r\n................................\r\n................................\r\n................\r\n \r\n56\r\n \r\nParagraphs\r\n \r\n................................\r\n................................\r\n................................\r\n..........\r\n \r\n56\r\n \r\nLists\r\n \r\n................................\r\n................................\r\n................................\r\n.....................\r\n \r\n57\r\n \r\nFormatting a document\r\n \r\n................................\r\n................................\r\n.............................\r\n \r\n57\r\n \r\nDocument dimensions\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n57\r\n \r\nColors\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n58\r\n \r\nSelecting fonts\r\n \r\n................................\r\n................................\r\n................................\r\n.....\r\n \r\n58\r\n \r\nCustom fonts\r\n \r\n................................\r\n................................\r\n................................\r\n........\r\n \r\n59\r\n \r\nFormatting text blocks\r\n \r\n................................\r\n................................\r\n..........................\r\n \r\n60\r\n \r\nSummary\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n61\r\n \r\nConclusion\r\n \r\n................................\r\n................................\r\n................................\r\n..................\r\n \r\n62\r\n \r\n');
        text = extractor.extractText({ startPageIndex: 7, endPageIndex: 7 });
        expect(text).toEqual(" \r\n8\r\n \r\n \r\nThe Story \r\nB\r\nehind the \r\nSuccinctly \r\nSeries\r\n \r\n \r\no\r\nf Books\r\n \r\nDaniel Jebaraj, Vice President\r\n \r\nSyncfusion, Inc.\r\n \r\ntaying on the cutting edge\r\n \r\nAs many of you may know, Syncfusion is a provider of software components \r\nfor the Microsoft platform. This puts us in the exciting but challenging \r\nposition of always being \r\non the cutting edge.\r\n \r\nWhenever platforms or tools are shipping out of Microsoft, which seems to \r\nbe about every other week these days, we have to educate ourselves, quickly.\r\n \r\nInformation is plentiful but harder to digest\r\n \r\nIn reality, this translates into a lot\r\n \r\nof book orders, blog searches, and Twitter scans.\r\n \r\nWhile more information is becoming available on the Internet and more and more books \r\nare being published, even on topics that are relatively new, one aspect that continues to \r\ninhibit us is the inability to\r\n \r\nfind concise technology overview books. \r\n \r\nWe are usually faced with two options: read several 500+ page books or scour the web \r\nfor relevant blog posts and other articles. Just as everyone else who has a job to do and \r\ncustomers to serve, we find this quite \r\nfrustrating.\r\n \r\nThe \r\nSuccinctly\r\n \r\nseries\r\n \r\nThis frustration translated into a deep desire to produce a series of concise technical \r\nbooks that would be targeted at developers working on the Microsoft platform. \r\n \r\nWe firmly believe, given the background knowledge such\r\n \r\ndevelopers have, that most \r\ntopics can be translated into books that are between 50 and 100 pages. \r\n \r\nThis is exactly what we resolved to accomplish with the \r\nSuccinctly\r\n \r\nseries. Isnât \r\neverything wonderful born out of a deep desire to change things for the bet\r\nter?\r\n \r\nThe best authors, the best content\r\n \r\nEach author was carefully chosen from a pool of talented experts who shared our vision. \r\nThe book you now hold in your hands, and the others available in this series, are a result \r\nof the authorsâ tireless work. You wi\r\nll find original content that is guaranteed to get you \r\nup and running in about the time it takes to drink a few cups of coffee.\r\n \r\n \r\nS\r\n \r\n");
        text = extractor.extractText({ startPageIndex: 8, endPageIndex: 8 });
        expect(text).toEqual(" \r\n9\r\n \r\nFree forever \r\n \r\nSyncfusion will be working to produce books on several topics. The books will always be \r\nfree. Any updates we publ\r\nish will also be free. \r\n \r\nFree? What is the catch?\r\n \r\nThere is no catch here. Syncfusion has a vested interest in this effort. \r\n \r\nAs a component vendor, our unique claim has always been that we offer deeper and \r\nbroader frameworks than anyone else on the market. D\r\neveloper education greatly helps \r\nus market and sell against competing vendors who promise to âenable AJAX support \r\nwith one click,â or âturn the moon to cheese!â\r\n \r\nLet us know what you think\r\n \r\nIf you have any topics of interest, thoughts, or feedback, please fe\r\nel free to send them to \r\nus at \r\nsuccinctly\r\n-\r\nseries@syncfusion.com\r\n. \r\n \r\nWe sincerely hope you enjoy reading this book and that it helps you better understand \r\nthe topic of study. Thank you for reading.\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nPlease follow us on Twitter and âLikeâ us on Facebook to help us spread the \r\n \r\nword about the \r\nSuccinctly \r\nseries!\r\n \r\n                     \r\n \r\n");
        text = extractor.extractText({ startPageIndex: 9, endPageIndex: 9 });
        expect(text).toEqual(" \r\n10\r\n \r\nIntroduction\r\n \r\nAd\r\nobe\r\n \r\nSystems Incorporated\r\nâs\r\n \r\nPortable Document Format \r\n(PDF) \r\nis the de facto \r\nstandard for\r\n \r\nthe \r\naccurate, reliable, and platform\r\n-\r\nindependent rep\r\nr\r\nesentation of a paged \r\ndocument.\r\n \r\nItâ\r\ns\r\n \r\nthe only universally accepted file format \r\nthat allows pixel\r\n-\r\nperfect layouts.\r\n \r\nIn\r\n \r\naddition, PD\r\nF supports user interaction and\r\n \r\ncollaborative workflow\r\ns that are\r\n \r\nnot \r\npossible with printed documents.\r\n \r\nPDF documents have b\r\neen in widespread use\r\n \r\nfor years,\r\n \r\nand dozens of free and \r\ncommercial PDF readers, editors, and libraries\r\n \r\nare readily availa\r\nble.\r\n \r\nHowever,\r\n \r\nd\r\nespite \r\nthis popularity, \r\nitâs still difficult to find a succinct guide to the \r\nnative PDF \r\nformat.\r\n \r\nUnderstanding the internal workings of a PDF makes it possible to dynamically \r\ngenerate\r\n \r\nPDF documents\r\n. For example, a \r\nweb server can extract infor\r\nmation from a database, \r\nuse it to customize\r\n \r\nan\r\n \r\ninvoice\r\n, and serv\r\ne it to the customer on\r\n \r\nthe\r\n \r\nfly.\r\n \r\nT\r\nhis book \r\nintroduce\r\ns\r\n \r\nthe fundamental\r\n \r\ncomponents\r\n \r\nof the native PDF language. \r\nWith the \r\nhelp of a utility program called \r\npdftk\r\n \r\nfrom \r\nPDF Labs\r\n, \r\nw\r\neâll build a PDF document from \r\nscratch\r\n, learning how to \r\np\r\nosition elements, select fonts,\r\n \r\ndraw vector graphics, and \r\ncreate\r\n \r\ninteractive tables of contents along the way.\r\n \r\nThe goal is to provide enough \r\ninforma\r\ntion to\r\n \r\nle\r\nt you start building \r\nyour own documents without bogging you down with \r\nthe \r\nmany complexities of the \r\nPDF\r\n \r\nfile format.\r\n \r\nIn addition, the last chapter of this book provides an overview of the \r\niT\r\next\r\nS\r\nharp\r\n \r\nlibrary \r\n(\r\nhttp://itextp\r\ndf.com/\r\n). \r\niT\r\next\r\nS\r\nharp \r\nis a C# \r\nlibrary \r\nthat \r\nprovides\r\n \r\nan object\r\n-\r\noriented \r\nwrapper \r\nfor native PDF elements.\r\n \r\nHaving a C# representation of a document makes it much \r\neasier\r\n \r\nto leverage existing .NET components and \r\nstreamline the creation of dynamic \r\nPDF \r\nfiles.\r\n \r\nThe\r\n \r\nsample files\r\n \r\ncreated in this book can be downloaded here: \r\nhttps://bitbucket.org/syncfusion/pdf\r\n-\r\nsuccinctly/\r\n.\r\n \r\nThe PDF \r\ns\r\ntandard\r\n \r\nThe PDF format is an open\r\n \r\nstandard maintained by the Internationa\r\nl Organi\r\nzation for \r\nStandardization\r\n. The\r\n \r\nofficial specification is defined in\r\n \r\nISO 32000\r\n-\r\n1:2008\r\n, but \r\nAdobe\r\n \r\nalso provides a \r\nfree, \r\ncomprehensive \r\nguide\r\n \r\ncalled \r\nPDF Referenc\r\ne, Sixth Edition, version \r\n1.7\r\n.\r\n \r\n");
        text = extractor.extractText({ startPageIndex: 10, endPageIndex: 10 });
        expect(text).toEqual(" \r\n11\r\n \r\nChapter 1\r\n \r\n \r\nConceptual\r\n \r\nOverview\r\n \r\nWeâll begin with a conceptual overview of a \r\nsimple \r\nPDF document.\r\n \r\nThis \r\nchapter is \r\ndesigned to be a\r\n \r\nbrief orientation before diving in and creating a real d\r\nocument from \r\nscratch.\r\n \r\nA PDF file\r\n \r\ncan be divided into \r\nfour parts: a header, body, cross\r\n-\r\nreference table, and \r\ntrailer.\r\n \r\nThe header marks the file as a PDF, the body defines the \r\nvisible \r\ndocument, the \r\ncross\r\n-\r\nreference table \r\nlists the location of everything in th\r\ne \r\nfile\r\n, and the trailer provides \r\ni\r\nnstructions for how to start reading the\r\n \r\nfile.\r\n \r\n \r\nFigure 1: \r\nComponents\r\n \r\nof a PDF \r\ndocument\r\n \r\nEvery PDF file \r\nmust\r\n \r\nhave these four components.\r\n \r\nHeader\r\n \r\nThe header \r\nis simply a\r\n \r\nPDF version number and a\r\nn arbitrary\r\n \r\nsequence of binary d\r\nata\r\n.\r\n \r\nThe binary data\r\n \r\nprevents naÃ¯ve applications from processing \r\nthe PDF as a text file. This \r\nwould result in a corrupted file, since a PDF \r\ntypically \r\nconsists of both \r\nplain\r\n \r\ntext\r\n \r\nand \r\nbinary data (\r\ne.g.\r\n, a binary font file can be directly embedded in a PDF).\r\n \r\n");
        text = extractor.extractText({ startPageIndex: 11, endPageIndex: 11 });
        expect(text).toEqual(" \r\n12\r\n \r\nBody\r\n \r\nThe body\r\n \r\nof a PDF\r\n \r\ncontains\r\n \r\nthe entire visible document\r\n. \r\nThe minimum elements \r\nr\r\nequired in a valid PDF body are\r\n:\r\n \r\nâ¢\r\n \r\nA\r\n \r\npage \r\ntree\r\n \r\nâ¢\r\n \r\nPages\r\n \r\nâ¢\r\n \r\nResources\r\n \r\n \r\nâ¢\r\n \r\nContent\r\n \r\nâ¢\r\n \r\nThe\r\n \r\ncatalog\r\n \r\nThe\r\n \r\npage tree \r\nserves as the root of the document. In the simplest case, \r\nit\r\n \r\nis just a list o\r\nf \r\nthe pages in the \r\ndocument.\r\n \r\nEach \r\npage\r\n \r\nis defined as an independent \r\nentity\r\n \r\nwith \r\nme\r\ntadata (e.g., page dimensions) and \r\na reference to \r\nits \r\nresources and content, which \r\nare\r\n \r\ndefined separately.\r\n \r\nTogether, the page tree and page objects \r\ncreate\r\n \r\nthe âpaperâ that\r\n \r\nco\r\nmpose\r\ns\r\n \r\nthe document.\r\n \r\nResources\r\n \r\nare objects that are required to render \r\na\r\n \r\npage. \r\nFor example, a single font is \r\ntypically used across several pages, so storing the font information in an external \r\nresource\r\n \r\nis much more efficient.\r\n \r\nA \r\ncontent\r\n \r\nobject \r\ndefines the t\r\next and graphics that \r\nactually show up on the page.\r\n \r\nTogether, content objects and resources define the \r\nappearance of an individual page.\r\n \r\nFinally, the \r\ndocumentâs \r\ncatalog\r\n \r\ntells applications where to start reading the document. \r\nOften, this is just a pointer t\r\no the root page tree.\r\n \r\n");
        text = extractor.extractText({ startPageIndex: 14, endPageIndex: 14 });
        expect(text).toEqual(" \r\n15\r\n \r\nChapter 2\r\n \r\n \r\nBuilding a PDF\r\n \r\nPDFs contain a m\r\nix of text and binary, but itâs still possible to create them from scratch \r\nusing nothing but a text editor and a \r\nprogram\r\n \r\ncalled \r\npdftk\r\n. You create the header, body, \r\nand trailer on your own, and then the \r\npdftk\r\n \r\nutility goes in and fill\r\ns in the binary blanks f\r\nor \r\nyou. \r\nIt also manages object references and byte \r\ncalculations\r\n, which is not something \r\nyou would want to do manually.\r\n \r\nFirst, download \r\npdftk\r\n \r\nfrom \r\nPDF Labs\r\n. \r\nFor Windows users, installation\r\n \r\nis as simple as \r\nunzipping the file and adding the resulting folder to your \r\nPATH\r\n.\r\n \r\nR\r\nunning \r\npdftk \r\n--\r\nhelp\r\n \r\nfrom \r\na\r\n \r\ncommand \r\nprompt\r\n \r\nshould display the \r\nhelp \r\npage if installation was successful.\r\n \r\nNext, weâll manually create a PDF file for use with \r\npdftk\r\n. C\r\nreate\r\n \r\na pl\r\nain\r\n \r\ntext file called\r\n \r\nhello\r\n-\r\nsrc\r\n.pdf\r\n \r\n(\r\nthis file is a\r\nvailable\r\n \r\nat\r\n \r\nhttps://bitbucket.org/syncfusion/pdf\r\n-\r\nsuccinctly\r\n)\r\n \r\nand \r\nopen it in your favorite text editor.\r\n \r\nHeader\r\n \r\nWeâll\r\n \r\nstart by adding a header to\r\n \r\nhello\r\n-\r\nsrc\r\n.pdf\r\n.\r\n \r\nRemember that the header contains \r\nboth the PDF version number and a bit of binary data. Weâll just add the PDF version \r\nand leave the binary data to \r\npdftk\r\n. Add the following to \r\nhello\r\n-\r\nsrc\r\n.pdf\r\n.\r\n \r\n%PDF\r\n-\r\n1.0\r\n \r\nThe \r\n%\r\n \r\ncharacter\r\n \r\nbegins\r\n \r\na \r\nPDF \r\ncomment, s\r\no the header is really just a special\r\n \r\nkind of \r\ncomment.\r\n \r\nBody\r\n \r\nThe body (and hence the entire visible document)\r\n \r\nis\r\n \r\nbuilt up using\r\n \r\nobjects\r\n. \r\nObjects are \r\nthe basic unit of PDF files, and they roughly correspond to the data structures of popular \r\nprogramming langu\r\nages. \r\nFor example, PDF\r\n \r\nhas \r\nB\r\noolean, numeric, string, array, and \r\ndictionary objects\r\n, along with streams and names, which are specific to PDF. \r\nWeâll take \r\na look at each \r\ntype \r\nas the need arises.\r\n \r\nThe \r\np\r\nage \r\nt\r\nree\r\n \r\nThe page tree is a dictionary object\r\n \r\ncontaining \r\na \r\nlist of the pages that make up the \r\ndocument.\r\n \r\nA\r\n \r\nminimal\r\n \r\npage tree contains just one \r\npage.\r\n \r\n")
        document.destroy();
    });
    it('Pdf Extract TextLines', () => {
        let document: PdfDocument = new PdfDocument(pdfSuccinctly);
        let extractor: PdfDataExtractor = new PdfDataExtractor(document);
        let textCollection: TextLine[] = extractor.extractTextLines({ startPageIndex: 0, endPageIndex: document.pageCount - 1});
        expect(textCollection[0].bounds).toEqual([90.024, 733.416, 3.069119999999998, 11.039999999999964]);
        expect(textCollection[1].bounds).toEqual([553.06, 763.6800000000001, 6.138239999999996, 11.039999999999964]);
        expect(textCollection[2].bounds).toEqual([559.18, 763.6800000000001, 3.069119999999998, 11.039999999999964]);
        expect(textCollection[3].bounds).toEqual([558.1, 672.816, 12, 48]);
        expect(textCollection[4].bounds).toEqual([157.614, 12.11099999999999, 296.7720000000004, 12]);
        expect(textCollection[5].bounds).toEqual([157.614, 12.11099999999999, 296.7720000000004, 12]);
        expect(textCollection[6].bounds).toEqual([90.024, 733.416, 3.069119999999998, 11.039999999999964]);
        expect(textCollection[7].bounds).toEqual([553.06, 759.48, 6.138239999999996, 11.039999999999964]);
        expect(textCollection[8].bounds).toEqual([559.18, 759.48, 3.069119999999998, 11.039999999999964]);
        expect(textCollection[9].bounds).toEqual([154.58, 92.65999999999997, 88.03200000000001, 48]);
        expect(textCollection[10].bounds).toEqual([242.57, 92.65999999999997, 12, 48]);
        document.destroy();
	});
    it('Pdf Extract Text Layout', () => {
        let document: PdfDocument = new PdfDocument(annotations);
        let extractor: PdfDataExtractor = new PdfDataExtractor(document);
        let text: string = extractor.extractText({ isLayout: true, startPageIndex: 0, endPageIndex: 0 });
        expect(text).toEqual("Adobe Systems Incorporated's Portable Document Format (PDF) is the de facto\r\nstandard for the accurate, reliable, and platform-independent representation of a\r\npaged document. It's the only universally accepted file format that allows pixel-perfect\r\nlayouts. In addition, PDF supports user interaction and collaborative workflows that\r\nare not possible with printed documents.\r\nPDF documents have been in widespread use for years, and dozens of free and\r\ncommercial PDF readers, editors, and libraries are readily available. However, despite\r\nthis popularity, it's still difficult to find a succinct guide to the native PDF format.\r\nUnderstanding the internal workings of a PDF makes it possible to dynamically\r\ngenerate PDF documents. For example, a web server can extract information from a\r\ndatabase, use it to customize an invoice, and serve it to the customer on the fly.\r\nThe PDF Standard\r\nThe PDF format is an open standard maintained by the International Organization for\r\nStandardization. The official specification is defined in ISO 32000-1:2008, but Adobe\r\nalso provides a free, comprehensive guide called PDF Reference, Sixth Edition,\r\nversion 1.7.\r\nChapter 1 Conceptual Overview\r\nWe'll begin with a conceptual overview of a simple PDF document. This chapter is\r\ndesigned to be a brief orientation before diving in and creating a real document from\r\nscratch.\r\nA PDF file can be divided into four parts: a header, body, cross-reference table, and\r\ntrailer. The header marks the file as a PDF, the body defines the visible document, the\r\ncross-reference table lists the location of everything in the file, and the trailer provides\r\ninstructions for how to start reading the file.\r\nPage 1 of 1 \r\nIntroduction \r\nPDF Succinctly");
        document.destroy();
    });
});

